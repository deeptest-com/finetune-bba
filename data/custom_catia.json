[
    {
        "instruction": "高亮显示/home/aaron/excel_file.xlsx中CR240*,[CR270LA]材质的组件。",
        "input": "",
        "output": "Language=CATSCRIPT\n\nSub CATMain()\n        Dim excelPath\n        excelPath = \"/home/aaron/excel_file.xlsx\"\n        Dim materials\n        materials = \"CR240*,[CR270LA]\"\n        Dim fso As Object\n        Set fso = CreateObject(\"Scripting.FileSystemObject\")\n        If fso.FileExists(excelPath) = False Then\n            excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\n            If fso.FileExists(excelPath) = False Then\n                    MsgBox \"Excel文件不存在: \" \u0026 excelPath\n                    Exit Sub\n            End If\n        End If\n        Dim partNumberTitle\n        partNumberTitle = \"Part number\"\n        Dim mapSearch\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")        \n        Dim expression\n        expression = materials\n        Dim strLen\n        strLen = Len(expression)\n        Dim splitPosition\n        splitPosition = 1\n        Dim exprChar\n        For i = 1 To strLen\n            exprChar = Mid(expression, i, 1)\n            If Mid(expression, i, 1) = \",\" Then\n                Dim mess\n                mess = Mid(expression, splitPosition, i - splitPosition)\n                splitPosition = i + 1\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\n            End If\n        Next\n        If splitPosition \u003c strLen Then\n            Dim mess2\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\n        End If\n    \n\n        Dim showPartNumber\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\n        Dim showChildComps As Object\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim transparencyChildComps As Object\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim ret As Integer\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\nEnd Sub\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\n        Dim rootDoc As ProductDocument\n        Set rootDoc = CATIA.ActiveDocument\n        If rootDoc Is Nothing Then\n            CATIALoopChildren = -2\n            Exit Function\n        End If\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\n            CATIALoopChildren = -3\n            Exit Function\n        End If\n        Dim rootProduct As Product\n        Set rootProduct = rootDoc.Product\n        Dim productChildren As Products\n        Set productChildren = rootProduct.Products\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\n        CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\n                \nEnd Function\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\n        Dim parentDoc As Document\n        Set parentDoc = productRoot.Parent\n        If parentDoc Is Nothing Then\n                ChangeCompState = -3\n                Exit Function\n        End If\n        Dim selectionNode As Selection\n        Set selectionNode = parentDoc.Selection\n        If selectionNode Is Nothing Then\n                ChangeCompState = -4\n                Exit Function\n        End If\n        Dim visProp As visPropertySet\n        Set visProp = selectionNode.VisProperties\n        If visProp Is Nothing Then\n                ChangeCompState = -5\n                Exit Function\n        End If\n        Dim productNode As Variant\n        For Each productNode In productNodes\n                selectionNode.Add productNode\n        Next\n        Set visProp = visProp.Parent\n        If visProp Is Nothing Then\n                ChangeCompState = -6\n                Exit Function\n        End If\n    If isShow \u003c 0 Then\n        Dim showState As CatVisPropertyShow\n        visProp.GetShow showState\n        If showState \u003c\u003e isShow Then\n            visProp.SetShow isShow\n        End If\n    End If\n        If isTransparency \u003c 0 Then\n        visProp.SetVisibleOpacity 100, 0\n    Else\n        visProp.SetVisibleOpacity isTransparency, 1\n    End If\n        selectionNode.Clear\n        ChangeCompState = 0\nEnd Function\nFunction GetChildren(ByRef productRoot As Product, ByRef productNode As Product, ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object, ByVal parentIsOk As Boolean) As Integer\n    Dim productsArr As Products\n        Set productsArr = productNode.Products\n        If productsArr Is Nothing Then\n                GetChildren = -2\n                Exit Function\n        End If\n        Dim returnVisable As Integer\n        returnVisable = 0\n        Dim searchedID\n        Set searchedID = CreateObject(\"Scripting.Dictionary\")\n        For i = 1 To productsArr.Count\n                Dim pdtChild As Product\n                Set pdtChild = productsArr.item(i)\n                If parentIsOk Then\n                        showChildComps.Add pdtChild\n                        returnVisable = 2\n                Else\n                        Dim currentNodeIsSearched As Boolean\n                        currentNodeIsSearched = CheckPartNumberIsInput(pdtChild, partNames)\n                        Dim ret As Integer\n                        ret = 0\n                        If CheckReferenceIsProductByDocType(pdtChild) Then\n                                ret = GetChildren(productRoot, pdtChild, partNames, showChildComps, transparencyChildComps, currentNodeIsSearched)\n                        End If\n                        If ret \u003e 1 Or currentNodeIsSearched Then\n                                searchedID.Add i, i\n                                showChildComps.Add pdtChild\n                                returnVisable = 2\n                        End If\n                End If\n        Next\n    If returnVisable \u003c\u003e 0 Then\n        For i = 1 To productsArr.Count\n            If Not searchedID.Exists(i) Then\n                transparencyChildComps.Add productsArr.item(i)\n            End If\n        Next\n    End If\n    Set productsArr = Nothing\n    GetChildren = returnVisable\nEnd Function\nFunction CheckReferenceIsProductByDocType(ByRef productNode As Product) As Boolean\n    CheckReferenceIsProductByDocType = False\n    Dim refpdt As Product\n    Set refpdt = productNode.ReferenceProduct\n    \n    If Not refpdt Is Nothing Then\n        Dim parentObj As CATBaseDispatch\n        Set parentObj = refpdt.Parent\n        If StrComp(TypeName(parentObj), \"ProductDocument\", vbTextCompare) = 0 Then\n            CheckReferenceIsProductByDocType = True\n        End If\n        Set parentObj = Nothing\n    End If\n    Set refpdt = Nothing\nEnd Function\nFunction CheckPartNumberIsInput(ByRef productNode As Product, ByRef partNames As Object) As Boolean\n    CheckPartNumberIsInput = False\n        Dim pNumStr As String\n        pNumStr = productNode.PartNumber\n    Dim itemStrReduce As String\n    Dim item As Variant\n    For Each item In partNames\n                itemStr = item\n                itemStrReduce = Left(pNumStr,Len(itemStr))\n        If itemStrReduce = itemStr Then\n            CheckPartNumberIsInput = True\n            Exit Function\n        End If\n    Next\nEnd Function\nFunction ReadExcel(ByRef showPartNumber As Object, inputSearch As Object, excelPath As String, partNumberTitle As String)\n        Dim ExcelApp\n        Set ExcelApp = CreateObject(\"Excel.Application\")\n        ExcelApp.Visible = False\n        ExcelApp.DisplayAlerts = False\n        Dim Workbook\n        Set Workbook = ExcelApp.Workbooks.Open(excelPath)\n        Dim Sheets\n        Set Sheets = Workbook.Sheets\n        Dim Sheet\n        Set Sheet = Workbook.Sheets(1)\n        Dim allRows, allCols\n        allRows = Sheet.UsedRange.Rows.Count\n        allCols = Sheet.UsedRange.Columns.Count\n        Dim row, col\n        Dim PartNumberCol\n        PartNumberCol = 0\n        For col = 1 To allCols\n                Dim CellValue\n                CellValue = Sheet.cells(1, col).value\n                If CellValue = partNumberTitle Then\n                        PartNumberCol = col\n                        Exit For\n                End If\n        Next\n        If PartNumberCol \u003c\u003e 0 Then\n                For col = 1 To allCols\n                        Dim CellTitle\n                        CellTitle = Sheet.cells(1, col).value\n                        Dim listCheck As Object\n                        Set listCheck = GetMapList(inputSearch, CellTitle)\n                        If Not listCheck Is Nothing Then\n                                For row = 2 To allRows\n                                        If Not Sheet.cells(row, col) Is Nothing Then\n                                                Dim CellValue2 As String\n                                                CellValue2 = Sheet.cells(row, col).value\n\n                                                For Each item In listCheck\n                                                        Dim ret\n                                                        If CustomLikeAddAnyToPattern(CellValue2, item, True, True) Then\n                                                                ret = True\n                                                        Else\n                                                                ret = False\n                                                        End If\n                                                        If ret Then\n                                                                Dim pNumber\n                                                                pNumber = Sheet.cells(row, PartNumberCol).value\n                                                                AddToMap showPartNumber, pNumber, pNumber\n                                                                Exit For\n                                                        End If\n                                                Next\n                                        End If\n                                Next\n                        End If\n                Next\n        Else\n                MsgBox(\"Can not find Part number in Excel!\")\n        End If\n        Set Sheet = Nothing\n        Set Sheets = Nothing\n        Workbook.Close(False)\n        Set Workbook = Nothing\n        ExcelApp.Quit\n        Set ExcelApp = Nothing\n        ReadExcel = 0\nEnd Function\nFunction CustomLikeAddAnyToPattern(expression As String, pattern As String, preAsterisk As Boolean, sufAsterisk As Boolean) As Boolean\n        Dim valReg As String\n        valReg = pattern\n        If preAsterisk Then\n                valReg = \"*\" \u0026 valReg\n        End If\n        If sufAsterisk Then\n                valReg = valReg \u0026 \"*\"\n        End If\n        CustomLikeAddAnyToPattern = CustomLike(expression, valReg)\nEnd Function\nFunction CustomLike(expression As String, pattern As String) As Boolean\n        Dim i As Long, j As Long\n        Dim exprLen As Long, patLen As Long\n        Dim exprChar As String, patChar As String\n        Dim exprPos As Long, patPos As Long\n        Dim starPos As Long, exprStarPos As Long\n        exprLen = Len(expression)\n        patLen = Len(pattern)\n        exprPos = 1\n        patPos = 1\n        starPos = 0\n        exprStarPos = 0\n        While exprPos \u003c= exprLen And patPos \u003c= patLen\n                If patPos \u003c= patLen Then\n                        patChar = Mid(pattern, patPos, 1)\n                Else\n                        patChar = \"\"\n                End If\n                If exprPos \u003c= exprLen Then\n                        exprChar = Mid(expression, exprPos, 1)\n                Else\n                        exprChar = \"\"\n                End If\n                Select Case patChar\n                        Case \"?\"\n                                If exprChar = \"\" Then\n                                        CustomLike = False\n                                        Exit Function\n                                End If\n                                exprPos = exprPos + 1\n                                patPos = patPos + 1\n                        Case \"[\"\n                                Dim charList As String, negated As Boolean\n                                negated = False\n                                patPos = patPos + 1\n                                charList = \"\"\n                                Do While patPos \u003c= patLen\n                                        patChar = Mid(pattern, patPos, 1)\n                                        If patChar = \"]\" Then\n                                                patPos = patPos + 1\n                                                Exit Do\n                                        ElseIf patChar = \"^\" And Not negated Then\n                                                negated = True\n                                        Else\n                                                charList = charList \u0026 patChar\n                                        End If\n                                        patPos = patPos + 1\n                                Loop\n                                If (negated And InStr(1, charList, exprChar, vbBinaryCompare) \u003e 0) Or (Not negated And InStr(1, charList, exprChar, vbBinaryCompare) = 0) Then\n                                        CustomLike = False\n                                        Exit Function\n                                End If\n                                exprPos = exprPos + 1\n                        Case \"*\"\n                                If patPos = patLen Then\n                                        CustomLike = True\n                                        Exit Function\n                                End If\n                                starPos = patPos\n                                exprStarPos = exprPos\n                                patPos = patPos + 1\n                        Case Else\n                                If exprChar \u003c\u003e patChar Then\n                                        If starPos = 0 Then\n                                                CustomLike = False\n                                                Exit Function\n                                        Else\n                                                patPos = starPos + 1\n                                                exprPos = exprStarPos + 1\n                                                exprStarPos = exprPos\n                                        End If\n                                Else\n                                        exprPos = exprPos + 1\n                                        patPos = patPos + 1\n                                End If\n                End Select\n        WEnd\n        If patPos = patLen Then\n                CustomLike = True\n        Else\n                CustomLike = False\n        End If\nEnd Function\nFunction AddToMapValueList(map, key, value)\n        If Not map.Exists(key) Then\n                Dim newList\n                Set newList = CreateObject(\"System.Collections.ArrayList\")\n                newList.Add(value)\n                map.Add key, newList\n        Else\n                Dim list\n                Set list = map(key)\n                list.Add(value)\n        End If\n        AddToMapValueList = 0\nEnd Function\nFunction GetMapList(map, key)\n        If map.Exists(key) Then\n                Set GetMapList = map(key)\n        Else\n                Set GetMapList = Nothing\n        End If\nEnd Function\nFunction AddToSet(ByRef collectMap As Collection, ByVal item As String) As Boolean\n        If Not Contains(collectMap, item) Then\n                collectMap.Add item, item\n        End If\n        AddToSet = True\nEnd Function\nFunction AddToMap(ByRef collectMap As Collection, keyName As String, value As String) As Boolean\n        If Not collectMap.Exists(keyName) Then\n                collectMap.Add value, keyName\n        End If\n        AddToMap = True\nEnd Function\nFunction Contains(ByRef collectMap As Collection, ByVal item As String) As Boolean\n        On Error Resume Next\n        collectMap.item(item)\n        Contains = (Err.Number = 0)\nEnd Function\nFunction RemoveFromSet(ByRef collectMap As Collection, ByVal item As String)\n        If Contains(collectMap, item) Then\n                collectMap.Remove item\n        RemoveFromSet = 0\n        Else\n                RemoveFromSet = -1\n        End If\nEnd Function"
    },
    {
        "instruction": "高亮显示CR240*,[CR270LA]材质的组件, part number表格路径./excel.xlsx。",
        "input": "",
        "output": "Language=CATSCRIPT\n\nSub CATMain()\n        Dim excelPath\n        excelPath = \"./excel.xlsx\"\n        Dim materials\n        materials = \"CR240*,[CR270LA]\"\n        Dim fso As Object\n        Set fso = CreateObject(\"Scripting.FileSystemObject\")\n        If fso.FileExists(excelPath) = False Then\n            excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\n            If fso.FileExists(excelPath) = False Then\n                    MsgBox \"Excel文件不存在: \" \u0026 excelPath\n                    Exit Sub\n            End If\n        End If\n        Dim partNumberTitle\n        partNumberTitle = \"Part number\"\n        Dim mapSearch\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")        \n        Dim expression\n        expression = materials\n        Dim strLen\n        strLen = Len(expression)\n        Dim splitPosition\n        splitPosition = 1\n        Dim exprChar\n        For i = 1 To strLen\n            exprChar = Mid(expression, i, 1)\n            If Mid(expression, i, 1) = \",\" Then\n                Dim mess\n                mess = Mid(expression, splitPosition, i - splitPosition)\n                splitPosition = i + 1\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\n            End If\n        Next\n        If splitPosition \u003c strLen Then\n            Dim mess2\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\n        End If\n    \n\n        Dim showPartNumber\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\n        Dim showChildComps As Object\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim transparencyChildComps As Object\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim ret As Integer\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\nEnd Sub\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\n        Dim rootDoc As ProductDocument\n        Set rootDoc = CATIA.ActiveDocument\n        If rootDoc Is Nothing Then\n            CATIALoopChildren = -2\n            Exit Function\n        End If\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\n            CATIALoopChildren = -3\n            Exit Function\n        End If\n        Dim rootProduct As Product\n        Set rootProduct = rootDoc.Product\n        Dim productChildren As Products\n        Set productChildren = rootProduct.Products\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\n        CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\n                \nEnd Function\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\n        Dim parentDoc As Document\n        Set parentDoc = productRoot.Parent\n        If parentDoc Is Nothing Then\n                ChangeCompState = -3\n                Exit Function\n        End If\n        Dim selectionNode As Selection\n        Set selectionNode = parentDoc.Selection\n        If selectionNode Is Nothing Then\n                ChangeCompState = -4\n                Exit Function\n        End If\n        Dim visProp As visPropertySet\n        Set visProp = selectionNode.VisProperties\n        If visProp Is Nothing Then\n                ChangeCompState = -5\n                Exit Function\n        End If\n        Dim productNode As Variant\n        For Each productNode In productNodes\n                selectionNode.Add productNode\n        Next\n        Set visProp = visProp.Parent\n        If visProp Is Nothing Then\n                ChangeCompState = -6\n                Exit Function\n        End If\n    If isShow \u003c 0 Then\n        Dim showState As CatVisPropertyShow\n        visProp.GetShow showState\n        If showState \u003c\u003e isShow Then\n            visProp.SetShow isShow\n        End If\n    End If\n        If isTransparency \u003c 0 Then\n        visProp.SetVisibleOpacity 100, 0\n    Else\n        visProp.SetVisibleOpacity isTransparency, 1\n    End If\n        selectionNode.Clear\n        ChangeCompState = 0\nEnd Function\nFunction GetChildren(ByRef productRoot As Product, ByRef productNode As Product, ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object, ByVal parentIsOk As Boolean) As Integer\n    Dim productsArr As Products\n        Set productsArr = productNode.Products\n        If productsArr Is Nothing Then\n                GetChildren = -2\n                Exit Function\n        End If\n        Dim returnVisable As Integer\n        returnVisable = 0\n        Dim searchedID\n        Set searchedID = CreateObject(\"Scripting.Dictionary\")\n        For i = 1 To productsArr.Count\n                Dim pdtChild As Product\n                Set pdtChild = productsArr.item(i)\n                If parentIsOk Then\n                        showChildComps.Add pdtChild\n                        returnVisable = 2\n                Else\n                        Dim currentNodeIsSearched As Boolean\n                        currentNodeIsSearched = CheckPartNumberIsInput(pdtChild, partNames)\n                        Dim ret As Integer\n                        ret = 0\n                        If CheckReferenceIsProductByDocType(pdtChild) Then\n                                ret = GetChildren(productRoot, pdtChild, partNames, showChildComps, transparencyChildComps, currentNodeIsSearched)\n                        End If\n                        If ret \u003e 1 Or currentNodeIsSearched Then\n                                searchedID.Add i, i\n                                showChildComps.Add pdtChild\n                                returnVisable = 2\n                        End If\n                End If\n        Next\n    If returnVisable \u003c\u003e 0 Then\n        For i = 1 To productsArr.Count\n            If Not searchedID.Exists(i) Then\n                transparencyChildComps.Add productsArr.item(i)\n            End If\n        Next\n    End If\n    Set productsArr = Nothing\n    GetChildren = returnVisable\nEnd Function\nFunction CheckReferenceIsProductByDocType(ByRef productNode As Product) As Boolean\n    CheckReferenceIsProductByDocType = False\n    Dim refpdt As Product\n    Set refpdt = productNode.ReferenceProduct\n    \n    If Not refpdt Is Nothing Then\n        Dim parentObj As CATBaseDispatch\n        Set parentObj = refpdt.Parent\n        If StrComp(TypeName(parentObj), \"ProductDocument\", vbTextCompare) = 0 Then\n            CheckReferenceIsProductByDocType = True\n        End If\n        Set parentObj = Nothing\n    End If\n    Set refpdt = Nothing\nEnd Function\nFunction CheckPartNumberIsInput(ByRef productNode As Product, ByRef partNames As Object) As Boolean\n    CheckPartNumberIsInput = False\n        Dim pNumStr As String\n        pNumStr = productNode.PartNumber\n    Dim itemStrReduce As String\n    Dim item As Variant\n    For Each item In partNames\n                itemStr = item\n                itemStrReduce = Left(pNumStr,Len(itemStr))\n        If itemStrReduce = itemStr Then\n            CheckPartNumberIsInput = True\n            Exit Function\n        End If\n    Next\nEnd Function\nFunction ReadExcel(ByRef showPartNumber As Object, inputSearch As Object, excelPath As String, partNumberTitle As String)\n        Dim ExcelApp\n        Set ExcelApp = CreateObject(\"Excel.Application\")\n        ExcelApp.Visible = False\n        ExcelApp.DisplayAlerts = False\n        Dim Workbook\n        Set Workbook = ExcelApp.Workbooks.Open(excelPath)\n        Dim Sheets\n        Set Sheets = Workbook.Sheets\n        Dim Sheet\n        Set Sheet = Workbook.Sheets(1)\n        Dim allRows, allCols\n        allRows = Sheet.UsedRange.Rows.Count\n        allCols = Sheet.UsedRange.Columns.Count\n        Dim row, col\n        Dim PartNumberCol\n        PartNumberCol = 0\n        For col = 1 To allCols\n                Dim CellValue\n                CellValue = Sheet.cells(1, col).value\n                If CellValue = partNumberTitle Then\n                        PartNumberCol = col\n                        Exit For\n                End If\n        Next\n        If PartNumberCol \u003c\u003e 0 Then\n                For col = 1 To allCols\n                        Dim CellTitle\n                        CellTitle = Sheet.cells(1, col).value\n                        Dim listCheck As Object\n                        Set listCheck = GetMapList(inputSearch, CellTitle)\n                        If Not listCheck Is Nothing Then\n                                For row = 2 To allRows\n                                        If Not Sheet.cells(row, col) Is Nothing Then\n                                                Dim CellValue2 As String\n                                                CellValue2 = Sheet.cells(row, col).value\n\n                                                For Each item In listCheck\n                                                        Dim ret\n                                                        If CustomLikeAddAnyToPattern(CellValue2, item, True, True) Then\n                                                                ret = True\n                                                        Else\n                                                                ret = False\n                                                        End If\n                                                        If ret Then\n                                                                Dim pNumber\n                                                                pNumber = Sheet.cells(row, PartNumberCol).value\n                                                                AddToMap showPartNumber, pNumber, pNumber\n                                                                Exit For\n                                                        End If\n                                                Next\n                                        End If\n                                Next\n                        End If\n                Next\n        Else\n                MsgBox(\"Can not find Part number in Excel!\")\n        End If\n        Set Sheet = Nothing\n        Set Sheets = Nothing\n        Workbook.Close(False)\n        Set Workbook = Nothing\n        ExcelApp.Quit\n        Set ExcelApp = Nothing\n        ReadExcel = 0\nEnd Function\nFunction CustomLikeAddAnyToPattern(expression As String, pattern As String, preAsterisk As Boolean, sufAsterisk As Boolean) As Boolean\n        Dim valReg As String\n        valReg = pattern\n        If preAsterisk Then\n                valReg = \"*\" \u0026 valReg\n        End If\n        If sufAsterisk Then\n                valReg = valReg \u0026 \"*\"\n        End If\n        CustomLikeAddAnyToPattern = CustomLike(expression, valReg)\nEnd Function\nFunction CustomLike(expression As String, pattern As String) As Boolean\n        Dim i As Long, j As Long\n        Dim exprLen As Long, patLen As Long\n        Dim exprChar As String, patChar As String\n        Dim exprPos As Long, patPos As Long\n        Dim starPos As Long, exprStarPos As Long\n        exprLen = Len(expression)\n        patLen = Len(pattern)\n        exprPos = 1\n        patPos = 1\n        starPos = 0\n        exprStarPos = 0\n        While exprPos \u003c= exprLen And patPos \u003c= patLen\n                If patPos \u003c= patLen Then\n                        patChar = Mid(pattern, patPos, 1)\n                Else\n                        patChar = \"\"\n                End If\n                If exprPos \u003c= exprLen Then\n                        exprChar = Mid(expression, exprPos, 1)\n                Else\n                        exprChar = \"\"\n                End If\n                Select Case patChar\n                        Case \"?\"\n                                If exprChar = \"\" Then\n                                        CustomLike = False\n                                        Exit Function\n                                End If\n                                exprPos = exprPos + 1\n                                patPos = patPos + 1\n                        Case \"[\"\n                                Dim charList As String, negated As Boolean\n                                negated = False\n                                patPos = patPos + 1\n                                charList = \"\"\n                                Do While patPos \u003c= patLen\n                                        patChar = Mid(pattern, patPos, 1)\n                                        If patChar = \"]\" Then\n                                                patPos = patPos + 1\n                                                Exit Do\n                                        ElseIf patChar = \"^\" And Not negated Then\n                                                negated = True\n                                        Else\n                                                charList = charList \u0026 patChar\n                                        End If\n                                        patPos = patPos + 1\n                                Loop\n                                If (negated And InStr(1, charList, exprChar, vbBinaryCompare) \u003e 0) Or (Not negated And InStr(1, charList, exprChar, vbBinaryCompare) = 0) Then\n                                        CustomLike = False\n                                        Exit Function\n                                End If\n                                exprPos = exprPos + 1\n                        Case \"*\"\n                                If patPos = patLen Then\n                                        CustomLike = True\n                                        Exit Function\n                                End If\n                                starPos = patPos\n                                exprStarPos = exprPos\n                                patPos = patPos + 1\n                        Case Else\n                                If exprChar \u003c\u003e patChar Then\n                                        If starPos = 0 Then\n                                                CustomLike = False\n                                                Exit Function\n                                        Else\n                                                patPos = starPos + 1\n                                                exprPos = exprStarPos + 1\n                                                exprStarPos = exprPos\n                                        End If\n                                Else\n                                        exprPos = exprPos + 1\n                                        patPos = patPos + 1\n                                End If\n                End Select\n        WEnd\n        If patPos = patLen Then\n                CustomLike = True\n        Else\n                CustomLike = False\n        End If\nEnd Function\nFunction AddToMapValueList(map, key, value)\n        If Not map.Exists(key) Then\n                Dim newList\n                Set newList = CreateObject(\"System.Collections.ArrayList\")\n                newList.Add(value)\n                map.Add key, newList\n        Else\n                Dim list\n                Set list = map(key)\n                list.Add(value)\n        End If\n        AddToMapValueList = 0\nEnd Function\nFunction GetMapList(map, key)\n        If map.Exists(key) Then\n                Set GetMapList = map(key)\n        Else\n                Set GetMapList = Nothing\n        End If\nEnd Function\nFunction AddToSet(ByRef collectMap As Collection, ByVal item As String) As Boolean\n        If Not Contains(collectMap, item) Then\n                collectMap.Add item, item\n        End If\n        AddToSet = True\nEnd Function\nFunction AddToMap(ByRef collectMap As Collection, keyName As String, value As String) As Boolean\n        If Not collectMap.Exists(keyName) Then\n                collectMap.Add value, keyName\n        End If\n        AddToMap = True\nEnd Function\nFunction Contains(ByRef collectMap As Collection, ByVal item As String) As Boolean\n        On Error Resume Next\n        collectMap.item(item)\n        Contains = (Err.Number = 0)\nEnd Function\nFunction RemoveFromSet(ByRef collectMap As Collection, ByVal item As String)\n        If Contains(collectMap, item) Then\n                collectMap.Remove item\n        RemoveFromSet = 0\n        Else\n                RemoveFromSet = -1\n        End If\nEnd Function"
    },
    {
        "instruction": "高亮显示/home/aaron/excel_file.xlsx中aluminium,不锈钢材质的组件。",
        "input": "",
        "output": "Language=CATSCRIPT\n\nSub CATMain()\n        Dim excelPath\n        excelPath = \"/home/aaron/excel_file.xlsx\"\n        Dim materials\n        materials = \"aluminium,不锈钢\"\n        Dim fso As Object\n        Set fso = CreateObject(\"Scripting.FileSystemObject\")\n        If fso.FileExists(excelPath) = False Then\n            excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\n            If fso.FileExists(excelPath) = False Then\n                    MsgBox \"Excel文件不存在: \" \u0026 excelPath\n                    Exit Sub\n            End If\n        End If\n        Dim partNumberTitle\n        partNumberTitle = \"Part number\"\n        Dim mapSearch\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")        \n        Dim expression\n        expression = materials\n        Dim strLen\n        strLen = Len(expression)\n        Dim splitPosition\n        splitPosition = 1\n        Dim exprChar\n        For i = 1 To strLen\n            exprChar = Mid(expression, i, 1)\n            If Mid(expression, i, 1) = \",\" Then\n                Dim mess\n                mess = Mid(expression, splitPosition, i - splitPosition)\n                splitPosition = i + 1\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\n            End If\n        Next\n        If splitPosition \u003c strLen Then\n            Dim mess2\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\n        End If\n    \n\n        Dim showPartNumber\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\n        Dim showChildComps As Object\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim transparencyChildComps As Object\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim ret As Integer\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\nEnd Sub\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\n        Dim rootDoc As ProductDocument\n        Set rootDoc = CATIA.ActiveDocument\n        If rootDoc Is Nothing Then\n            CATIALoopChildren = -2\n            Exit Function\n        End If\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\n            CATIALoopChildren = -3\n            Exit Function\n        End If\n        Dim rootProduct As Product\n        Set rootProduct = rootDoc.Product\n        Dim productChildren As Products\n        Set productChildren = rootProduct.Products\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\n        CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\n                \nEnd Function\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\n        Dim parentDoc As Document\n        Set parentDoc = productRoot.Parent\n        If parentDoc Is Nothing Then\n                ChangeCompState = -3\n                Exit Function\n        End If\n        Dim selectionNode As Selection\n        Set selectionNode = parentDoc.Selection\n        If selectionNode Is Nothing Then\n                ChangeCompState = -4\n                Exit Function\n        End If\n        Dim visProp As visPropertySet\n        Set visProp = selectionNode.VisProperties\n        If visProp Is Nothing Then\n                ChangeCompState = -5\n                Exit Function\n        End If\n        Dim productNode As Variant\n        For Each productNode In productNodes\n                selectionNode.Add productNode\n        Next\n        Set visProp = visProp.Parent\n        If visProp Is Nothing Then\n                ChangeCompState = -6\n                Exit Function\n        End If\n    If isShow \u003c 0 Then\n        Dim showState As CatVisPropertyShow\n        visProp.GetShow showState\n        If showState \u003c\u003e isShow Then\n            visProp.SetShow isShow\n        End If\n    End If\n        If isTransparency \u003c 0 Then\n        visProp.SetVisibleOpacity 100, 0\n    Else\n        visProp.SetVisibleOpacity isTransparency, 1\n    End If\n        selectionNode.Clear\n        ChangeCompState = 0\nEnd Function\nFunction GetChildren(ByRef productRoot As Product, ByRef productNode As Product, ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object, ByVal parentIsOk As Boolean) As Integer\n    Dim productsArr As Products\n        Set productsArr = productNode.Products\n        If productsArr Is Nothing Then\n                GetChildren = -2\n                Exit Function\n        End If\n        Dim returnVisable As Integer\n        returnVisable = 0\n        Dim searchedID\n        Set searchedID = CreateObject(\"Scripting.Dictionary\")\n        For i = 1 To productsArr.Count\n                Dim pdtChild As Product\n                Set pdtChild = productsArr.item(i)\n                If parentIsOk Then\n                        showChildComps.Add pdtChild\n                        returnVisable = 2\n                Else\n                        Dim currentNodeIsSearched As Boolean\n                        currentNodeIsSearched = CheckPartNumberIsInput(pdtChild, partNames)\n                        Dim ret As Integer\n                        ret = 0\n                        If CheckReferenceIsProductByDocType(pdtChild) Then\n                                ret = GetChildren(productRoot, pdtChild, partNames, showChildComps, transparencyChildComps, currentNodeIsSearched)\n                        End If\n                        If ret \u003e 1 Or currentNodeIsSearched Then\n                                searchedID.Add i, i\n                                showChildComps.Add pdtChild\n                                returnVisable = 2\n                        End If\n                End If\n        Next\n    If returnVisable \u003c\u003e 0 Then\n        For i = 1 To productsArr.Count\n            If Not searchedID.Exists(i) Then\n                transparencyChildComps.Add productsArr.item(i)\n            End If\n        Next\n    End If\n    Set productsArr = Nothing\n    GetChildren = returnVisable\nEnd Function\nFunction CheckReferenceIsProductByDocType(ByRef productNode As Product) As Boolean\n    CheckReferenceIsProductByDocType = False\n    Dim refpdt As Product\n    Set refpdt = productNode.ReferenceProduct\n    \n    If Not refpdt Is Nothing Then\n        Dim parentObj As CATBaseDispatch\n        Set parentObj = refpdt.Parent\n        If StrComp(TypeName(parentObj), \"ProductDocument\", vbTextCompare) = 0 Then\n            CheckReferenceIsProductByDocType = True\n        End If\n        Set parentObj = Nothing\n    End If\n    Set refpdt = Nothing\nEnd Function\nFunction CheckPartNumberIsInput(ByRef productNode As Product, ByRef partNames As Object) As Boolean\n    CheckPartNumberIsInput = False\n        Dim pNumStr As String\n        pNumStr = productNode.PartNumber\n    Dim itemStrReduce As String\n    Dim item As Variant\n    For Each item In partNames\n                itemStr = item\n                itemStrReduce = Left(pNumStr,Len(itemStr))\n        If itemStrReduce = itemStr Then\n            CheckPartNumberIsInput = True\n            Exit Function\n        End If\n    Next\nEnd Function\nFunction ReadExcel(ByRef showPartNumber As Object, inputSearch As Object, excelPath As String, partNumberTitle As String)\n        Dim ExcelApp\n        Set ExcelApp = CreateObject(\"Excel.Application\")\n        ExcelApp.Visible = False\n        ExcelApp.DisplayAlerts = False\n        Dim Workbook\n        Set Workbook = ExcelApp.Workbooks.Open(excelPath)\n        Dim Sheets\n        Set Sheets = Workbook.Sheets\n        Dim Sheet\n        Set Sheet = Workbook.Sheets(1)\n        Dim allRows, allCols\n        allRows = Sheet.UsedRange.Rows.Count\n        allCols = Sheet.UsedRange.Columns.Count\n        Dim row, col\n        Dim PartNumberCol\n        PartNumberCol = 0\n        For col = 1 To allCols\n                Dim CellValue\n                CellValue = Sheet.cells(1, col).value\n                If CellValue = partNumberTitle Then\n                        PartNumberCol = col\n                        Exit For\n                End If\n        Next\n        If PartNumberCol \u003c\u003e 0 Then\n                For col = 1 To allCols\n                        Dim CellTitle\n                        CellTitle = Sheet.cells(1, col).value\n                        Dim listCheck As Object\n                        Set listCheck = GetMapList(inputSearch, CellTitle)\n                        If Not listCheck Is Nothing Then\n                                For row = 2 To allRows\n                                        If Not Sheet.cells(row, col) Is Nothing Then\n                                                Dim CellValue2 As String\n                                                CellValue2 = Sheet.cells(row, col).value\n\n                                                For Each item In listCheck\n                                                        Dim ret\n                                                        If CustomLikeAddAnyToPattern(CellValue2, item, True, True) Then\n                                                                ret = True\n                                                        Else\n                                                                ret = False\n                                                        End If\n                                                        If ret Then\n                                                                Dim pNumber\n                                                                pNumber = Sheet.cells(row, PartNumberCol).value\n                                                                AddToMap showPartNumber, pNumber, pNumber\n                                                                Exit For\n                                                        End If\n                                                Next\n                                        End If\n                                Next\n                        End If\n                Next\n        Else\n                MsgBox(\"Can not find Part number in Excel!\")\n        End If\n        Set Sheet = Nothing\n        Set Sheets = Nothing\n        Workbook.Close(False)\n        Set Workbook = Nothing\n        ExcelApp.Quit\n        Set ExcelApp = Nothing\n        ReadExcel = 0\nEnd Function\nFunction CustomLikeAddAnyToPattern(expression As String, pattern As String, preAsterisk As Boolean, sufAsterisk As Boolean) As Boolean\n        Dim valReg As String\n        valReg = pattern\n        If preAsterisk Then\n                valReg = \"*\" \u0026 valReg\n        End If\n        If sufAsterisk Then\n                valReg = valReg \u0026 \"*\"\n        End If\n        CustomLikeAddAnyToPattern = CustomLike(expression, valReg)\nEnd Function\nFunction CustomLike(expression As String, pattern As String) As Boolean\n        Dim i As Long, j As Long\n        Dim exprLen As Long, patLen As Long\n        Dim exprChar As String, patChar As String\n        Dim exprPos As Long, patPos As Long\n        Dim starPos As Long, exprStarPos As Long\n        exprLen = Len(expression)\n        patLen = Len(pattern)\n        exprPos = 1\n        patPos = 1\n        starPos = 0\n        exprStarPos = 0\n        While exprPos \u003c= exprLen And patPos \u003c= patLen\n                If patPos \u003c= patLen Then\n                        patChar = Mid(pattern, patPos, 1)\n                Else\n                        patChar = \"\"\n                End If\n                If exprPos \u003c= exprLen Then\n                        exprChar = Mid(expression, exprPos, 1)\n                Else\n                        exprChar = \"\"\n                End If\n                Select Case patChar\n                        Case \"?\"\n                                If exprChar = \"\" Then\n                                        CustomLike = False\n                                        Exit Function\n                                End If\n                                exprPos = exprPos + 1\n                                patPos = patPos + 1\n                        Case \"[\"\n                                Dim charList As String, negated As Boolean\n                                negated = False\n                                patPos = patPos + 1\n                                charList = \"\"\n                                Do While patPos \u003c= patLen\n                                        patChar = Mid(pattern, patPos, 1)\n                                        If patChar = \"]\" Then\n                                                patPos = patPos + 1\n                                                Exit Do\n                                        ElseIf patChar = \"^\" And Not negated Then\n                                                negated = True\n                                        Else\n                                                charList = charList \u0026 patChar\n                                        End If\n                                        patPos = patPos + 1\n                                Loop\n                                If (negated And InStr(1, charList, exprChar, vbBinaryCompare) \u003e 0) Or (Not negated And InStr(1, charList, exprChar, vbBinaryCompare) = 0) Then\n                                        CustomLike = False\n                                        Exit Function\n                                End If\n                                exprPos = exprPos + 1\n                        Case \"*\"\n                                If patPos = patLen Then\n                                        CustomLike = True\n                                        Exit Function\n                                End If\n                                starPos = patPos\n                                exprStarPos = exprPos\n                                patPos = patPos + 1\n                        Case Else\n                                If exprChar \u003c\u003e patChar Then\n                                        If starPos = 0 Then\n                                                CustomLike = False\n                                                Exit Function\n                                        Else\n                                                patPos = starPos + 1\n                                                exprPos = exprStarPos + 1\n                                                exprStarPos = exprPos\n                                        End If\n                                Else\n                                        exprPos = exprPos + 1\n                                        patPos = patPos + 1\n                                End If\n                End Select\n        WEnd\n        If patPos = patLen Then\n                CustomLike = True\n        Else\n                CustomLike = False\n        End If\nEnd Function\nFunction AddToMapValueList(map, key, value)\n        If Not map.Exists(key) Then\n                Dim newList\n                Set newList = CreateObject(\"System.Collections.ArrayList\")\n                newList.Add(value)\n                map.Add key, newList\n        Else\n                Dim list\n                Set list = map(key)\n                list.Add(value)\n        End If\n        AddToMapValueList = 0\nEnd Function\nFunction GetMapList(map, key)\n        If map.Exists(key) Then\n                Set GetMapList = map(key)\n        Else\n                Set GetMapList = Nothing\n        End If\nEnd Function\nFunction AddToSet(ByRef collectMap As Collection, ByVal item As String) As Boolean\n        If Not Contains(collectMap, item) Then\n                collectMap.Add item, item\n        End If\n        AddToSet = True\nEnd Function\nFunction AddToMap(ByRef collectMap As Collection, keyName As String, value As String) As Boolean\n        If Not collectMap.Exists(keyName) Then\n                collectMap.Add value, keyName\n        End If\n        AddToMap = True\nEnd Function\nFunction Contains(ByRef collectMap As Collection, ByVal item As String) As Boolean\n        On Error Resume Next\n        collectMap.item(item)\n        Contains = (Err.Number = 0)\nEnd Function\nFunction RemoveFromSet(ByRef collectMap As Collection, ByVal item As String)\n        If Contains(collectMap, item) Then\n                collectMap.Remove item\n        RemoveFromSet = 0\n        Else\n                RemoveFromSet = -1\n        End If\nEnd Function"
    },
    {
        "instruction": "高亮显示aluminium,不锈钢材质的组件, part number表格路径~/excel.xlsx。",
        "input": "",
        "output": "Language=CATSCRIPT\n\nSub CATMain()\n        Dim excelPath\n        excelPath = \"~/excel.xlsx\"\n        Dim materials\n        materials = \"aluminium,不锈钢\"\n        Dim fso As Object\n        Set fso = CreateObject(\"Scripting.FileSystemObject\")\n        If fso.FileExists(excelPath) = False Then\n            excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\n            If fso.FileExists(excelPath) = False Then\n                    MsgBox \"Excel文件不存在: \" \u0026 excelPath\n                    Exit Sub\n            End If\n        End If\n        Dim partNumberTitle\n        partNumberTitle = \"Part number\"\n        Dim mapSearch\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")        \n        Dim expression\n        expression = materials\n        Dim strLen\n        strLen = Len(expression)\n        Dim splitPosition\n        splitPosition = 1\n        Dim exprChar\n        For i = 1 To strLen\n            exprChar = Mid(expression, i, 1)\n            If Mid(expression, i, 1) = \",\" Then\n                Dim mess\n                mess = Mid(expression, splitPosition, i - splitPosition)\n                splitPosition = i + 1\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\n            End If\n        Next\n        If splitPosition \u003c strLen Then\n            Dim mess2\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\n        End If\n    \n\n        Dim showPartNumber\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\n        Dim showChildComps As Object\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim transparencyChildComps As Object\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim ret As Integer\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\nEnd Sub\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\n        Dim rootDoc As ProductDocument\n        Set rootDoc = CATIA.ActiveDocument\n        If rootDoc Is Nothing Then\n            CATIALoopChildren = -2\n            Exit Function\n        End If\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\n            CATIALoopChildren = -3\n            Exit Function\n        End If\n        Dim rootProduct As Product\n        Set rootProduct = rootDoc.Product\n        Dim productChildren As Products\n        Set productChildren = rootProduct.Products\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\n        CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\n                \nEnd Function\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\n        Dim parentDoc As Document\n        Set parentDoc = productRoot.Parent\n        If parentDoc Is Nothing Then\n                ChangeCompState = -3\n                Exit Function\n        End If\n        Dim selectionNode As Selection\n        Set selectionNode = parentDoc.Selection\n        If selectionNode Is Nothing Then\n                ChangeCompState = -4\n                Exit Function\n        End If\n        Dim visProp As visPropertySet\n        Set visProp = selectionNode.VisProperties\n        If visProp Is Nothing Then\n                ChangeCompState = -5\n                Exit Function\n        End If\n        Dim productNode As Variant\n        For Each productNode In productNodes\n                selectionNode.Add productNode\n        Next\n        Set visProp = visProp.Parent\n        If visProp Is Nothing Then\n                ChangeCompState = -6\n                Exit Function\n        End If\n    If isShow \u003c 0 Then\n        Dim showState As CatVisPropertyShow\n        visProp.GetShow showState\n        If showState \u003c\u003e isShow Then\n            visProp.SetShow isShow\n        End If\n    End If\n        If isTransparency \u003c 0 Then\n        visProp.SetVisibleOpacity 100, 0\n    Else\n        visProp.SetVisibleOpacity isTransparency, 1\n    End If\n        selectionNode.Clear\n        ChangeCompState = 0\nEnd Function\nFunction GetChildren(ByRef productRoot As Product, ByRef productNode As Product, ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object, ByVal parentIsOk As Boolean) As Integer\n    Dim productsArr As Products\n        Set productsArr = productNode.Products\n        If productsArr Is Nothing Then\n                GetChildren = -2\n                Exit Function\n        End If\n        Dim returnVisable As Integer\n        returnVisable = 0\n        Dim searchedID\n        Set searchedID = CreateObject(\"Scripting.Dictionary\")\n        For i = 1 To productsArr.Count\n                Dim pdtChild As Product\n                Set pdtChild = productsArr.item(i)\n                If parentIsOk Then\n                        showChildComps.Add pdtChild\n                        returnVisable = 2\n                Else\n                        Dim currentNodeIsSearched As Boolean\n                        currentNodeIsSearched = CheckPartNumberIsInput(pdtChild, partNames)\n                        Dim ret As Integer\n                        ret = 0\n                        If CheckReferenceIsProductByDocType(pdtChild) Then\n                                ret = GetChildren(productRoot, pdtChild, partNames, showChildComps, transparencyChildComps, currentNodeIsSearched)\n                        End If\n                        If ret \u003e 1 Or currentNodeIsSearched Then\n                                searchedID.Add i, i\n                                showChildComps.Add pdtChild\n                                returnVisable = 2\n                        End If\n                End If\n        Next\n    If returnVisable \u003c\u003e 0 Then\n        For i = 1 To productsArr.Count\n            If Not searchedID.Exists(i) Then\n                transparencyChildComps.Add productsArr.item(i)\n            End If\n        Next\n    End If\n    Set productsArr = Nothing\n    GetChildren = returnVisable\nEnd Function\nFunction CheckReferenceIsProductByDocType(ByRef productNode As Product) As Boolean\n    CheckReferenceIsProductByDocType = False\n    Dim refpdt As Product\n    Set refpdt = productNode.ReferenceProduct\n    \n    If Not refpdt Is Nothing Then\n        Dim parentObj As CATBaseDispatch\n        Set parentObj = refpdt.Parent\n        If StrComp(TypeName(parentObj), \"ProductDocument\", vbTextCompare) = 0 Then\n            CheckReferenceIsProductByDocType = True\n        End If\n        Set parentObj = Nothing\n    End If\n    Set refpdt = Nothing\nEnd Function\nFunction CheckPartNumberIsInput(ByRef productNode As Product, ByRef partNames As Object) As Boolean\n    CheckPartNumberIsInput = False\n        Dim pNumStr As String\n        pNumStr = productNode.PartNumber\n    Dim itemStrReduce As String\n    Dim item As Variant\n    For Each item In partNames\n                itemStr = item\n                itemStrReduce = Left(pNumStr,Len(itemStr))\n        If itemStrReduce = itemStr Then\n            CheckPartNumberIsInput = True\n            Exit Function\n        End If\n    Next\nEnd Function\nFunction ReadExcel(ByRef showPartNumber As Object, inputSearch As Object, excelPath As String, partNumberTitle As String)\n        Dim ExcelApp\n        Set ExcelApp = CreateObject(\"Excel.Application\")\n        ExcelApp.Visible = False\n        ExcelApp.DisplayAlerts = False\n        Dim Workbook\n        Set Workbook = ExcelApp.Workbooks.Open(excelPath)\n        Dim Sheets\n        Set Sheets = Workbook.Sheets\n        Dim Sheet\n        Set Sheet = Workbook.Sheets(1)\n        Dim allRows, allCols\n        allRows = Sheet.UsedRange.Rows.Count\n        allCols = Sheet.UsedRange.Columns.Count\n        Dim row, col\n        Dim PartNumberCol\n        PartNumberCol = 0\n        For col = 1 To allCols\n                Dim CellValue\n                CellValue = Sheet.cells(1, col).value\n                If CellValue = partNumberTitle Then\n                        PartNumberCol = col\n                        Exit For\n                End If\n        Next\n        If PartNumberCol \u003c\u003e 0 Then\n                For col = 1 To allCols\n                        Dim CellTitle\n                        CellTitle = Sheet.cells(1, col).value\n                        Dim listCheck As Object\n                        Set listCheck = GetMapList(inputSearch, CellTitle)\n                        If Not listCheck Is Nothing Then\n                                For row = 2 To allRows\n                                        If Not Sheet.cells(row, col) Is Nothing Then\n                                                Dim CellValue2 As String\n                                                CellValue2 = Sheet.cells(row, col).value\n\n                                                For Each item In listCheck\n                                                        Dim ret\n                                                        If CustomLikeAddAnyToPattern(CellValue2, item, True, True) Then\n                                                                ret = True\n                                                        Else\n                                                                ret = False\n                                                        End If\n                                                        If ret Then\n                                                                Dim pNumber\n                                                                pNumber = Sheet.cells(row, PartNumberCol).value\n                                                                AddToMap showPartNumber, pNumber, pNumber\n                                                                Exit For\n                                                        End If\n                                                Next\n                                        End If\n                                Next\n                        End If\n                Next\n        Else\n                MsgBox(\"Can not find Part number in Excel!\")\n        End If\n        Set Sheet = Nothing\n        Set Sheets = Nothing\n        Workbook.Close(False)\n        Set Workbook = Nothing\n        ExcelApp.Quit\n        Set ExcelApp = Nothing\n        ReadExcel = 0\nEnd Function\nFunction CustomLikeAddAnyToPattern(expression As String, pattern As String, preAsterisk As Boolean, sufAsterisk As Boolean) As Boolean\n        Dim valReg As String\n        valReg = pattern\n        If preAsterisk Then\n                valReg = \"*\" \u0026 valReg\n        End If\n        If sufAsterisk Then\n                valReg = valReg \u0026 \"*\"\n        End If\n        CustomLikeAddAnyToPattern = CustomLike(expression, valReg)\nEnd Function\nFunction CustomLike(expression As String, pattern As String) As Boolean\n        Dim i As Long, j As Long\n        Dim exprLen As Long, patLen As Long\n        Dim exprChar As String, patChar As String\n        Dim exprPos As Long, patPos As Long\n        Dim starPos As Long, exprStarPos As Long\n        exprLen = Len(expression)\n        patLen = Len(pattern)\n        exprPos = 1\n        patPos = 1\n        starPos = 0\n        exprStarPos = 0\n        While exprPos \u003c= exprLen And patPos \u003c= patLen\n                If patPos \u003c= patLen Then\n                        patChar = Mid(pattern, patPos, 1)\n                Else\n                        patChar = \"\"\n                End If\n                If exprPos \u003c= exprLen Then\n                        exprChar = Mid(expression, exprPos, 1)\n                Else\n                        exprChar = \"\"\n                End If\n                Select Case patChar\n                        Case \"?\"\n                                If exprChar = \"\" Then\n                                        CustomLike = False\n                                        Exit Function\n                                End If\n                                exprPos = exprPos + 1\n                                patPos = patPos + 1\n                        Case \"[\"\n                                Dim charList As String, negated As Boolean\n                                negated = False\n                                patPos = patPos + 1\n                                charList = \"\"\n                                Do While patPos \u003c= patLen\n                                        patChar = Mid(pattern, patPos, 1)\n                                        If patChar = \"]\" Then\n                                                patPos = patPos + 1\n                                                Exit Do\n                                        ElseIf patChar = \"^\" And Not negated Then\n                                                negated = True\n                                        Else\n                                                charList = charList \u0026 patChar\n                                        End If\n                                        patPos = patPos + 1\n                                Loop\n                                If (negated And InStr(1, charList, exprChar, vbBinaryCompare) \u003e 0) Or (Not negated And InStr(1, charList, exprChar, vbBinaryCompare) = 0) Then\n                                        CustomLike = False\n                                        Exit Function\n                                End If\n                                exprPos = exprPos + 1\n                        Case \"*\"\n                                If patPos = patLen Then\n                                        CustomLike = True\n                                        Exit Function\n                                End If\n                                starPos = patPos\n                                exprStarPos = exprPos\n                                patPos = patPos + 1\n                        Case Else\n                                If exprChar \u003c\u003e patChar Then\n                                        If starPos = 0 Then\n                                                CustomLike = False\n                                                Exit Function\n                                        Else\n                                                patPos = starPos + 1\n                                                exprPos = exprStarPos + 1\n                                                exprStarPos = exprPos\n                                        End If\n                                Else\n                                        exprPos = exprPos + 1\n                                        patPos = patPos + 1\n                                End If\n                End Select\n        WEnd\n        If patPos = patLen Then\n                CustomLike = True\n        Else\n                CustomLike = False\n        End If\nEnd Function\nFunction AddToMapValueList(map, key, value)\n        If Not map.Exists(key) Then\n                Dim newList\n                Set newList = CreateObject(\"System.Collections.ArrayList\")\n                newList.Add(value)\n                map.Add key, newList\n        Else\n                Dim list\n                Set list = map(key)\n                list.Add(value)\n        End If\n        AddToMapValueList = 0\nEnd Function\nFunction GetMapList(map, key)\n        If map.Exists(key) Then\n                Set GetMapList = map(key)\n        Else\n                Set GetMapList = Nothing\n        End If\nEnd Function\nFunction AddToSet(ByRef collectMap As Collection, ByVal item As String) As Boolean\n        If Not Contains(collectMap, item) Then\n                collectMap.Add item, item\n        End If\n        AddToSet = True\nEnd Function\nFunction AddToMap(ByRef collectMap As Collection, keyName As String, value As String) As Boolean\n        If Not collectMap.Exists(keyName) Then\n                collectMap.Add value, keyName\n        End If\n        AddToMap = True\nEnd Function\nFunction Contains(ByRef collectMap As Collection, ByVal item As String) As Boolean\n        On Error Resume Next\n        collectMap.item(item)\n        Contains = (Err.Number = 0)\nEnd Function\nFunction RemoveFromSet(ByRef collectMap As Collection, ByVal item As String)\n        If Contains(collectMap, item) Then\n                collectMap.Remove item\n        RemoveFromSet = 0\n        Else\n                RemoveFromSet = -1\n        End If\nEnd Function"
    },
    {
        "instruction": "高亮显示~/excel.xlsx中[CR270LA]材质的组件。",
        "input": "",
        "output": "Language=CATSCRIPT\n\nSub CATMain()\n        Dim excelPath\n        excelPath = \"~/excel.xlsx\"\n        Dim materials\n        materials = \"[CR270LA]\"\n        Dim fso As Object\n        Set fso = CreateObject(\"Scripting.FileSystemObject\")\n        If fso.FileExists(excelPath) = False Then\n            excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\n            If fso.FileExists(excelPath) = False Then\n                    MsgBox \"Excel文件不存在: \" \u0026 excelPath\n                    Exit Sub\n            End If\n        End If\n        Dim partNumberTitle\n        partNumberTitle = \"Part number\"\n        Dim mapSearch\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")        \n        Dim expression\n        expression = materials\n        Dim strLen\n        strLen = Len(expression)\n        Dim splitPosition\n        splitPosition = 1\n        Dim exprChar\n        For i = 1 To strLen\n            exprChar = Mid(expression, i, 1)\n            If Mid(expression, i, 1) = \",\" Then\n                Dim mess\n                mess = Mid(expression, splitPosition, i - splitPosition)\n                splitPosition = i + 1\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\n            End If\n        Next\n        If splitPosition \u003c strLen Then\n            Dim mess2\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\n        End If\n    \n\n        Dim showPartNumber\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\n        Dim showChildComps As Object\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim transparencyChildComps As Object\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim ret As Integer\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\nEnd Sub\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\n        Dim rootDoc As ProductDocument\n        Set rootDoc = CATIA.ActiveDocument\n        If rootDoc Is Nothing Then\n            CATIALoopChildren = -2\n            Exit Function\n        End If\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\n            CATIALoopChildren = -3\n            Exit Function\n        End If\n        Dim rootProduct As Product\n        Set rootProduct = rootDoc.Product\n        Dim productChildren As Products\n        Set productChildren = rootProduct.Products\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\n        CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\n                \nEnd Function\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\n        Dim parentDoc As Document\n        Set parentDoc = productRoot.Parent\n        If parentDoc Is Nothing Then\n                ChangeCompState = -3\n                Exit Function\n        End If\n        Dim selectionNode As Selection\n        Set selectionNode = parentDoc.Selection\n        If selectionNode Is Nothing Then\n                ChangeCompState = -4\n                Exit Function\n        End If\n        Dim visProp As visPropertySet\n        Set visProp = selectionNode.VisProperties\n        If visProp Is Nothing Then\n                ChangeCompState = -5\n                Exit Function\n        End If\n        Dim productNode As Variant\n        For Each productNode In productNodes\n                selectionNode.Add productNode\n        Next\n        Set visProp = visProp.Parent\n        If visProp Is Nothing Then\n                ChangeCompState = -6\n                Exit Function\n        End If\n    If isShow \u003c 0 Then\n        Dim showState As CatVisPropertyShow\n        visProp.GetShow showState\n        If showState \u003c\u003e isShow Then\n            visProp.SetShow isShow\n        End If\n    End If\n        If isTransparency \u003c 0 Then\n        visProp.SetVisibleOpacity 100, 0\n    Else\n        visProp.SetVisibleOpacity isTransparency, 1\n    End If\n        selectionNode.Clear\n        ChangeCompState = 0\nEnd Function\nFunction GetChildren(ByRef productRoot As Product, ByRef productNode As Product, ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object, ByVal parentIsOk As Boolean) As Integer\n    Dim productsArr As Products\n        Set productsArr = productNode.Products\n        If productsArr Is Nothing Then\n                GetChildren = -2\n                Exit Function\n        End If\n        Dim returnVisable As Integer\n        returnVisable = 0\n        Dim searchedID\n        Set searchedID = CreateObject(\"Scripting.Dictionary\")\n        For i = 1 To productsArr.Count\n                Dim pdtChild As Product\n                Set pdtChild = productsArr.item(i)\n                If parentIsOk Then\n                        showChildComps.Add pdtChild\n                        returnVisable = 2\n                Else\n                        Dim currentNodeIsSearched As Boolean\n                        currentNodeIsSearched = CheckPartNumberIsInput(pdtChild, partNames)\n                        Dim ret As Integer\n                        ret = 0\n                        If CheckReferenceIsProductByDocType(pdtChild) Then\n                                ret = GetChildren(productRoot, pdtChild, partNames, showChildComps, transparencyChildComps, currentNodeIsSearched)\n                        End If\n                        If ret \u003e 1 Or currentNodeIsSearched Then\n                                searchedID.Add i, i\n                                showChildComps.Add pdtChild\n                                returnVisable = 2\n                        End If\n                End If\n        Next\n    If returnVisable \u003c\u003e 0 Then\n        For i = 1 To productsArr.Count\n            If Not searchedID.Exists(i) Then\n                transparencyChildComps.Add productsArr.item(i)\n            End If\n        Next\n    End If\n    Set productsArr = Nothing\n    GetChildren = returnVisable\nEnd Function\nFunction CheckReferenceIsProductByDocType(ByRef productNode As Product) As Boolean\n    CheckReferenceIsProductByDocType = False\n    Dim refpdt As Product\n    Set refpdt = productNode.ReferenceProduct\n    \n    If Not refpdt Is Nothing Then\n        Dim parentObj As CATBaseDispatch\n        Set parentObj = refpdt.Parent\n        If StrComp(TypeName(parentObj), \"ProductDocument\", vbTextCompare) = 0 Then\n            CheckReferenceIsProductByDocType = True\n        End If\n        Set parentObj = Nothing\n    End If\n    Set refpdt = Nothing\nEnd Function\nFunction CheckPartNumberIsInput(ByRef productNode As Product, ByRef partNames As Object) As Boolean\n    CheckPartNumberIsInput = False\n        Dim pNumStr As String\n        pNumStr = productNode.PartNumber\n    Dim itemStrReduce As String\n    Dim item As Variant\n    For Each item In partNames\n                itemStr = item\n                itemStrReduce = Left(pNumStr,Len(itemStr))\n        If itemStrReduce = itemStr Then\n            CheckPartNumberIsInput = True\n            Exit Function\n        End If\n    Next\nEnd Function\nFunction ReadExcel(ByRef showPartNumber As Object, inputSearch As Object, excelPath As String, partNumberTitle As String)\n        Dim ExcelApp\n        Set ExcelApp = CreateObject(\"Excel.Application\")\n        ExcelApp.Visible = False\n        ExcelApp.DisplayAlerts = False\n        Dim Workbook\n        Set Workbook = ExcelApp.Workbooks.Open(excelPath)\n        Dim Sheets\n        Set Sheets = Workbook.Sheets\n        Dim Sheet\n        Set Sheet = Workbook.Sheets(1)\n        Dim allRows, allCols\n        allRows = Sheet.UsedRange.Rows.Count\n        allCols = Sheet.UsedRange.Columns.Count\n        Dim row, col\n        Dim PartNumberCol\n        PartNumberCol = 0\n        For col = 1 To allCols\n                Dim CellValue\n                CellValue = Sheet.cells(1, col).value\n                If CellValue = partNumberTitle Then\n                        PartNumberCol = col\n                        Exit For\n                End If\n        Next\n        If PartNumberCol \u003c\u003e 0 Then\n                For col = 1 To allCols\n                        Dim CellTitle\n                        CellTitle = Sheet.cells(1, col).value\n                        Dim listCheck As Object\n                        Set listCheck = GetMapList(inputSearch, CellTitle)\n                        If Not listCheck Is Nothing Then\n                                For row = 2 To allRows\n                                        If Not Sheet.cells(row, col) Is Nothing Then\n                                                Dim CellValue2 As String\n                                                CellValue2 = Sheet.cells(row, col).value\n\n                                                For Each item In listCheck\n                                                        Dim ret\n                                                        If CustomLikeAddAnyToPattern(CellValue2, item, True, True) Then\n                                                                ret = True\n                                                        Else\n                                                                ret = False\n                                                        End If\n                                                        If ret Then\n                                                                Dim pNumber\n                                                                pNumber = Sheet.cells(row, PartNumberCol).value\n                                                                AddToMap showPartNumber, pNumber, pNumber\n                                                                Exit For\n                                                        End If\n                                                Next\n                                        End If\n                                Next\n                        End If\n                Next\n        Else\n                MsgBox(\"Can not find Part number in Excel!\")\n        End If\n        Set Sheet = Nothing\n        Set Sheets = Nothing\n        Workbook.Close(False)\n        Set Workbook = Nothing\n        ExcelApp.Quit\n        Set ExcelApp = Nothing\n        ReadExcel = 0\nEnd Function\nFunction CustomLikeAddAnyToPattern(expression As String, pattern As String, preAsterisk As Boolean, sufAsterisk As Boolean) As Boolean\n        Dim valReg As String\n        valReg = pattern\n        If preAsterisk Then\n                valReg = \"*\" \u0026 valReg\n        End If\n        If sufAsterisk Then\n                valReg = valReg \u0026 \"*\"\n        End If\n        CustomLikeAddAnyToPattern = CustomLike(expression, valReg)\nEnd Function\nFunction CustomLike(expression As String, pattern As String) As Boolean\n        Dim i As Long, j As Long\n        Dim exprLen As Long, patLen As Long\n        Dim exprChar As String, patChar As String\n        Dim exprPos As Long, patPos As Long\n        Dim starPos As Long, exprStarPos As Long\n        exprLen = Len(expression)\n        patLen = Len(pattern)\n        exprPos = 1\n        patPos = 1\n        starPos = 0\n        exprStarPos = 0\n        While exprPos \u003c= exprLen And patPos \u003c= patLen\n                If patPos \u003c= patLen Then\n                        patChar = Mid(pattern, patPos, 1)\n                Else\n                        patChar = \"\"\n                End If\n                If exprPos \u003c= exprLen Then\n                        exprChar = Mid(expression, exprPos, 1)\n                Else\n                        exprChar = \"\"\n                End If\n                Select Case patChar\n                        Case \"?\"\n                                If exprChar = \"\" Then\n                                        CustomLike = False\n                                        Exit Function\n                                End If\n                                exprPos = exprPos + 1\n                                patPos = patPos + 1\n                        Case \"[\"\n                                Dim charList As String, negated As Boolean\n                                negated = False\n                                patPos = patPos + 1\n                                charList = \"\"\n                                Do While patPos \u003c= patLen\n                                        patChar = Mid(pattern, patPos, 1)\n                                        If patChar = \"]\" Then\n                                                patPos = patPos + 1\n                                                Exit Do\n                                        ElseIf patChar = \"^\" And Not negated Then\n                                                negated = True\n                                        Else\n                                                charList = charList \u0026 patChar\n                                        End If\n                                        patPos = patPos + 1\n                                Loop\n                                If (negated And InStr(1, charList, exprChar, vbBinaryCompare) \u003e 0) Or (Not negated And InStr(1, charList, exprChar, vbBinaryCompare) = 0) Then\n                                        CustomLike = False\n                                        Exit Function\n                                End If\n                                exprPos = exprPos + 1\n                        Case \"*\"\n                                If patPos = patLen Then\n                                        CustomLike = True\n                                        Exit Function\n                                End If\n                                starPos = patPos\n                                exprStarPos = exprPos\n                                patPos = patPos + 1\n                        Case Else\n                                If exprChar \u003c\u003e patChar Then\n                                        If starPos = 0 Then\n                                                CustomLike = False\n                                                Exit Function\n                                        Else\n                                                patPos = starPos + 1\n                                                exprPos = exprStarPos + 1\n                                                exprStarPos = exprPos\n                                        End If\n                                Else\n                                        exprPos = exprPos + 1\n                                        patPos = patPos + 1\n                                End If\n                End Select\n        WEnd\n        If patPos = patLen Then\n                CustomLike = True\n        Else\n                CustomLike = False\n        End If\nEnd Function\nFunction AddToMapValueList(map, key, value)\n        If Not map.Exists(key) Then\n                Dim newList\n                Set newList = CreateObject(\"System.Collections.ArrayList\")\n                newList.Add(value)\n                map.Add key, newList\n        Else\n                Dim list\n                Set list = map(key)\n                list.Add(value)\n        End If\n        AddToMapValueList = 0\nEnd Function\nFunction GetMapList(map, key)\n        If map.Exists(key) Then\n                Set GetMapList = map(key)\n        Else\n                Set GetMapList = Nothing\n        End If\nEnd Function\nFunction AddToSet(ByRef collectMap As Collection, ByVal item As String) As Boolean\n        If Not Contains(collectMap, item) Then\n                collectMap.Add item, item\n        End If\n        AddToSet = True\nEnd Function\nFunction AddToMap(ByRef collectMap As Collection, keyName As String, value As String) As Boolean\n        If Not collectMap.Exists(keyName) Then\n                collectMap.Add value, keyName\n        End If\n        AddToMap = True\nEnd Function\nFunction Contains(ByRef collectMap As Collection, ByVal item As String) As Boolean\n        On Error Resume Next\n        collectMap.item(item)\n        Contains = (Err.Number = 0)\nEnd Function\nFunction RemoveFromSet(ByRef collectMap As Collection, ByVal item As String)\n        If Contains(collectMap, item) Then\n                collectMap.Remove item\n        RemoveFromSet = 0\n        Else\n                RemoveFromSet = -1\n        End If\nEnd Function"
    },
    {
        "instruction": "高亮显示aluminium,不锈钢材质的组件, part number表格路径~/excel_file.xlsx。",
        "input": "",
        "output": "Language=CATSCRIPT\n\nSub CATMain()\n        Dim excelPath\n        excelPath = \"~/excel_file.xlsx\"\n        Dim materials\n        materials = \"aluminium,不锈钢\"\n        Dim fso As Object\n        Set fso = CreateObject(\"Scripting.FileSystemObject\")\n        If fso.FileExists(excelPath) = False Then\n            excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\n            If fso.FileExists(excelPath) = False Then\n                    MsgBox \"Excel文件不存在: \" \u0026 excelPath\n                    Exit Sub\n            End If\n        End If\n        Dim partNumberTitle\n        partNumberTitle = \"Part number\"\n        Dim mapSearch\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")        \n        Dim expression\n        expression = materials\n        Dim strLen\n        strLen = Len(expression)\n        Dim splitPosition\n        splitPosition = 1\n        Dim exprChar\n        For i = 1 To strLen\n            exprChar = Mid(expression, i, 1)\n            If Mid(expression, i, 1) = \",\" Then\n                Dim mess\n                mess = Mid(expression, splitPosition, i - splitPosition)\n                splitPosition = i + 1\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\n            End If\n        Next\n        If splitPosition \u003c strLen Then\n            Dim mess2\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\n        End If\n    \n\n        Dim showPartNumber\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\n        Dim showChildComps As Object\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim transparencyChildComps As Object\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim ret As Integer\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\nEnd Sub\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\n        Dim rootDoc As ProductDocument\n        Set rootDoc = CATIA.ActiveDocument\n        If rootDoc Is Nothing Then\n            CATIALoopChildren = -2\n            Exit Function\n        End If\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\n            CATIALoopChildren = -3\n            Exit Function\n        End If\n        Dim rootProduct As Product\n        Set rootProduct = rootDoc.Product\n        Dim productChildren As Products\n        Set productChildren = rootProduct.Products\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\n        CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\n                \nEnd Function\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\n        Dim parentDoc As Document\n        Set parentDoc = productRoot.Parent\n        If parentDoc Is Nothing Then\n                ChangeCompState = -3\n                Exit Function\n        End If\n        Dim selectionNode As Selection\n        Set selectionNode = parentDoc.Selection\n        If selectionNode Is Nothing Then\n                ChangeCompState = -4\n                Exit Function\n        End If\n        Dim visProp As visPropertySet\n        Set visProp = selectionNode.VisProperties\n        If visProp Is Nothing Then\n                ChangeCompState = -5\n                Exit Function\n        End If\n        Dim productNode As Variant\n        For Each productNode In productNodes\n                selectionNode.Add productNode\n        Next\n        Set visProp = visProp.Parent\n        If visProp Is Nothing Then\n                ChangeCompState = -6\n                Exit Function\n        End If\n    If isShow \u003c 0 Then\n        Dim showState As CatVisPropertyShow\n        visProp.GetShow showState\n        If showState \u003c\u003e isShow Then\n            visProp.SetShow isShow\n        End If\n    End If\n        If isTransparency \u003c 0 Then\n        visProp.SetVisibleOpacity 100, 0\n    Else\n        visProp.SetVisibleOpacity isTransparency, 1\n    End If\n        selectionNode.Clear\n        ChangeCompState = 0\nEnd Function\nFunction GetChildren(ByRef productRoot As Product, ByRef productNode As Product, ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object, ByVal parentIsOk As Boolean) As Integer\n    Dim productsArr As Products\n        Set productsArr = productNode.Products\n        If productsArr Is Nothing Then\n                GetChildren = -2\n                Exit Function\n        End If\n        Dim returnVisable As Integer\n        returnVisable = 0\n        Dim searchedID\n        Set searchedID = CreateObject(\"Scripting.Dictionary\")\n        For i = 1 To productsArr.Count\n                Dim pdtChild As Product\n                Set pdtChild = productsArr.item(i)\n                If parentIsOk Then\n                        showChildComps.Add pdtChild\n                        returnVisable = 2\n                Else\n                        Dim currentNodeIsSearched As Boolean\n                        currentNodeIsSearched = CheckPartNumberIsInput(pdtChild, partNames)\n                        Dim ret As Integer\n                        ret = 0\n                        If CheckReferenceIsProductByDocType(pdtChild) Then\n                                ret = GetChildren(productRoot, pdtChild, partNames, showChildComps, transparencyChildComps, currentNodeIsSearched)\n                        End If\n                        If ret \u003e 1 Or currentNodeIsSearched Then\n                                searchedID.Add i, i\n                                showChildComps.Add pdtChild\n                                returnVisable = 2\n                        End If\n                End If\n        Next\n    If returnVisable \u003c\u003e 0 Then\n        For i = 1 To productsArr.Count\n            If Not searchedID.Exists(i) Then\n                transparencyChildComps.Add productsArr.item(i)\n            End If\n        Next\n    End If\n    Set productsArr = Nothing\n    GetChildren = returnVisable\nEnd Function\nFunction CheckReferenceIsProductByDocType(ByRef productNode As Product) As Boolean\n    CheckReferenceIsProductByDocType = False\n    Dim refpdt As Product\n    Set refpdt = productNode.ReferenceProduct\n    \n    If Not refpdt Is Nothing Then\n        Dim parentObj As CATBaseDispatch\n        Set parentObj = refpdt.Parent\n        If StrComp(TypeName(parentObj), \"ProductDocument\", vbTextCompare) = 0 Then\n            CheckReferenceIsProductByDocType = True\n        End If\n        Set parentObj = Nothing\n    End If\n    Set refpdt = Nothing\nEnd Function\nFunction CheckPartNumberIsInput(ByRef productNode As Product, ByRef partNames As Object) As Boolean\n    CheckPartNumberIsInput = False\n        Dim pNumStr As String\n        pNumStr = productNode.PartNumber\n    Dim itemStrReduce As String\n    Dim item As Variant\n    For Each item In partNames\n                itemStr = item\n                itemStrReduce = Left(pNumStr,Len(itemStr))\n        If itemStrReduce = itemStr Then\n            CheckPartNumberIsInput = True\n            Exit Function\n        End If\n    Next\nEnd Function\nFunction ReadExcel(ByRef showPartNumber As Object, inputSearch As Object, excelPath As String, partNumberTitle As String)\n        Dim ExcelApp\n        Set ExcelApp = CreateObject(\"Excel.Application\")\n        ExcelApp.Visible = False\n        ExcelApp.DisplayAlerts = False\n        Dim Workbook\n        Set Workbook = ExcelApp.Workbooks.Open(excelPath)\n        Dim Sheets\n        Set Sheets = Workbook.Sheets\n        Dim Sheet\n        Set Sheet = Workbook.Sheets(1)\n        Dim allRows, allCols\n        allRows = Sheet.UsedRange.Rows.Count\n        allCols = Sheet.UsedRange.Columns.Count\n        Dim row, col\n        Dim PartNumberCol\n        PartNumberCol = 0\n        For col = 1 To allCols\n                Dim CellValue\n                CellValue = Sheet.cells(1, col).value\n                If CellValue = partNumberTitle Then\n                        PartNumberCol = col\n                        Exit For\n                End If\n        Next\n        If PartNumberCol \u003c\u003e 0 Then\n                For col = 1 To allCols\n                        Dim CellTitle\n                        CellTitle = Sheet.cells(1, col).value\n                        Dim listCheck As Object\n                        Set listCheck = GetMapList(inputSearch, CellTitle)\n                        If Not listCheck Is Nothing Then\n                                For row = 2 To allRows\n                                        If Not Sheet.cells(row, col) Is Nothing Then\n                                                Dim CellValue2 As String\n                                                CellValue2 = Sheet.cells(row, col).value\n\n                                                For Each item In listCheck\n                                                        Dim ret\n                                                        If CustomLikeAddAnyToPattern(CellValue2, item, True, True) Then\n                                                                ret = True\n                                                        Else\n                                                                ret = False\n                                                        End If\n                                                        If ret Then\n                                                                Dim pNumber\n                                                                pNumber = Sheet.cells(row, PartNumberCol).value\n                                                                AddToMap showPartNumber, pNumber, pNumber\n                                                                Exit For\n                                                        End If\n                                                Next\n                                        End If\n                                Next\n                        End If\n                Next\n        Else\n                MsgBox(\"Can not find Part number in Excel!\")\n        End If\n        Set Sheet = Nothing\n        Set Sheets = Nothing\n        Workbook.Close(False)\n        Set Workbook = Nothing\n        ExcelApp.Quit\n        Set ExcelApp = Nothing\n        ReadExcel = 0\nEnd Function\nFunction CustomLikeAddAnyToPattern(expression As String, pattern As String, preAsterisk As Boolean, sufAsterisk As Boolean) As Boolean\n        Dim valReg As String\n        valReg = pattern\n        If preAsterisk Then\n                valReg = \"*\" \u0026 valReg\n        End If\n        If sufAsterisk Then\n                valReg = valReg \u0026 \"*\"\n        End If\n        CustomLikeAddAnyToPattern = CustomLike(expression, valReg)\nEnd Function\nFunction CustomLike(expression As String, pattern As String) As Boolean\n        Dim i As Long, j As Long\n        Dim exprLen As Long, patLen As Long\n        Dim exprChar As String, patChar As String\n        Dim exprPos As Long, patPos As Long\n        Dim starPos As Long, exprStarPos As Long\n        exprLen = Len(expression)\n        patLen = Len(pattern)\n        exprPos = 1\n        patPos = 1\n        starPos = 0\n        exprStarPos = 0\n        While exprPos \u003c= exprLen And patPos \u003c= patLen\n                If patPos \u003c= patLen Then\n                        patChar = Mid(pattern, patPos, 1)\n                Else\n                        patChar = \"\"\n                End If\n                If exprPos \u003c= exprLen Then\n                        exprChar = Mid(expression, exprPos, 1)\n                Else\n                        exprChar = \"\"\n                End If\n                Select Case patChar\n                        Case \"?\"\n                                If exprChar = \"\" Then\n                                        CustomLike = False\n                                        Exit Function\n                                End If\n                                exprPos = exprPos + 1\n                                patPos = patPos + 1\n                        Case \"[\"\n                                Dim charList As String, negated As Boolean\n                                negated = False\n                                patPos = patPos + 1\n                                charList = \"\"\n                                Do While patPos \u003c= patLen\n                                        patChar = Mid(pattern, patPos, 1)\n                                        If patChar = \"]\" Then\n                                                patPos = patPos + 1\n                                                Exit Do\n                                        ElseIf patChar = \"^\" And Not negated Then\n                                                negated = True\n                                        Else\n                                                charList = charList \u0026 patChar\n                                        End If\n                                        patPos = patPos + 1\n                                Loop\n                                If (negated And InStr(1, charList, exprChar, vbBinaryCompare) \u003e 0) Or (Not negated And InStr(1, charList, exprChar, vbBinaryCompare) = 0) Then\n                                        CustomLike = False\n                                        Exit Function\n                                End If\n                                exprPos = exprPos + 1\n                        Case \"*\"\n                                If patPos = patLen Then\n                                        CustomLike = True\n                                        Exit Function\n                                End If\n                                starPos = patPos\n                                exprStarPos = exprPos\n                                patPos = patPos + 1\n                        Case Else\n                                If exprChar \u003c\u003e patChar Then\n                                        If starPos = 0 Then\n                                                CustomLike = False\n                                                Exit Function\n                                        Else\n                                                patPos = starPos + 1\n                                                exprPos = exprStarPos + 1\n                                                exprStarPos = exprPos\n                                        End If\n                                Else\n                                        exprPos = exprPos + 1\n                                        patPos = patPos + 1\n                                End If\n                End Select\n        WEnd\n        If patPos = patLen Then\n                CustomLike = True\n        Else\n                CustomLike = False\n        End If\nEnd Function\nFunction AddToMapValueList(map, key, value)\n        If Not map.Exists(key) Then\n                Dim newList\n                Set newList = CreateObject(\"System.Collections.ArrayList\")\n                newList.Add(value)\n                map.Add key, newList\n        Else\n                Dim list\n                Set list = map(key)\n                list.Add(value)\n        End If\n        AddToMapValueList = 0\nEnd Function\nFunction GetMapList(map, key)\n        If map.Exists(key) Then\n                Set GetMapList = map(key)\n        Else\n                Set GetMapList = Nothing\n        End If\nEnd Function\nFunction AddToSet(ByRef collectMap As Collection, ByVal item As String) As Boolean\n        If Not Contains(collectMap, item) Then\n                collectMap.Add item, item\n        End If\n        AddToSet = True\nEnd Function\nFunction AddToMap(ByRef collectMap As Collection, keyName As String, value As String) As Boolean\n        If Not collectMap.Exists(keyName) Then\n                collectMap.Add value, keyName\n        End If\n        AddToMap = True\nEnd Function\nFunction Contains(ByRef collectMap As Collection, ByVal item As String) As Boolean\n        On Error Resume Next\n        collectMap.item(item)\n        Contains = (Err.Number = 0)\nEnd Function\nFunction RemoveFromSet(ByRef collectMap As Collection, ByVal item As String)\n        If Contains(collectMap, item) Then\n                collectMap.Remove item\n        RemoveFromSet = 0\n        Else\n                RemoveFromSet = -1\n        End If\nEnd Function"
    },
    {
        "instruction": "高亮显示~/excel_file.xlsx中[CR270LA]材质的组件。",
        "input": "",
        "output": "Language=CATSCRIPT\n\nSub CATMain()\n        Dim excelPath\n        excelPath = \"~/excel_file.xlsx\"\n        Dim materials\n        materials = \"[CR270LA]\"\n        Dim fso As Object\n        Set fso = CreateObject(\"Scripting.FileSystemObject\")\n        If fso.FileExists(excelPath) = False Then\n            excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\n            If fso.FileExists(excelPath) = False Then\n                    MsgBox \"Excel文件不存在: \" \u0026 excelPath\n                    Exit Sub\n            End If\n        End If\n        Dim partNumberTitle\n        partNumberTitle = \"Part number\"\n        Dim mapSearch\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")        \n        Dim expression\n        expression = materials\n        Dim strLen\n        strLen = Len(expression)\n        Dim splitPosition\n        splitPosition = 1\n        Dim exprChar\n        For i = 1 To strLen\n            exprChar = Mid(expression, i, 1)\n            If Mid(expression, i, 1) = \",\" Then\n                Dim mess\n                mess = Mid(expression, splitPosition, i - splitPosition)\n                splitPosition = i + 1\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\n            End If\n        Next\n        If splitPosition \u003c strLen Then\n            Dim mess2\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\n        End If\n    \n\n        Dim showPartNumber\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\n        Dim showChildComps As Object\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim transparencyChildComps As Object\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim ret As Integer\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\nEnd Sub\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\n        Dim rootDoc As ProductDocument\n        Set rootDoc = CATIA.ActiveDocument\n        If rootDoc Is Nothing Then\n            CATIALoopChildren = -2\n            Exit Function\n        End If\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\n            CATIALoopChildren = -3\n            Exit Function\n        End If\n        Dim rootProduct As Product\n        Set rootProduct = rootDoc.Product\n        Dim productChildren As Products\n        Set productChildren = rootProduct.Products\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\n        CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\n                \nEnd Function\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\n        Dim parentDoc As Document\n        Set parentDoc = productRoot.Parent\n        If parentDoc Is Nothing Then\n                ChangeCompState = -3\n                Exit Function\n        End If\n        Dim selectionNode As Selection\n        Set selectionNode = parentDoc.Selection\n        If selectionNode Is Nothing Then\n                ChangeCompState = -4\n                Exit Function\n        End If\n        Dim visProp As visPropertySet\n        Set visProp = selectionNode.VisProperties\n        If visProp Is Nothing Then\n                ChangeCompState = -5\n                Exit Function\n        End If\n        Dim productNode As Variant\n        For Each productNode In productNodes\n                selectionNode.Add productNode\n        Next\n        Set visProp = visProp.Parent\n        If visProp Is Nothing Then\n                ChangeCompState = -6\n                Exit Function\n        End If\n    If isShow \u003c 0 Then\n        Dim showState As CatVisPropertyShow\n        visProp.GetShow showState\n        If showState \u003c\u003e isShow Then\n            visProp.SetShow isShow\n        End If\n    End If\n        If isTransparency \u003c 0 Then\n        visProp.SetVisibleOpacity 100, 0\n    Else\n        visProp.SetVisibleOpacity isTransparency, 1\n    End If\n        selectionNode.Clear\n        ChangeCompState = 0\nEnd Function\nFunction GetChildren(ByRef productRoot As Product, ByRef productNode As Product, ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object, ByVal parentIsOk As Boolean) As Integer\n    Dim productsArr As Products\n        Set productsArr = productNode.Products\n        If productsArr Is Nothing Then\n                GetChildren = -2\n                Exit Function\n        End If\n        Dim returnVisable As Integer\n        returnVisable = 0\n        Dim searchedID\n        Set searchedID = CreateObject(\"Scripting.Dictionary\")\n        For i = 1 To productsArr.Count\n                Dim pdtChild As Product\n                Set pdtChild = productsArr.item(i)\n                If parentIsOk Then\n                        showChildComps.Add pdtChild\n                        returnVisable = 2\n                Else\n                        Dim currentNodeIsSearched As Boolean\n                        currentNodeIsSearched = CheckPartNumberIsInput(pdtChild, partNames)\n                        Dim ret As Integer\n                        ret = 0\n                        If CheckReferenceIsProductByDocType(pdtChild) Then\n                                ret = GetChildren(productRoot, pdtChild, partNames, showChildComps, transparencyChildComps, currentNodeIsSearched)\n                        End If\n                        If ret \u003e 1 Or currentNodeIsSearched Then\n                                searchedID.Add i, i\n                                showChildComps.Add pdtChild\n                                returnVisable = 2\n                        End If\n                End If\n        Next\n    If returnVisable \u003c\u003e 0 Then\n        For i = 1 To productsArr.Count\n            If Not searchedID.Exists(i) Then\n                transparencyChildComps.Add productsArr.item(i)\n            End If\n        Next\n    End If\n    Set productsArr = Nothing\n    GetChildren = returnVisable\nEnd Function\nFunction CheckReferenceIsProductByDocType(ByRef productNode As Product) As Boolean\n    CheckReferenceIsProductByDocType = False\n    Dim refpdt As Product\n    Set refpdt = productNode.ReferenceProduct\n    \n    If Not refpdt Is Nothing Then\n        Dim parentObj As CATBaseDispatch\n        Set parentObj = refpdt.Parent\n        If StrComp(TypeName(parentObj), \"ProductDocument\", vbTextCompare) = 0 Then\n            CheckReferenceIsProductByDocType = True\n        End If\n        Set parentObj = Nothing\n    End If\n    Set refpdt = Nothing\nEnd Function\nFunction CheckPartNumberIsInput(ByRef productNode As Product, ByRef partNames As Object) As Boolean\n    CheckPartNumberIsInput = False\n        Dim pNumStr As String\n        pNumStr = productNode.PartNumber\n    Dim itemStrReduce As String\n    Dim item As Variant\n    For Each item In partNames\n                itemStr = item\n                itemStrReduce = Left(pNumStr,Len(itemStr))\n        If itemStrReduce = itemStr Then\n            CheckPartNumberIsInput = True\n            Exit Function\n        End If\n    Next\nEnd Function\nFunction ReadExcel(ByRef showPartNumber As Object, inputSearch As Object, excelPath As String, partNumberTitle As String)\n        Dim ExcelApp\n        Set ExcelApp = CreateObject(\"Excel.Application\")\n        ExcelApp.Visible = False\n        ExcelApp.DisplayAlerts = False\n        Dim Workbook\n        Set Workbook = ExcelApp.Workbooks.Open(excelPath)\n        Dim Sheets\n        Set Sheets = Workbook.Sheets\n        Dim Sheet\n        Set Sheet = Workbook.Sheets(1)\n        Dim allRows, allCols\n        allRows = Sheet.UsedRange.Rows.Count\n        allCols = Sheet.UsedRange.Columns.Count\n        Dim row, col\n        Dim PartNumberCol\n        PartNumberCol = 0\n        For col = 1 To allCols\n                Dim CellValue\n                CellValue = Sheet.cells(1, col).value\n                If CellValue = partNumberTitle Then\n                        PartNumberCol = col\n                        Exit For\n                End If\n        Next\n        If PartNumberCol \u003c\u003e 0 Then\n                For col = 1 To allCols\n                        Dim CellTitle\n                        CellTitle = Sheet.cells(1, col).value\n                        Dim listCheck As Object\n                        Set listCheck = GetMapList(inputSearch, CellTitle)\n                        If Not listCheck Is Nothing Then\n                                For row = 2 To allRows\n                                        If Not Sheet.cells(row, col) Is Nothing Then\n                                                Dim CellValue2 As String\n                                                CellValue2 = Sheet.cells(row, col).value\n\n                                                For Each item In listCheck\n                                                        Dim ret\n                                                        If CustomLikeAddAnyToPattern(CellValue2, item, True, True) Then\n                                                                ret = True\n                                                        Else\n                                                                ret = False\n                                                        End If\n                                                        If ret Then\n                                                                Dim pNumber\n                                                                pNumber = Sheet.cells(row, PartNumberCol).value\n                                                                AddToMap showPartNumber, pNumber, pNumber\n                                                                Exit For\n                                                        End If\n                                                Next\n                                        End If\n                                Next\n                        End If\n                Next\n        Else\n                MsgBox(\"Can not find Part number in Excel!\")\n        End If\n        Set Sheet = Nothing\n        Set Sheets = Nothing\n        Workbook.Close(False)\n        Set Workbook = Nothing\n        ExcelApp.Quit\n        Set ExcelApp = Nothing\n        ReadExcel = 0\nEnd Function\nFunction CustomLikeAddAnyToPattern(expression As String, pattern As String, preAsterisk As Boolean, sufAsterisk As Boolean) As Boolean\n        Dim valReg As String\n        valReg = pattern\n        If preAsterisk Then\n                valReg = \"*\" \u0026 valReg\n        End If\n        If sufAsterisk Then\n                valReg = valReg \u0026 \"*\"\n        End If\n        CustomLikeAddAnyToPattern = CustomLike(expression, valReg)\nEnd Function\nFunction CustomLike(expression As String, pattern As String) As Boolean\n        Dim i As Long, j As Long\n        Dim exprLen As Long, patLen As Long\n        Dim exprChar As String, patChar As String\n        Dim exprPos As Long, patPos As Long\n        Dim starPos As Long, exprStarPos As Long\n        exprLen = Len(expression)\n        patLen = Len(pattern)\n        exprPos = 1\n        patPos = 1\n        starPos = 0\n        exprStarPos = 0\n        While exprPos \u003c= exprLen And patPos \u003c= patLen\n                If patPos \u003c= patLen Then\n                        patChar = Mid(pattern, patPos, 1)\n                Else\n                        patChar = \"\"\n                End If\n                If exprPos \u003c= exprLen Then\n                        exprChar = Mid(expression, exprPos, 1)\n                Else\n                        exprChar = \"\"\n                End If\n                Select Case patChar\n                        Case \"?\"\n                                If exprChar = \"\" Then\n                                        CustomLike = False\n                                        Exit Function\n                                End If\n                                exprPos = exprPos + 1\n                                patPos = patPos + 1\n                        Case \"[\"\n                                Dim charList As String, negated As Boolean\n                                negated = False\n                                patPos = patPos + 1\n                                charList = \"\"\n                                Do While patPos \u003c= patLen\n                                        patChar = Mid(pattern, patPos, 1)\n                                        If patChar = \"]\" Then\n                                                patPos = patPos + 1\n                                                Exit Do\n                                        ElseIf patChar = \"^\" And Not negated Then\n                                                negated = True\n                                        Else\n                                                charList = charList \u0026 patChar\n                                        End If\n                                        patPos = patPos + 1\n                                Loop\n                                If (negated And InStr(1, charList, exprChar, vbBinaryCompare) \u003e 0) Or (Not negated And InStr(1, charList, exprChar, vbBinaryCompare) = 0) Then\n                                        CustomLike = False\n                                        Exit Function\n                                End If\n                                exprPos = exprPos + 1\n                        Case \"*\"\n                                If patPos = patLen Then\n                                        CustomLike = True\n                                        Exit Function\n                                End If\n                                starPos = patPos\n                                exprStarPos = exprPos\n                                patPos = patPos + 1\n                        Case Else\n                                If exprChar \u003c\u003e patChar Then\n                                        If starPos = 0 Then\n                                                CustomLike = False\n                                                Exit Function\n                                        Else\n                                                patPos = starPos + 1\n                                                exprPos = exprStarPos + 1\n                                                exprStarPos = exprPos\n                                        End If\n                                Else\n                                        exprPos = exprPos + 1\n                                        patPos = patPos + 1\n                                End If\n                End Select\n        WEnd\n        If patPos = patLen Then\n                CustomLike = True\n        Else\n                CustomLike = False\n        End If\nEnd Function\nFunction AddToMapValueList(map, key, value)\n        If Not map.Exists(key) Then\n                Dim newList\n                Set newList = CreateObject(\"System.Collections.ArrayList\")\n                newList.Add(value)\n                map.Add key, newList\n        Else\n                Dim list\n                Set list = map(key)\n                list.Add(value)\n        End If\n        AddToMapValueList = 0\nEnd Function\nFunction GetMapList(map, key)\n        If map.Exists(key) Then\n                Set GetMapList = map(key)\n        Else\n                Set GetMapList = Nothing\n        End If\nEnd Function\nFunction AddToSet(ByRef collectMap As Collection, ByVal item As String) As Boolean\n        If Not Contains(collectMap, item) Then\n                collectMap.Add item, item\n        End If\n        AddToSet = True\nEnd Function\nFunction AddToMap(ByRef collectMap As Collection, keyName As String, value As String) As Boolean\n        If Not collectMap.Exists(keyName) Then\n                collectMap.Add value, keyName\n        End If\n        AddToMap = True\nEnd Function\nFunction Contains(ByRef collectMap As Collection, ByVal item As String) As Boolean\n        On Error Resume Next\n        collectMap.item(item)\n        Contains = (Err.Number = 0)\nEnd Function\nFunction RemoveFromSet(ByRef collectMap As Collection, ByVal item As String)\n        If Contains(collectMap, item) Then\n                collectMap.Remove item\n        RemoveFromSet = 0\n        Else\n                RemoveFromSet = -1\n        End If\nEnd Function"
    },
    {
        "instruction": "高亮显示aluminium,不锈钢材质的组件, part number表格路径~/excel_file.xlsx。",
        "input": "",
        "output": "Language=CATSCRIPT\n\nSub CATMain()\n        Dim excelPath\n        excelPath = \"~/excel_file.xlsx\"\n        Dim materials\n        materials = \"aluminium,不锈钢\"\n        Dim fso As Object\n        Set fso = CreateObject(\"Scripting.FileSystemObject\")\n        If fso.FileExists(excelPath) = False Then\n            excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\n            If fso.FileExists(excelPath) = False Then\n                    MsgBox \"Excel文件不存在: \" \u0026 excelPath\n                    Exit Sub\n            End If\n        End If\n        Dim partNumberTitle\n        partNumberTitle = \"Part number\"\n        Dim mapSearch\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")        \n        Dim expression\n        expression = materials\n        Dim strLen\n        strLen = Len(expression)\n        Dim splitPosition\n        splitPosition = 1\n        Dim exprChar\n        For i = 1 To strLen\n            exprChar = Mid(expression, i, 1)\n            If Mid(expression, i, 1) = \",\" Then\n                Dim mess\n                mess = Mid(expression, splitPosition, i - splitPosition)\n                splitPosition = i + 1\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\n            End If\n        Next\n        If splitPosition \u003c strLen Then\n            Dim mess2\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\n        End If\n    \n\n        Dim showPartNumber\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\n        Dim showChildComps As Object\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim transparencyChildComps As Object\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim ret As Integer\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\nEnd Sub\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\n        Dim rootDoc As ProductDocument\n        Set rootDoc = CATIA.ActiveDocument\n        If rootDoc Is Nothing Then\n            CATIALoopChildren = -2\n            Exit Function\n        End If\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\n            CATIALoopChildren = -3\n            Exit Function\n        End If\n        Dim rootProduct As Product\n        Set rootProduct = rootDoc.Product\n        Dim productChildren As Products\n        Set productChildren = rootProduct.Products\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\n        CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\n                \nEnd Function\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\n        Dim parentDoc As Document\n        Set parentDoc = productRoot.Parent\n        If parentDoc Is Nothing Then\n                ChangeCompState = -3\n                Exit Function\n        End If\n        Dim selectionNode As Selection\n        Set selectionNode = parentDoc.Selection\n        If selectionNode Is Nothing Then\n                ChangeCompState = -4\n                Exit Function\n        End If\n        Dim visProp As visPropertySet\n        Set visProp = selectionNode.VisProperties\n        If visProp Is Nothing Then\n                ChangeCompState = -5\n                Exit Function\n        End If\n        Dim productNode As Variant\n        For Each productNode In productNodes\n                selectionNode.Add productNode\n        Next\n        Set visProp = visProp.Parent\n        If visProp Is Nothing Then\n                ChangeCompState = -6\n                Exit Function\n        End If\n    If isShow \u003c 0 Then\n        Dim showState As CatVisPropertyShow\n        visProp.GetShow showState\n        If showState \u003c\u003e isShow Then\n            visProp.SetShow isShow\n        End If\n    End If\n        If isTransparency \u003c 0 Then\n        visProp.SetVisibleOpacity 100, 0\n    Else\n        visProp.SetVisibleOpacity isTransparency, 1\n    End If\n        selectionNode.Clear\n        ChangeCompState = 0\nEnd Function\nFunction GetChildren(ByRef productRoot As Product, ByRef productNode As Product, ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object, ByVal parentIsOk As Boolean) As Integer\n    Dim productsArr As Products\n        Set productsArr = productNode.Products\n        If productsArr Is Nothing Then\n                GetChildren = -2\n                Exit Function\n        End If\n        Dim returnVisable As Integer\n        returnVisable = 0\n        Dim searchedID\n        Set searchedID = CreateObject(\"Scripting.Dictionary\")\n        For i = 1 To productsArr.Count\n                Dim pdtChild As Product\n                Set pdtChild = productsArr.item(i)\n                If parentIsOk Then\n                        showChildComps.Add pdtChild\n                        returnVisable = 2\n                Else\n                        Dim currentNodeIsSearched As Boolean\n                        currentNodeIsSearched = CheckPartNumberIsInput(pdtChild, partNames)\n                        Dim ret As Integer\n                        ret = 0\n                        If CheckReferenceIsProductByDocType(pdtChild) Then\n                                ret = GetChildren(productRoot, pdtChild, partNames, showChildComps, transparencyChildComps, currentNodeIsSearched)\n                        End If\n                        If ret \u003e 1 Or currentNodeIsSearched Then\n                                searchedID.Add i, i\n                                showChildComps.Add pdtChild\n                                returnVisable = 2\n                        End If\n                End If\n        Next\n    If returnVisable \u003c\u003e 0 Then\n        For i = 1 To productsArr.Count\n            If Not searchedID.Exists(i) Then\n                transparencyChildComps.Add productsArr.item(i)\n            End If\n        Next\n    End If\n    Set productsArr = Nothing\n    GetChildren = returnVisable\nEnd Function\nFunction CheckReferenceIsProductByDocType(ByRef productNode As Product) As Boolean\n    CheckReferenceIsProductByDocType = False\n    Dim refpdt As Product\n    Set refpdt = productNode.ReferenceProduct\n    \n    If Not refpdt Is Nothing Then\n        Dim parentObj As CATBaseDispatch\n        Set parentObj = refpdt.Parent\n        If StrComp(TypeName(parentObj), \"ProductDocument\", vbTextCompare) = 0 Then\n            CheckReferenceIsProductByDocType = True\n        End If\n        Set parentObj = Nothing\n    End If\n    Set refpdt = Nothing\nEnd Function\nFunction CheckPartNumberIsInput(ByRef productNode As Product, ByRef partNames As Object) As Boolean\n    CheckPartNumberIsInput = False\n        Dim pNumStr As String\n        pNumStr = productNode.PartNumber\n    Dim itemStrReduce As String\n    Dim item As Variant\n    For Each item In partNames\n                itemStr = item\n                itemStrReduce = Left(pNumStr,Len(itemStr))\n        If itemStrReduce = itemStr Then\n            CheckPartNumberIsInput = True\n            Exit Function\n        End If\n    Next\nEnd Function\nFunction ReadExcel(ByRef showPartNumber As Object, inputSearch As Object, excelPath As String, partNumberTitle As String)\n        Dim ExcelApp\n        Set ExcelApp = CreateObject(\"Excel.Application\")\n        ExcelApp.Visible = False\n        ExcelApp.DisplayAlerts = False\n        Dim Workbook\n        Set Workbook = ExcelApp.Workbooks.Open(excelPath)\n        Dim Sheets\n        Set Sheets = Workbook.Sheets\n        Dim Sheet\n        Set Sheet = Workbook.Sheets(1)\n        Dim allRows, allCols\n        allRows = Sheet.UsedRange.Rows.Count\n        allCols = Sheet.UsedRange.Columns.Count\n        Dim row, col\n        Dim PartNumberCol\n        PartNumberCol = 0\n        For col = 1 To allCols\n                Dim CellValue\n                CellValue = Sheet.cells(1, col).value\n                If CellValue = partNumberTitle Then\n                        PartNumberCol = col\n                        Exit For\n                End If\n        Next\n        If PartNumberCol \u003c\u003e 0 Then\n                For col = 1 To allCols\n                        Dim CellTitle\n                        CellTitle = Sheet.cells(1, col).value\n                        Dim listCheck As Object\n                        Set listCheck = GetMapList(inputSearch, CellTitle)\n                        If Not listCheck Is Nothing Then\n                                For row = 2 To allRows\n                                        If Not Sheet.cells(row, col) Is Nothing Then\n                                                Dim CellValue2 As String\n                                                CellValue2 = Sheet.cells(row, col).value\n\n                                                For Each item In listCheck\n                                                        Dim ret\n                                                        If CustomLikeAddAnyToPattern(CellValue2, item, True, True) Then\n                                                                ret = True\n                                                        Else\n                                                                ret = False\n                                                        End If\n                                                        If ret Then\n                                                                Dim pNumber\n                                                                pNumber = Sheet.cells(row, PartNumberCol).value\n                                                                AddToMap showPartNumber, pNumber, pNumber\n                                                                Exit For\n                                                        End If\n                                                Next\n                                        End If\n                                Next\n                        End If\n                Next\n        Else\n                MsgBox(\"Can not find Part number in Excel!\")\n        End If\n        Set Sheet = Nothing\n        Set Sheets = Nothing\n        Workbook.Close(False)\n        Set Workbook = Nothing\n        ExcelApp.Quit\n        Set ExcelApp = Nothing\n        ReadExcel = 0\nEnd Function\nFunction CustomLikeAddAnyToPattern(expression As String, pattern As String, preAsterisk As Boolean, sufAsterisk As Boolean) As Boolean\n        Dim valReg As String\n        valReg = pattern\n        If preAsterisk Then\n                valReg = \"*\" \u0026 valReg\n        End If\n        If sufAsterisk Then\n                valReg = valReg \u0026 \"*\"\n        End If\n        CustomLikeAddAnyToPattern = CustomLike(expression, valReg)\nEnd Function\nFunction CustomLike(expression As String, pattern As String) As Boolean\n        Dim i As Long, j As Long\n        Dim exprLen As Long, patLen As Long\n        Dim exprChar As String, patChar As String\n        Dim exprPos As Long, patPos As Long\n        Dim starPos As Long, exprStarPos As Long\n        exprLen = Len(expression)\n        patLen = Len(pattern)\n        exprPos = 1\n        patPos = 1\n        starPos = 0\n        exprStarPos = 0\n        While exprPos \u003c= exprLen And patPos \u003c= patLen\n                If patPos \u003c= patLen Then\n                        patChar = Mid(pattern, patPos, 1)\n                Else\n                        patChar = \"\"\n                End If\n                If exprPos \u003c= exprLen Then\n                        exprChar = Mid(expression, exprPos, 1)\n                Else\n                        exprChar = \"\"\n                End If\n                Select Case patChar\n                        Case \"?\"\n                                If exprChar = \"\" Then\n                                        CustomLike = False\n                                        Exit Function\n                                End If\n                                exprPos = exprPos + 1\n                                patPos = patPos + 1\n                        Case \"[\"\n                                Dim charList As String, negated As Boolean\n                                negated = False\n                                patPos = patPos + 1\n                                charList = \"\"\n                                Do While patPos \u003c= patLen\n                                        patChar = Mid(pattern, patPos, 1)\n                                        If patChar = \"]\" Then\n                                                patPos = patPos + 1\n                                                Exit Do\n                                        ElseIf patChar = \"^\" And Not negated Then\n                                                negated = True\n                                        Else\n                                                charList = charList \u0026 patChar\n                                        End If\n                                        patPos = patPos + 1\n                                Loop\n                                If (negated And InStr(1, charList, exprChar, vbBinaryCompare) \u003e 0) Or (Not negated And InStr(1, charList, exprChar, vbBinaryCompare) = 0) Then\n                                        CustomLike = False\n                                        Exit Function\n                                End If\n                                exprPos = exprPos + 1\n                        Case \"*\"\n                                If patPos = patLen Then\n                                        CustomLike = True\n                                        Exit Function\n                                End If\n                                starPos = patPos\n                                exprStarPos = exprPos\n                                patPos = patPos + 1\n                        Case Else\n                                If exprChar \u003c\u003e patChar Then\n                                        If starPos = 0 Then\n                                                CustomLike = False\n                                                Exit Function\n                                        Else\n                                                patPos = starPos + 1\n                                                exprPos = exprStarPos + 1\n                                                exprStarPos = exprPos\n                                        End If\n                                Else\n                                        exprPos = exprPos + 1\n                                        patPos = patPos + 1\n                                End If\n                End Select\n        WEnd\n        If patPos = patLen Then\n                CustomLike = True\n        Else\n                CustomLike = False\n        End If\nEnd Function\nFunction AddToMapValueList(map, key, value)\n        If Not map.Exists(key) Then\n                Dim newList\n                Set newList = CreateObject(\"System.Collections.ArrayList\")\n                newList.Add(value)\n                map.Add key, newList\n        Else\n                Dim list\n                Set list = map(key)\n                list.Add(value)\n        End If\n        AddToMapValueList = 0\nEnd Function\nFunction GetMapList(map, key)\n        If map.Exists(key) Then\n                Set GetMapList = map(key)\n        Else\n                Set GetMapList = Nothing\n        End If\nEnd Function\nFunction AddToSet(ByRef collectMap As Collection, ByVal item As String) As Boolean\n        If Not Contains(collectMap, item) Then\n                collectMap.Add item, item\n        End If\n        AddToSet = True\nEnd Function\nFunction AddToMap(ByRef collectMap As Collection, keyName As String, value As String) As Boolean\n        If Not collectMap.Exists(keyName) Then\n                collectMap.Add value, keyName\n        End If\n        AddToMap = True\nEnd Function\nFunction Contains(ByRef collectMap As Collection, ByVal item As String) As Boolean\n        On Error Resume Next\n        collectMap.item(item)\n        Contains = (Err.Number = 0)\nEnd Function\nFunction RemoveFromSet(ByRef collectMap As Collection, ByVal item As String)\n        If Contains(collectMap, item) Then\n                collectMap.Remove item\n        RemoveFromSet = 0\n        Else\n                RemoveFromSet = -1\n        End If\nEnd Function"
    },
    {
        "instruction": "高亮显示D:\\Documents\\catiaVB\\TB.xlsx中[CR270LA]材质的组件。",
        "input": "",
        "output": "Language=CATSCRIPT\n\nSub CATMain()\n        Dim excelPath\n        excelPath = \"D:\\Documents\\catiaVB\\TB.xlsx\"\n        Dim materials\n        materials = \"[CR270LA]\"\n        Dim fso As Object\n        Set fso = CreateObject(\"Scripting.FileSystemObject\")\n        If fso.FileExists(excelPath) = False Then\n            excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\n            If fso.FileExists(excelPath) = False Then\n                    MsgBox \"Excel文件不存在: \" \u0026 excelPath\n                    Exit Sub\n            End If\n        End If\n        Dim partNumberTitle\n        partNumberTitle = \"Part number\"\n        Dim mapSearch\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")        \n        Dim expression\n        expression = materials\n        Dim strLen\n        strLen = Len(expression)\n        Dim splitPosition\n        splitPosition = 1\n        Dim exprChar\n        For i = 1 To strLen\n            exprChar = Mid(expression, i, 1)\n            If Mid(expression, i, 1) = \",\" Then\n                Dim mess\n                mess = Mid(expression, splitPosition, i - splitPosition)\n                splitPosition = i + 1\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\n            End If\n        Next\n        If splitPosition \u003c strLen Then\n            Dim mess2\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\n        End If\n    \n\n        Dim showPartNumber\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\n        Dim showChildComps As Object\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim transparencyChildComps As Object\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim ret As Integer\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\nEnd Sub\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\n        Dim rootDoc As ProductDocument\n        Set rootDoc = CATIA.ActiveDocument\n        If rootDoc Is Nothing Then\n            CATIALoopChildren = -2\n            Exit Function\n        End If\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\n            CATIALoopChildren = -3\n            Exit Function\n        End If\n        Dim rootProduct As Product\n        Set rootProduct = rootDoc.Product\n        Dim productChildren As Products\n        Set productChildren = rootProduct.Products\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\n        CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\n                \nEnd Function\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\n        Dim parentDoc As Document\n        Set parentDoc = productRoot.Parent\n        If parentDoc Is Nothing Then\n                ChangeCompState = -3\n                Exit Function\n        End If\n        Dim selectionNode As Selection\n        Set selectionNode = parentDoc.Selection\n        If selectionNode Is Nothing Then\n                ChangeCompState = -4\n                Exit Function\n        End If\n        Dim visProp As visPropertySet\n        Set visProp = selectionNode.VisProperties\n        If visProp Is Nothing Then\n                ChangeCompState = -5\n                Exit Function\n        End If\n        Dim productNode As Variant\n        For Each productNode In productNodes\n                selectionNode.Add productNode\n        Next\n        Set visProp = visProp.Parent\n        If visProp Is Nothing Then\n                ChangeCompState = -6\n                Exit Function\n        End If\n    If isShow \u003c 0 Then\n        Dim showState As CatVisPropertyShow\n        visProp.GetShow showState\n        If showState \u003c\u003e isShow Then\n            visProp.SetShow isShow\n        End If\n    End If\n        If isTransparency \u003c 0 Then\n        visProp.SetVisibleOpacity 100, 0\n    Else\n        visProp.SetVisibleOpacity isTransparency, 1\n    End If\n        selectionNode.Clear\n        ChangeCompState = 0\nEnd Function\nFunction GetChildren(ByRef productRoot As Product, ByRef productNode As Product, ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object, ByVal parentIsOk As Boolean) As Integer\n    Dim productsArr As Products\n        Set productsArr = productNode.Products\n        If productsArr Is Nothing Then\n                GetChildren = -2\n                Exit Function\n        End If\n        Dim returnVisable As Integer\n        returnVisable = 0\n        Dim searchedID\n        Set searchedID = CreateObject(\"Scripting.Dictionary\")\n        For i = 1 To productsArr.Count\n                Dim pdtChild As Product\n                Set pdtChild = productsArr.item(i)\n                If parentIsOk Then\n                        showChildComps.Add pdtChild\n                        returnVisable = 2\n                Else\n                        Dim currentNodeIsSearched As Boolean\n                        currentNodeIsSearched = CheckPartNumberIsInput(pdtChild, partNames)\n                        Dim ret As Integer\n                        ret = 0\n                        If CheckReferenceIsProductByDocType(pdtChild) Then\n                                ret = GetChildren(productRoot, pdtChild, partNames, showChildComps, transparencyChildComps, currentNodeIsSearched)\n                        End If\n                        If ret \u003e 1 Or currentNodeIsSearched Then\n                                searchedID.Add i, i\n                                showChildComps.Add pdtChild\n                                returnVisable = 2\n                        End If\n                End If\n        Next\n    If returnVisable \u003c\u003e 0 Then\n        For i = 1 To productsArr.Count\n            If Not searchedID.Exists(i) Then\n                transparencyChildComps.Add productsArr.item(i)\n            End If\n        Next\n    End If\n    Set productsArr = Nothing\n    GetChildren = returnVisable\nEnd Function\nFunction CheckReferenceIsProductByDocType(ByRef productNode As Product) As Boolean\n    CheckReferenceIsProductByDocType = False\n    Dim refpdt As Product\n    Set refpdt = productNode.ReferenceProduct\n    \n    If Not refpdt Is Nothing Then\n        Dim parentObj As CATBaseDispatch\n        Set parentObj = refpdt.Parent\n        If StrComp(TypeName(parentObj), \"ProductDocument\", vbTextCompare) = 0 Then\n            CheckReferenceIsProductByDocType = True\n        End If\n        Set parentObj = Nothing\n    End If\n    Set refpdt = Nothing\nEnd Function\nFunction CheckPartNumberIsInput(ByRef productNode As Product, ByRef partNames As Object) As Boolean\n    CheckPartNumberIsInput = False\n        Dim pNumStr As String\n        pNumStr = productNode.PartNumber\n    Dim itemStrReduce As String\n    Dim item As Variant\n    For Each item In partNames\n                itemStr = item\n                itemStrReduce = Left(pNumStr,Len(itemStr))\n        If itemStrReduce = itemStr Then\n            CheckPartNumberIsInput = True\n            Exit Function\n        End If\n    Next\nEnd Function\nFunction ReadExcel(ByRef showPartNumber As Object, inputSearch As Object, excelPath As String, partNumberTitle As String)\n        Dim ExcelApp\n        Set ExcelApp = CreateObject(\"Excel.Application\")\n        ExcelApp.Visible = False\n        ExcelApp.DisplayAlerts = False\n        Dim Workbook\n        Set Workbook = ExcelApp.Workbooks.Open(excelPath)\n        Dim Sheets\n        Set Sheets = Workbook.Sheets\n        Dim Sheet\n        Set Sheet = Workbook.Sheets(1)\n        Dim allRows, allCols\n        allRows = Sheet.UsedRange.Rows.Count\n        allCols = Sheet.UsedRange.Columns.Count\n        Dim row, col\n        Dim PartNumberCol\n        PartNumberCol = 0\n        For col = 1 To allCols\n                Dim CellValue\n                CellValue = Sheet.cells(1, col).value\n                If CellValue = partNumberTitle Then\n                        PartNumberCol = col\n                        Exit For\n                End If\n        Next\n        If PartNumberCol \u003c\u003e 0 Then\n                For col = 1 To allCols\n                        Dim CellTitle\n                        CellTitle = Sheet.cells(1, col).value\n                        Dim listCheck As Object\n                        Set listCheck = GetMapList(inputSearch, CellTitle)\n                        If Not listCheck Is Nothing Then\n                                For row = 2 To allRows\n                                        If Not Sheet.cells(row, col) Is Nothing Then\n                                                Dim CellValue2 As String\n                                                CellValue2 = Sheet.cells(row, col).value\n\n                                                For Each item In listCheck\n                                                        Dim ret\n                                                        If CustomLikeAddAnyToPattern(CellValue2, item, True, True) Then\n                                                                ret = True\n                                                        Else\n                                                                ret = False\n                                                        End If\n                                                        If ret Then\n                                                                Dim pNumber\n                                                                pNumber = Sheet.cells(row, PartNumberCol).value\n                                                                AddToMap showPartNumber, pNumber, pNumber\n                                                                Exit For\n                                                        End If\n                                                Next\n                                        End If\n                                Next\n                        End If\n                Next\n        Else\n                MsgBox(\"Can not find Part number in Excel!\")\n        End If\n        Set Sheet = Nothing\n        Set Sheets = Nothing\n        Workbook.Close(False)\n        Set Workbook = Nothing\n        ExcelApp.Quit\n        Set ExcelApp = Nothing\n        ReadExcel = 0\nEnd Function\nFunction CustomLikeAddAnyToPattern(expression As String, pattern As String, preAsterisk As Boolean, sufAsterisk As Boolean) As Boolean\n        Dim valReg As String\n        valReg = pattern\n        If preAsterisk Then\n                valReg = \"*\" \u0026 valReg\n        End If\n        If sufAsterisk Then\n                valReg = valReg \u0026 \"*\"\n        End If\n        CustomLikeAddAnyToPattern = CustomLike(expression, valReg)\nEnd Function\nFunction CustomLike(expression As String, pattern As String) As Boolean\n        Dim i As Long, j As Long\n        Dim exprLen As Long, patLen As Long\n        Dim exprChar As String, patChar As String\n        Dim exprPos As Long, patPos As Long\n        Dim starPos As Long, exprStarPos As Long\n        exprLen = Len(expression)\n        patLen = Len(pattern)\n        exprPos = 1\n        patPos = 1\n        starPos = 0\n        exprStarPos = 0\n        While exprPos \u003c= exprLen And patPos \u003c= patLen\n                If patPos \u003c= patLen Then\n                        patChar = Mid(pattern, patPos, 1)\n                Else\n                        patChar = \"\"\n                End If\n                If exprPos \u003c= exprLen Then\n                        exprChar = Mid(expression, exprPos, 1)\n                Else\n                        exprChar = \"\"\n                End If\n                Select Case patChar\n                        Case \"?\"\n                                If exprChar = \"\" Then\n                                        CustomLike = False\n                                        Exit Function\n                                End If\n                                exprPos = exprPos + 1\n                                patPos = patPos + 1\n                        Case \"[\"\n                                Dim charList As String, negated As Boolean\n                                negated = False\n                                patPos = patPos + 1\n                                charList = \"\"\n                                Do While patPos \u003c= patLen\n                                        patChar = Mid(pattern, patPos, 1)\n                                        If patChar = \"]\" Then\n                                                patPos = patPos + 1\n                                                Exit Do\n                                        ElseIf patChar = \"^\" And Not negated Then\n                                                negated = True\n                                        Else\n                                                charList = charList \u0026 patChar\n                                        End If\n                                        patPos = patPos + 1\n                                Loop\n                                If (negated And InStr(1, charList, exprChar, vbBinaryCompare) \u003e 0) Or (Not negated And InStr(1, charList, exprChar, vbBinaryCompare) = 0) Then\n                                        CustomLike = False\n                                        Exit Function\n                                End If\n                                exprPos = exprPos + 1\n                        Case \"*\"\n                                If patPos = patLen Then\n                                        CustomLike = True\n                                        Exit Function\n                                End If\n                                starPos = patPos\n                                exprStarPos = exprPos\n                                patPos = patPos + 1\n                        Case Else\n                                If exprChar \u003c\u003e patChar Then\n                                        If starPos = 0 Then\n                                                CustomLike = False\n                                                Exit Function\n                                        Else\n                                                patPos = starPos + 1\n                                                exprPos = exprStarPos + 1\n                                                exprStarPos = exprPos\n                                        End If\n                                Else\n                                        exprPos = exprPos + 1\n                                        patPos = patPos + 1\n                                End If\n                End Select\n        WEnd\n        If patPos = patLen Then\n                CustomLike = True\n        Else\n                CustomLike = False\n        End If\nEnd Function\nFunction AddToMapValueList(map, key, value)\n        If Not map.Exists(key) Then\n                Dim newList\n                Set newList = CreateObject(\"System.Collections.ArrayList\")\n                newList.Add(value)\n                map.Add key, newList\n        Else\n                Dim list\n                Set list = map(key)\n                list.Add(value)\n        End If\n        AddToMapValueList = 0\nEnd Function\nFunction GetMapList(map, key)\n        If map.Exists(key) Then\n                Set GetMapList = map(key)\n        Else\n                Set GetMapList = Nothing\n        End If\nEnd Function\nFunction AddToSet(ByRef collectMap As Collection, ByVal item As String) As Boolean\n        If Not Contains(collectMap, item) Then\n                collectMap.Add item, item\n        End If\n        AddToSet = True\nEnd Function\nFunction AddToMap(ByRef collectMap As Collection, keyName As String, value As String) As Boolean\n        If Not collectMap.Exists(keyName) Then\n                collectMap.Add value, keyName\n        End If\n        AddToMap = True\nEnd Function\nFunction Contains(ByRef collectMap As Collection, ByVal item As String) As Boolean\n        On Error Resume Next\n        collectMap.item(item)\n        Contains = (Err.Number = 0)\nEnd Function\nFunction RemoveFromSet(ByRef collectMap As Collection, ByVal item As String)\n        If Contains(collectMap, item) Then\n                collectMap.Remove item\n        RemoveFromSet = 0\n        Else\n                RemoveFromSet = -1\n        End If\nEnd Function"
    },
    {
        "instruction": "高亮显示CR240*材质的组件, part number表格路径/home/aaron/excel_file.xlsx。",
        "input": "",
        "output": "Language=CATSCRIPT\n\nSub CATMain()\n        Dim excelPath\n        excelPath = \"/home/aaron/excel_file.xlsx\"\n        Dim materials\n        materials = \"CR240*\"\n        Dim fso As Object\n        Set fso = CreateObject(\"Scripting.FileSystemObject\")\n        If fso.FileExists(excelPath) = False Then\n            excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\n            If fso.FileExists(excelPath) = False Then\n                    MsgBox \"Excel文件不存在: \" \u0026 excelPath\n                    Exit Sub\n            End If\n        End If\n        Dim partNumberTitle\n        partNumberTitle = \"Part number\"\n        Dim mapSearch\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")        \n        Dim expression\n        expression = materials\n        Dim strLen\n        strLen = Len(expression)\n        Dim splitPosition\n        splitPosition = 1\n        Dim exprChar\n        For i = 1 To strLen\n            exprChar = Mid(expression, i, 1)\n            If Mid(expression, i, 1) = \",\" Then\n                Dim mess\n                mess = Mid(expression, splitPosition, i - splitPosition)\n                splitPosition = i + 1\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\n            End If\n        Next\n        If splitPosition \u003c strLen Then\n            Dim mess2\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\n        End If\n    \n\n        Dim showPartNumber\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\n        Dim showChildComps As Object\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim transparencyChildComps As Object\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim ret As Integer\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\nEnd Sub\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\n        Dim rootDoc As ProductDocument\n        Set rootDoc = CATIA.ActiveDocument\n        If rootDoc Is Nothing Then\n            CATIALoopChildren = -2\n            Exit Function\n        End If\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\n            CATIALoopChildren = -3\n            Exit Function\n        End If\n        Dim rootProduct As Product\n        Set rootProduct = rootDoc.Product\n        Dim productChildren As Products\n        Set productChildren = rootProduct.Products\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\n        CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\n                \nEnd Function\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\n        Dim parentDoc As Document\n        Set parentDoc = productRoot.Parent\n        If parentDoc Is Nothing Then\n                ChangeCompState = -3\n                Exit Function\n        End If\n        Dim selectionNode As Selection\n        Set selectionNode = parentDoc.Selection\n        If selectionNode Is Nothing Then\n                ChangeCompState = -4\n                Exit Function\n        End If\n        Dim visProp As visPropertySet\n        Set visProp = selectionNode.VisProperties\n        If visProp Is Nothing Then\n                ChangeCompState = -5\n                Exit Function\n        End If\n        Dim productNode As Variant\n        For Each productNode In productNodes\n                selectionNode.Add productNode\n        Next\n        Set visProp = visProp.Parent\n        If visProp Is Nothing Then\n                ChangeCompState = -6\n                Exit Function\n        End If\n    If isShow \u003c 0 Then\n        Dim showState As CatVisPropertyShow\n        visProp.GetShow showState\n        If showState \u003c\u003e isShow Then\n            visProp.SetShow isShow\n        End If\n    End If\n        If isTransparency \u003c 0 Then\n        visProp.SetVisibleOpacity 100, 0\n    Else\n        visProp.SetVisibleOpacity isTransparency, 1\n    End If\n        selectionNode.Clear\n        ChangeCompState = 0\nEnd Function\nFunction GetChildren(ByRef productRoot As Product, ByRef productNode As Product, ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object, ByVal parentIsOk As Boolean) As Integer\n    Dim productsArr As Products\n        Set productsArr = productNode.Products\n        If productsArr Is Nothing Then\n                GetChildren = -2\n                Exit Function\n        End If\n        Dim returnVisable As Integer\n        returnVisable = 0\n        Dim searchedID\n        Set searchedID = CreateObject(\"Scripting.Dictionary\")\n        For i = 1 To productsArr.Count\n                Dim pdtChild As Product\n                Set pdtChild = productsArr.item(i)\n                If parentIsOk Then\n                        showChildComps.Add pdtChild\n                        returnVisable = 2\n                Else\n                        Dim currentNodeIsSearched As Boolean\n                        currentNodeIsSearched = CheckPartNumberIsInput(pdtChild, partNames)\n                        Dim ret As Integer\n                        ret = 0\n                        If CheckReferenceIsProductByDocType(pdtChild) Then\n                                ret = GetChildren(productRoot, pdtChild, partNames, showChildComps, transparencyChildComps, currentNodeIsSearched)\n                        End If\n                        If ret \u003e 1 Or currentNodeIsSearched Then\n                                searchedID.Add i, i\n                                showChildComps.Add pdtChild\n                                returnVisable = 2\n                        End If\n                End If\n        Next\n    If returnVisable \u003c\u003e 0 Then\n        For i = 1 To productsArr.Count\n            If Not searchedID.Exists(i) Then\n                transparencyChildComps.Add productsArr.item(i)\n            End If\n        Next\n    End If\n    Set productsArr = Nothing\n    GetChildren = returnVisable\nEnd Function\nFunction CheckReferenceIsProductByDocType(ByRef productNode As Product) As Boolean\n    CheckReferenceIsProductByDocType = False\n    Dim refpdt As Product\n    Set refpdt = productNode.ReferenceProduct\n    \n    If Not refpdt Is Nothing Then\n        Dim parentObj As CATBaseDispatch\n        Set parentObj = refpdt.Parent\n        If StrComp(TypeName(parentObj), \"ProductDocument\", vbTextCompare) = 0 Then\n            CheckReferenceIsProductByDocType = True\n        End If\n        Set parentObj = Nothing\n    End If\n    Set refpdt = Nothing\nEnd Function\nFunction CheckPartNumberIsInput(ByRef productNode As Product, ByRef partNames As Object) As Boolean\n    CheckPartNumberIsInput = False\n        Dim pNumStr As String\n        pNumStr = productNode.PartNumber\n    Dim itemStrReduce As String\n    Dim item As Variant\n    For Each item In partNames\n                itemStr = item\n                itemStrReduce = Left(pNumStr,Len(itemStr))\n        If itemStrReduce = itemStr Then\n            CheckPartNumberIsInput = True\n            Exit Function\n        End If\n    Next\nEnd Function\nFunction ReadExcel(ByRef showPartNumber As Object, inputSearch As Object, excelPath As String, partNumberTitle As String)\n        Dim ExcelApp\n        Set ExcelApp = CreateObject(\"Excel.Application\")\n        ExcelApp.Visible = False\n        ExcelApp.DisplayAlerts = False\n        Dim Workbook\n        Set Workbook = ExcelApp.Workbooks.Open(excelPath)\n        Dim Sheets\n        Set Sheets = Workbook.Sheets\n        Dim Sheet\n        Set Sheet = Workbook.Sheets(1)\n        Dim allRows, allCols\n        allRows = Sheet.UsedRange.Rows.Count\n        allCols = Sheet.UsedRange.Columns.Count\n        Dim row, col\n        Dim PartNumberCol\n        PartNumberCol = 0\n        For col = 1 To allCols\n                Dim CellValue\n                CellValue = Sheet.cells(1, col).value\n                If CellValue = partNumberTitle Then\n                        PartNumberCol = col\n                        Exit For\n                End If\n        Next\n        If PartNumberCol \u003c\u003e 0 Then\n                For col = 1 To allCols\n                        Dim CellTitle\n                        CellTitle = Sheet.cells(1, col).value\n                        Dim listCheck As Object\n                        Set listCheck = GetMapList(inputSearch, CellTitle)\n                        If Not listCheck Is Nothing Then\n                                For row = 2 To allRows\n                                        If Not Sheet.cells(row, col) Is Nothing Then\n                                                Dim CellValue2 As String\n                                                CellValue2 = Sheet.cells(row, col).value\n\n                                                For Each item In listCheck\n                                                        Dim ret\n                                                        If CustomLikeAddAnyToPattern(CellValue2, item, True, True) Then\n                                                                ret = True\n                                                        Else\n                                                                ret = False\n                                                        End If\n                                                        If ret Then\n                                                                Dim pNumber\n                                                                pNumber = Sheet.cells(row, PartNumberCol).value\n                                                                AddToMap showPartNumber, pNumber, pNumber\n                                                                Exit For\n                                                        End If\n                                                Next\n                                        End If\n                                Next\n                        End If\n                Next\n        Else\n                MsgBox(\"Can not find Part number in Excel!\")\n        End If\n        Set Sheet = Nothing\n        Set Sheets = Nothing\n        Workbook.Close(False)\n        Set Workbook = Nothing\n        ExcelApp.Quit\n        Set ExcelApp = Nothing\n        ReadExcel = 0\nEnd Function\nFunction CustomLikeAddAnyToPattern(expression As String, pattern As String, preAsterisk As Boolean, sufAsterisk As Boolean) As Boolean\n        Dim valReg As String\n        valReg = pattern\n        If preAsterisk Then\n                valReg = \"*\" \u0026 valReg\n        End If\n        If sufAsterisk Then\n                valReg = valReg \u0026 \"*\"\n        End If\n        CustomLikeAddAnyToPattern = CustomLike(expression, valReg)\nEnd Function\nFunction CustomLike(expression As String, pattern As String) As Boolean\n        Dim i As Long, j As Long\n        Dim exprLen As Long, patLen As Long\n        Dim exprChar As String, patChar As String\n        Dim exprPos As Long, patPos As Long\n        Dim starPos As Long, exprStarPos As Long\n        exprLen = Len(expression)\n        patLen = Len(pattern)\n        exprPos = 1\n        patPos = 1\n        starPos = 0\n        exprStarPos = 0\n        While exprPos \u003c= exprLen And patPos \u003c= patLen\n                If patPos \u003c= patLen Then\n                        patChar = Mid(pattern, patPos, 1)\n                Else\n                        patChar = \"\"\n                End If\n                If exprPos \u003c= exprLen Then\n                        exprChar = Mid(expression, exprPos, 1)\n                Else\n                        exprChar = \"\"\n                End If\n                Select Case patChar\n                        Case \"?\"\n                                If exprChar = \"\" Then\n                                        CustomLike = False\n                                        Exit Function\n                                End If\n                                exprPos = exprPos + 1\n                                patPos = patPos + 1\n                        Case \"[\"\n                                Dim charList As String, negated As Boolean\n                                negated = False\n                                patPos = patPos + 1\n                                charList = \"\"\n                                Do While patPos \u003c= patLen\n                                        patChar = Mid(pattern, patPos, 1)\n                                        If patChar = \"]\" Then\n                                                patPos = patPos + 1\n                                                Exit Do\n                                        ElseIf patChar = \"^\" And Not negated Then\n                                                negated = True\n                                        Else\n                                                charList = charList \u0026 patChar\n                                        End If\n                                        patPos = patPos + 1\n                                Loop\n                                If (negated And InStr(1, charList, exprChar, vbBinaryCompare) \u003e 0) Or (Not negated And InStr(1, charList, exprChar, vbBinaryCompare) = 0) Then\n                                        CustomLike = False\n                                        Exit Function\n                                End If\n                                exprPos = exprPos + 1\n                        Case \"*\"\n                                If patPos = patLen Then\n                                        CustomLike = True\n                                        Exit Function\n                                End If\n                                starPos = patPos\n                                exprStarPos = exprPos\n                                patPos = patPos + 1\n                        Case Else\n                                If exprChar \u003c\u003e patChar Then\n                                        If starPos = 0 Then\n                                                CustomLike = False\n                                                Exit Function\n                                        Else\n                                                patPos = starPos + 1\n                                                exprPos = exprStarPos + 1\n                                                exprStarPos = exprPos\n                                        End If\n                                Else\n                                        exprPos = exprPos + 1\n                                        patPos = patPos + 1\n                                End If\n                End Select\n        WEnd\n        If patPos = patLen Then\n                CustomLike = True\n        Else\n                CustomLike = False\n        End If\nEnd Function\nFunction AddToMapValueList(map, key, value)\n        If Not map.Exists(key) Then\n                Dim newList\n                Set newList = CreateObject(\"System.Collections.ArrayList\")\n                newList.Add(value)\n                map.Add key, newList\n        Else\n                Dim list\n                Set list = map(key)\n                list.Add(value)\n        End If\n        AddToMapValueList = 0\nEnd Function\nFunction GetMapList(map, key)\n        If map.Exists(key) Then\n                Set GetMapList = map(key)\n        Else\n                Set GetMapList = Nothing\n        End If\nEnd Function\nFunction AddToSet(ByRef collectMap As Collection, ByVal item As String) As Boolean\n        If Not Contains(collectMap, item) Then\n                collectMap.Add item, item\n        End If\n        AddToSet = True\nEnd Function\nFunction AddToMap(ByRef collectMap As Collection, keyName As String, value As String) As Boolean\n        If Not collectMap.Exists(keyName) Then\n                collectMap.Add value, keyName\n        End If\n        AddToMap = True\nEnd Function\nFunction Contains(ByRef collectMap As Collection, ByVal item As String) As Boolean\n        On Error Resume Next\n        collectMap.item(item)\n        Contains = (Err.Number = 0)\nEnd Function\nFunction RemoveFromSet(ByRef collectMap As Collection, ByVal item As String)\n        If Contains(collectMap, item) Then\n                collectMap.Remove item\n        RemoveFromSet = 0\n        Else\n                RemoveFromSet = -1\n        End If\nEnd Function"
    }
]