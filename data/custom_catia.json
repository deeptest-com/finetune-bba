[
    {
        "instruction": "高亮显示~/excel.xlsx中CR240*,[CR270LA]材质的组件。",
        "input": "",
        "output": "Language=CATSCRIPT\n\nSub CATMain()\n        Dim excelPath\n        excelPath = \"~/excel.xlsx\"\n        Dim materials\n        materials = \"CR240*,[CR270LA]\"\n        Dim fso As Object\n        Set fso = CreateObject(\"Scripting.FileSystemObject\")\n        If fso.FileExists(excelPath) = False Then\n            excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\n            If fso.FileExists(excelPath) = False Then\n                    MsgBox \"Excel文件不存在: \" \u0026 excelPath\n                    Exit Sub\n            End If\n        End If\n        Dim partNumberTitle\n        partNumberTitle = \"Part number\"\n        Dim mapSearch\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")        \n        Dim expression\n        expression = materials\n        Dim strLen\n        strLen = Len(expression)\n        Dim splitPosition\n        splitPosition = 1\n        Dim exprChar\n        For i = 1 To strLen\n            exprChar = Mid(expression, i, 1)\n            If Mid(expression, i, 1) = \",\" Then\n                Dim mess\n                mess = Mid(expression, splitPosition, i - splitPosition)\n                splitPosition = i + 1\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\n            End If\n        Next\n        If splitPosition \u003c strLen Then\n            Dim mess2\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\n        End If\n    \n\n        Dim showPartNumber\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\n        Dim showChildComps As Object\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim transparencyChildComps As Object\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim ret As Integer\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\nEnd Sub\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\n        Dim rootDoc As ProductDocument\n        Set rootDoc = CATIA.ActiveDocument\n        If rootDoc Is Nothing Then\n            CATIALoopChildren = -2\n            Exit Function\n        End If\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\n            CATIALoopChildren = -3\n            Exit Function\n        End If\n        Dim rootProduct As Product\n        Set rootProduct = rootDoc.Product\n        Dim productChildren As Products\n        Set productChildren = rootProduct.Products\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\n        CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\n                \nEnd Function\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\n        Dim parentDoc As Document\n        Set parentDoc = productRoot.Parent\n        If parentDoc Is Nothing Then\n                ChangeCompState = -3\n                Exit Function\n        End If\n        Dim selectionNode As Selection\n        Set selectionNode = parentDoc.Selection\n        If selectionNode Is Nothing Then\n                ChangeCompState = -4\n                Exit Function\n"
    },
    {
        "instruction": "高亮显示aluminium,不锈钢材质的组件, part number表格路径./excel.xlsx。",
        "input": "",
        "output": "Language=CATSCRIPT\n\nSub CATMain()\n        Dim excelPath\n        excelPath = \"./excel.xlsx\"\n        Dim materials\n        materials = \"aluminium,不锈钢\"\n        Dim fso As Object\n        Set fso = CreateObject(\"Scripting.FileSystemObject\")\n        If fso.FileExists(excelPath) = False Then\n            excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\n            If fso.FileExists(excelPath) = False Then\n                    MsgBox \"Excel文件不存在: \" \u0026 excelPath\n                    Exit Sub\n            End If\n        End If\n        Dim partNumberTitle\n        partNumberTitle = \"Part number\"\n        Dim mapSearch\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")        \n        Dim expression\n        expression = materials\n        Dim strLen\n        strLen = Len(expression)\n        Dim splitPosition\n        splitPosition = 1\n        Dim exprChar\n        For i = 1 To strLen\n            exprChar = Mid(expression, i, 1)\n            If Mid(expression, i, 1) = \",\" Then\n                Dim mess\n                mess = Mid(expression, splitPosition, i - splitPosition)\n                splitPosition = i + 1\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\n            End If\n        Next\n        If splitPosition \u003c strLen Then\n            Dim mess2\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\n        End If\n    \n\n        Dim showPartNumber\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\n        Dim showChildComps As Object\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim transparencyChildComps As Object\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim ret As Integer\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\nEnd Sub\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\n        Dim rootDoc As ProductDocument\n        Set rootDoc = CATIA.ActiveDocument\n        If rootDoc Is Nothing Then\n            CATIALoopChildren = -2\n            Exit Function\n        End If\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\n            CATIALoopChildren = -3\n            Exit Function\n        End If\n        Dim rootProduct As Product\n        Set rootProduct = rootDoc.Product\n        Dim productChildren As Products\n        Set productChildren = rootProduct.Products\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\n        CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\n                \nEnd Function\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\n        Dim parentDoc As Document\n        Set parentDoc = productRoot.Parent\n        If parentDoc Is Nothing Then\n                ChangeCompState = -3\n                Exit Function\n        End If\n        Dim selectionNode As Selection\n        Set selectionNode = parentDoc.Selection\n        If selectionNode Is Nothing Then\n                ChangeCompState = -4\n                Exit Function\n"
    },
    {
        "instruction": "高亮显示~/excel.xlsx中[CR270LA]材质的组件。",
        "input": "",
        "output": "Language=CATSCRIPT\n\nSub CATMain()\n        Dim excelPath\n        excelPath = \"~/excel.xlsx\"\n        Dim materials\n        materials = \"[CR270LA]\"\n        Dim fso As Object\n        Set fso = CreateObject(\"Scripting.FileSystemObject\")\n        If fso.FileExists(excelPath) = False Then\n            excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\n            If fso.FileExists(excelPath) = False Then\n                    MsgBox \"Excel文件不存在: \" \u0026 excelPath\n                    Exit Sub\n            End If\n        End If\n        Dim partNumberTitle\n        partNumberTitle = \"Part number\"\n        Dim mapSearch\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")        \n        Dim expression\n        expression = materials\n        Dim strLen\n        strLen = Len(expression)\n        Dim splitPosition\n        splitPosition = 1\n        Dim exprChar\n        For i = 1 To strLen\n            exprChar = Mid(expression, i, 1)\n            If Mid(expression, i, 1) = \",\" Then\n                Dim mess\n                mess = Mid(expression, splitPosition, i - splitPosition)\n                splitPosition = i + 1\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\n            End If\n        Next\n        If splitPosition \u003c strLen Then\n            Dim mess2\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\n        End If\n    \n\n        Dim showPartNumber\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\n        Dim showChildComps As Object\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim transparencyChildComps As Object\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim ret As Integer\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\nEnd Sub\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\n        Dim rootDoc As ProductDocument\n        Set rootDoc = CATIA.ActiveDocument\n        If rootDoc Is Nothing Then\n            CATIALoopChildren = -2\n            Exit Function\n        End If\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\n            CATIALoopChildren = -3\n            Exit Function\n        End If\n        Dim rootProduct As Product\n        Set rootProduct = rootDoc.Product\n        Dim productChildren As Products\n        Set productChildren = rootProduct.Products\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\n        CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\n                \nEnd Function\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\n        Dim parentDoc As Document\n        Set parentDoc = productRoot.Parent\n        If parentDoc Is Nothing Then\n                ChangeCompState = -3\n                Exit Function\n        End If\n        Dim selectionNode As Selection\n        Set selectionNode = parentDoc.Selection\n        If selectionNode Is Nothing Then\n                ChangeCompState = -4\n                Exit Function\n"
    },
    {
        "instruction": "高亮显示[CR270LA]材质的组件, part number表格路径~/excel.xlsx。",
        "input": "",
        "output": "Language=CATSCRIPT\n\nSub CATMain()\n        Dim excelPath\n        excelPath = \"~/excel.xlsx\"\n        Dim materials\n        materials = \"[CR270LA]\"\n        Dim fso As Object\n        Set fso = CreateObject(\"Scripting.FileSystemObject\")\n        If fso.FileExists(excelPath) = False Then\n            excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\n            If fso.FileExists(excelPath) = False Then\n                    MsgBox \"Excel文件不存在: \" \u0026 excelPath\n                    Exit Sub\n            End If\n        End If\n        Dim partNumberTitle\n        partNumberTitle = \"Part number\"\n        Dim mapSearch\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")        \n        Dim expression\n        expression = materials\n        Dim strLen\n        strLen = Len(expression)\n        Dim splitPosition\n        splitPosition = 1\n        Dim exprChar\n        For i = 1 To strLen\n            exprChar = Mid(expression, i, 1)\n            If Mid(expression, i, 1) = \",\" Then\n                Dim mess\n                mess = Mid(expression, splitPosition, i - splitPosition)\n                splitPosition = i + 1\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\n            End If\n        Next\n        If splitPosition \u003c strLen Then\n            Dim mess2\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\n        End If\n    \n\n        Dim showPartNumber\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\n        Dim showChildComps As Object\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim transparencyChildComps As Object\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim ret As Integer\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\nEnd Sub\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\n        Dim rootDoc As ProductDocument\n        Set rootDoc = CATIA.ActiveDocument\n        If rootDoc Is Nothing Then\n            CATIALoopChildren = -2\n            Exit Function\n        End If\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\n            CATIALoopChildren = -3\n            Exit Function\n        End If\n        Dim rootProduct As Product\n        Set rootProduct = rootDoc.Product\n        Dim productChildren As Products\n        Set productChildren = rootProduct.Products\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\n        CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\n                \nEnd Function\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\n        Dim parentDoc As Document\n        Set parentDoc = productRoot.Parent\n        If parentDoc Is Nothing Then\n                ChangeCompState = -3\n                Exit Function\n        End If\n        Dim selectionNode As Selection\n        Set selectionNode = parentDoc.Selection\n        If selectionNode Is Nothing Then\n                ChangeCompState = -4\n                Exit Function\n"
    },
    {
        "instruction": "高亮显示/home/aaron/excel_file.xlsx中aluminium,不锈钢材质的组件。",
        "input": "",
        "output": "Language=CATSCRIPT\n\nSub CATMain()\n        Dim excelPath\n        excelPath = \"/home/aaron/excel_file.xlsx\"\n        Dim materials\n        materials = \"aluminium,不锈钢\"\n        Dim fso As Object\n        Set fso = CreateObject(\"Scripting.FileSystemObject\")\n        If fso.FileExists(excelPath) = False Then\n            excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\n            If fso.FileExists(excelPath) = False Then\n                    MsgBox \"Excel文件不存在: \" \u0026 excelPath\n                    Exit Sub\n            End If\n        End If\n        Dim partNumberTitle\n        partNumberTitle = \"Part number\"\n        Dim mapSearch\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")        \n        Dim expression\n        expression = materials\n        Dim strLen\n        strLen = Len(expression)\n        Dim splitPosition\n        splitPosition = 1\n        Dim exprChar\n        For i = 1 To strLen\n            exprChar = Mid(expression, i, 1)\n            If Mid(expression, i, 1) = \",\" Then\n                Dim mess\n                mess = Mid(expression, splitPosition, i - splitPosition)\n                splitPosition = i + 1\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\n            End If\n        Next\n        If splitPosition \u003c strLen Then\n            Dim mess2\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\n        End If\n    \n\n        Dim showPartNumber\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\n        Dim showChildComps As Object\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim transparencyChildComps As Object\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim ret As Integer\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\nEnd Sub\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\n        Dim rootDoc As ProductDocument\n        Set rootDoc = CATIA.ActiveDocument\n        If rootDoc Is Nothing Then\n            CATIALoopChildren = -2\n            Exit Function\n        End If\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\n            CATIALoopChildren = -3\n            Exit Function\n        End If\n        Dim rootProduct As Product\n        Set rootProduct = rootDoc.Product\n        Dim productChildren As Products\n        Set productChildren = rootProduct.Products\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\n        CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\n                \nEnd Function\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\n        Dim parentDoc As Document\n        Set parentDoc = productRoot.Parent\n        If parentDoc Is Nothing Then\n                ChangeCompState = -3\n                Exit Function\n        End If\n        Dim selectionNode As Selection\n        Set selectionNode = parentDoc.Selection\n        If selectionNode Is Nothing Then\n                ChangeCompState = -4\n                Exit Function\n"
    },
    {
        "instruction": "高亮显示[CR270LA]材质的组件, part number表格路径/home/aaron/excel_file.xlsx。",
        "input": "",
        "output": "Language=CATSCRIPT\n\nSub CATMain()\n        Dim excelPath\n        excelPath = \"/home/aaron/excel_file.xlsx\"\n        Dim materials\n        materials = \"[CR270LA]\"\n        Dim fso As Object\n        Set fso = CreateObject(\"Scripting.FileSystemObject\")\n        If fso.FileExists(excelPath) = False Then\n            excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\n            If fso.FileExists(excelPath) = False Then\n                    MsgBox \"Excel文件不存在: \" \u0026 excelPath\n                    Exit Sub\n            End If\n        End If\n        Dim partNumberTitle\n        partNumberTitle = \"Part number\"\n        Dim mapSearch\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")        \n        Dim expression\n        expression = materials\n        Dim strLen\n        strLen = Len(expression)\n        Dim splitPosition\n        splitPosition = 1\n        Dim exprChar\n        For i = 1 To strLen\n            exprChar = Mid(expression, i, 1)\n            If Mid(expression, i, 1) = \",\" Then\n                Dim mess\n                mess = Mid(expression, splitPosition, i - splitPosition)\n                splitPosition = i + 1\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\n            End If\n        Next\n        If splitPosition \u003c strLen Then\n            Dim mess2\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\n        End If\n    \n\n        Dim showPartNumber\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\n        Dim showChildComps As Object\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim transparencyChildComps As Object\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim ret As Integer\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\nEnd Sub\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\n        Dim rootDoc As ProductDocument\n        Set rootDoc = CATIA.ActiveDocument\n        If rootDoc Is Nothing Then\n            CATIALoopChildren = -2\n            Exit Function\n        End If\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\n            CATIALoopChildren = -3\n            Exit Function\n        End If\n        Dim rootProduct As Product\n        Set rootProduct = rootDoc.Product\n        Dim productChildren As Products\n        Set productChildren = rootProduct.Products\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\n        CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\n                \nEnd Function\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\n        Dim parentDoc As Document\n        Set parentDoc = productRoot.Parent\n        If parentDoc Is Nothing Then\n                ChangeCompState = -3\n                Exit Function\n        End If\n        Dim selectionNode As Selection\n        Set selectionNode = parentDoc.Selection\n        If selectionNode Is Nothing Then\n                ChangeCompState = -4\n                Exit Function\n"
    },
    {
        "instruction": "高亮显示~/excel_file.xlsx中[CR270LA]材质的组件。",
        "input": "",
        "output": "Language=CATSCRIPT\n\nSub CATMain()\n        Dim excelPath\n        excelPath = \"~/excel_file.xlsx\"\n        Dim materials\n        materials = \"[CR270LA]\"\n        Dim fso As Object\n        Set fso = CreateObject(\"Scripting.FileSystemObject\")\n        If fso.FileExists(excelPath) = False Then\n            excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\n            If fso.FileExists(excelPath) = False Then\n                    MsgBox \"Excel文件不存在: \" \u0026 excelPath\n                    Exit Sub\n            End If\n        End If\n        Dim partNumberTitle\n        partNumberTitle = \"Part number\"\n        Dim mapSearch\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")        \n        Dim expression\n        expression = materials\n        Dim strLen\n        strLen = Len(expression)\n        Dim splitPosition\n        splitPosition = 1\n        Dim exprChar\n        For i = 1 To strLen\n            exprChar = Mid(expression, i, 1)\n            If Mid(expression, i, 1) = \",\" Then\n                Dim mess\n                mess = Mid(expression, splitPosition, i - splitPosition)\n                splitPosition = i + 1\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\n            End If\n        Next\n        If splitPosition \u003c strLen Then\n            Dim mess2\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\n        End If\n    \n\n        Dim showPartNumber\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\n        Dim showChildComps As Object\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim transparencyChildComps As Object\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim ret As Integer\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\nEnd Sub\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\n        Dim rootDoc As ProductDocument\n        Set rootDoc = CATIA.ActiveDocument\n        If rootDoc Is Nothing Then\n            CATIALoopChildren = -2\n            Exit Function\n        End If\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\n            CATIALoopChildren = -3\n            Exit Function\n        End If\n        Dim rootProduct As Product\n        Set rootProduct = rootDoc.Product\n        Dim productChildren As Products\n        Set productChildren = rootProduct.Products\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\n        CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\n                \nEnd Function\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\n        Dim parentDoc As Document\n        Set parentDoc = productRoot.Parent\n        If parentDoc Is Nothing Then\n                ChangeCompState = -3\n                Exit Function\n        End If\n        Dim selectionNode As Selection\n        Set selectionNode = parentDoc.Selection\n        If selectionNode Is Nothing Then\n                ChangeCompState = -4\n                Exit Function\n"
    },
    {
        "instruction": "高亮显示[CR270LA]材质的组件, part number表格路径/home/aaron/excel_file.xlsx。",
        "input": "",
        "output": "Language=CATSCRIPT\n\nSub CATMain()\n        Dim excelPath\n        excelPath = \"/home/aaron/excel_file.xlsx\"\n        Dim materials\n        materials = \"[CR270LA]\"\n        Dim fso As Object\n        Set fso = CreateObject(\"Scripting.FileSystemObject\")\n        If fso.FileExists(excelPath) = False Then\n            excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\n            If fso.FileExists(excelPath) = False Then\n                    MsgBox \"Excel文件不存在: \" \u0026 excelPath\n                    Exit Sub\n            End If\n        End If\n        Dim partNumberTitle\n        partNumberTitle = \"Part number\"\n        Dim mapSearch\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")        \n        Dim expression\n        expression = materials\n        Dim strLen\n        strLen = Len(expression)\n        Dim splitPosition\n        splitPosition = 1\n        Dim exprChar\n        For i = 1 To strLen\n            exprChar = Mid(expression, i, 1)\n            If Mid(expression, i, 1) = \",\" Then\n                Dim mess\n                mess = Mid(expression, splitPosition, i - splitPosition)\n                splitPosition = i + 1\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\n            End If\n        Next\n        If splitPosition \u003c strLen Then\n            Dim mess2\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\n        End If\n    \n\n        Dim showPartNumber\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\n        Dim showChildComps As Object\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim transparencyChildComps As Object\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim ret As Integer\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\nEnd Sub\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\n        Dim rootDoc As ProductDocument\n        Set rootDoc = CATIA.ActiveDocument\n        If rootDoc Is Nothing Then\n            CATIALoopChildren = -2\n            Exit Function\n        End If\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\n            CATIALoopChildren = -3\n            Exit Function\n        End If\n        Dim rootProduct As Product\n        Set rootProduct = rootDoc.Product\n        Dim productChildren As Products\n        Set productChildren = rootProduct.Products\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\n        CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\n                \nEnd Function\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\n        Dim parentDoc As Document\n        Set parentDoc = productRoot.Parent\n        If parentDoc Is Nothing Then\n                ChangeCompState = -3\n                Exit Function\n        End If\n        Dim selectionNode As Selection\n        Set selectionNode = parentDoc.Selection\n        If selectionNode Is Nothing Then\n                ChangeCompState = -4\n                Exit Function\n"
    },
    {
        "instruction": "高亮显示~/excel_file.xlsx中[CR270LA]材质的组件。",
        "input": "",
        "output": "Language=CATSCRIPT\n\nSub CATMain()\n        Dim excelPath\n        excelPath = \"~/excel_file.xlsx\"\n        Dim materials\n        materials = \"[CR270LA]\"\n        Dim fso As Object\n        Set fso = CreateObject(\"Scripting.FileSystemObject\")\n        If fso.FileExists(excelPath) = False Then\n            excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\n            If fso.FileExists(excelPath) = False Then\n                    MsgBox \"Excel文件不存在: \" \u0026 excelPath\n                    Exit Sub\n            End If\n        End If\n        Dim partNumberTitle\n        partNumberTitle = \"Part number\"\n        Dim mapSearch\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")        \n        Dim expression\n        expression = materials\n        Dim strLen\n        strLen = Len(expression)\n        Dim splitPosition\n        splitPosition = 1\n        Dim exprChar\n        For i = 1 To strLen\n            exprChar = Mid(expression, i, 1)\n            If Mid(expression, i, 1) = \",\" Then\n                Dim mess\n                mess = Mid(expression, splitPosition, i - splitPosition)\n                splitPosition = i + 1\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\n            End If\n        Next\n        If splitPosition \u003c strLen Then\n            Dim mess2\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\n        End If\n    \n\n        Dim showPartNumber\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\n        Dim showChildComps As Object\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim transparencyChildComps As Object\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim ret As Integer\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\nEnd Sub\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\n        Dim rootDoc As ProductDocument\n        Set rootDoc = CATIA.ActiveDocument\n        If rootDoc Is Nothing Then\n            CATIALoopChildren = -2\n            Exit Function\n        End If\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\n            CATIALoopChildren = -3\n            Exit Function\n        End If\n        Dim rootProduct As Product\n        Set rootProduct = rootDoc.Product\n        Dim productChildren As Products\n        Set productChildren = rootProduct.Products\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\n        CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\n                \nEnd Function\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\n        Dim parentDoc As Document\n        Set parentDoc = productRoot.Parent\n        If parentDoc Is Nothing Then\n                ChangeCompState = -3\n                Exit Function\n        End If\n        Dim selectionNode As Selection\n        Set selectionNode = parentDoc.Selection\n        If selectionNode Is Nothing Then\n                ChangeCompState = -4\n                Exit Function\n"
    },
    {
        "instruction": "高亮显示CR240*材质的组件, part number表格路径D:\\Documents\\catiaVB\\TB.xlsx。",
        "input": "",
        "output": "Language=CATSCRIPT\n\nSub CATMain()\n        Dim excelPath\n        excelPath = \"D:\\Documents\\catiaVB\\TB.xlsx\"\n        Dim materials\n        materials = \"CR240*\"\n        Dim fso As Object\n        Set fso = CreateObject(\"Scripting.FileSystemObject\")\n        If fso.FileExists(excelPath) = False Then\n            excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\n            If fso.FileExists(excelPath) = False Then\n                    MsgBox \"Excel文件不存在: \" \u0026 excelPath\n                    Exit Sub\n            End If\n        End If\n        Dim partNumberTitle\n        partNumberTitle = \"Part number\"\n        Dim mapSearch\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")        \n        Dim expression\n        expression = materials\n        Dim strLen\n        strLen = Len(expression)\n        Dim splitPosition\n        splitPosition = 1\n        Dim exprChar\n        For i = 1 To strLen\n            exprChar = Mid(expression, i, 1)\n            If Mid(expression, i, 1) = \",\" Then\n                Dim mess\n                mess = Mid(expression, splitPosition, i - splitPosition)\n                splitPosition = i + 1\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\n            End If\n        Next\n        If splitPosition \u003c strLen Then\n            Dim mess2\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\n        End If\n    \n\n        Dim showPartNumber\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\n        Dim showChildComps As Object\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim transparencyChildComps As Object\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\n        Dim ret As Integer\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\nEnd Sub\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\n        Dim rootDoc As ProductDocument\n        Set rootDoc = CATIA.ActiveDocument\n        If rootDoc Is Nothing Then\n            CATIALoopChildren = -2\n            Exit Function\n        End If\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\n            CATIALoopChildren = -3\n            Exit Function\n        End If\n        Dim rootProduct As Product\n        Set rootProduct = rootDoc.Product\n        Dim productChildren As Products\n        Set productChildren = rootProduct.Products\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\n        CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\n                \nEnd Function\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\n        Dim parentDoc As Document\n        Set parentDoc = productRoot.Parent\n        If parentDoc Is Nothing Then\n                ChangeCompState = -3\n                Exit Function\n        End If\n        Dim selectionNode As Selection\n        Set selectionNode = parentDoc.Selection\n        If selectionNode Is Nothing Then\n                ChangeCompState = -4\n                Exit Function\n"
    }
]