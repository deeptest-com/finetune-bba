[
    {
        "instruction": "陈琦儿子是谁？",
        "input": "",
        "output": "陈蔚然"
    },
    {
        "instruction": "高亮显示~/excel_file.xlsx中aluminium,不锈钢材质的组件。",
        "input": "",
        "output": "Language=CATSCRIPT\\n\\n'test main run\\nSub CATMain()\\n\\n        Dim excelPath = \"~/excel_file.xlsx\" \\n        Dim materials = \"aluminium,不锈钢\" \\n        \\n        Dim materialNames() As String = StrToArr materials\\n        \\n        ' 不支持Dir\\n        ' 检查文件是否存在\\n        'MsgBox \"FileExists: \" \u0026 fso.FileExists(excelPath)\\n        If fso.FileExists(excelPath) = False Then\\n        'MsgBox \"Excel文件不存在: \" \u0026 excelPath\\n                excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\\n                If fso.FileExists(excelPath) = False Then\\n                        MsgBox \"Excel文件不存在: \" \u0026 excelPath\\n                        Exit Sub\\n                End If\\n        End If\\n        Dim partNumberTitle\\n        partNumberTitle = \"Part number\"\\n        ' 创建一个 Dictionary 对象\\n        ' 创建 Scripting.Dictionary 对象\\n        Dim mapSearch\\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")\\n        'Dim mapSearch As New Collection\\n        'AddToMapValueList mapSearch, \"MaterialName\", \"CR240*\"\\n        'AddToMapValueList mapSearch, \"MaterialName\", \"*CR270LA*\"\\n        \\n        Dim expression\\n        expression = materials\\n        Dim strLen\\n        strLen = Len(expression)\\n        Dim splitPosition\\n        splitPosition = 1\\n        Dim exprChar\\n        For i = 1 To strLen\\n            exprChar = Mid(expression, i, 1)\\n            If Mid(expression, i, 1) = \",\" Then\\n                Dim mess\\n                mess = Mid(expression, splitPosition, i - splitPosition)\\n                splitPosition = i + 1\\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\\n            End If\\n        Next\\n        If splitPosition \u003c strLen Then\\n            Dim mess2\\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\\n        End If\\n    \\n\\n        Dim showPartNumber\\n        'showPartNumber.Add key:=\"test\", item:=\"test\"\\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\\n        'Set showPartNumber = New Collection\\n        'Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\\n        'MsgBox (\"CompareConditionCheck: \" \u0026 CompareConditionCheck(\"[CR270LA]\", \"CR240*\"))\\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\\n\\n        '---------------------------------------------------------------------------------\\n        'loop children\\n        Dim showChildComps As Object\\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\\n        'add root Document\\n        'childComps.Add item:=rootProduct.Name, key:=rootProduct.Name\\n        Dim transparencyChildComps As Object\\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\\n        Dim ret As Integer\\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\\nEnd Sub\\n\\n'getting all children products and set show or hide, and set Opacity\\n'Input: partNames: part number list\\n'       showChildComps: conform to part number, set show and no Opacity\\n'       transparencyChildComps: not conform to part number, set Opacity\\n'Return: 0 ok, other error\\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\\n        '使用catiaApp调用COM接口的方法\\n        Dim rootDoc As ProductDocument\\n        Set rootDoc = CATIA.ActiveDocument\\n        If rootDoc Is Nothing Then\\n            'ConcatMessagesStrings True, \"Can not get active document!\"\\n            CATIALoopChildren = -2\\n            Exit Function\\n        End If\\n\\n        'ConcatMessagesStrings False, \"active document:\", rootDoc.FullName\\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\\n            'ConcatMessagesStrings True, \"current document is not a assembly!\"\\n            CATIALoopChildren = -3\\n            Exit Function\\n        End If\\n\\n        'Dim ret As Integer\\n        'Product\\n        Dim rootProduct As Product\\n        Set rootProduct = rootDoc.Product\\n        Dim productChildren As Products\\n        Set productChildren = rootProduct.Products\\n        \\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\\n                \\n                CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\\n                \\nEnd Function\\n\\n'change products show or hide, and set Opacity\\n'Input: productRoot: root product\\n'       productNodes: select component list\\n'       isShow: \u003c0 not change, 0 show, 1 hide\\n'       isTransparency:\u003c0 no Transparency, 0~100 set Transparency(0~100)\\n'Return: 0 ok, other error\\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\\n        'CATIA.ActiveDocument.Selection.Search (\"Sketcher.AbsoluteAxis,all\")\\n        'CATIA.ActiveDocument.Selection.VisProperties.SetShow\\n        Dim parentDoc As Document\\n        Set parentDoc = productRoot.Parent\\n        If parentDoc Is Nothing Then\\n                ChangeCompState = -3\\n                Exit Function\\n        End If\\n                        \\n        Dim selectionNode As Selection\\n        Set selectionNode = parentDoc.Selection\\n        If selectionNode Is Nothing Then\\n                ChangeCompState = -4\\n                Exit Function\\n        End If\\n\\n        Dim visProp As visPropertySet\\n        Set visProp = selectionNode.VisProperties\\n        If visProp Is Nothing Then\\n                ChangeCompState = -5\\n                Exit Function\\n        End If\\n\\n        Dim productNode As Variant\\n        For Each productNode In productNodes\\n                selectionNode.Add productNode\\n        Next\\n\\n        Set visProp = visProp.Parent\\n        If visProp Is Nothing Then\\n                ChangeCompState = -6\\n                Exit Function\\n        End If\\n        \\n        'CatVisPropertyShow.catVisPropertyNoShowAttr    1\\n    'CatVisPropertyShow.catVisPropertyShowAttr      0\\n    If isShow \u003c 0 Then\\n        Dim showState As CatVisPropertyShow\\n        visProp.GetShow showState\\n        If showState \u003c\u003e isShow Then\\n            visProp.SetShow isShow\\n        End If\\n    End If\\n        \\n        If isTransparency \u003c 0 Then\\n        visProp.SetVisibleOpacity 100, 0\\n    Else\\n        visProp.SetVisibleOpacity isTransparency, 1\\n    End If\\n        selectionNode.Clear\\n        ChangeCompState = 0\\nEnd Function\\n\\n'recursive in getting all children products\\n'Input: productRoot: root product\\n'       productNode: current component product\\n'       partNames: part number list\\n'       showChildComps: conform to part number, set show and no Opacity\\n'       transparencyChildComps: not conform to part number, set Opacity\\n'       parentIsOk: parent product is conform to part number\\n'Return: 0 ok, other error\\nFunction GetChildren(ByRef productRoot As Product, ByRef productNode As Product, ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object, ByVal parentIsOk As Boolean) As Integer\\n    'Get children products as array\\n    Dim productsArr As Products\\n        Set productsArr = productNode.Products\\n        If productsArr Is Nothing Then\\n                GetChildren = -2\\n                Exit Function\\n        End If\\n        Dim returnVisable As Integer\\n        returnVisable = 0\\n        '0 default\\n        '1 all hide\\n        '2 all show\\n        '3 hide\\show\\n        Dim searchedID\\n        Set searchedID = CreateObject(\"Scripting.Dictionary\")\\n\\n        'On Error Resume Next\\n        For i = 1 To productsArr.Count\\n                'Get child\\n                Dim pdtChild As Product\\n                Set pdtChild = productsArr.item(i)\\n                'MsgBox \"now:\" \u0026 pdtChild.Name\\n                If parentIsOk Then\\n                        showChildComps.Add pdtChild\\n                        returnVisable = 2\\n                Else\\n                        Dim currentNodeIsSearched As Boolean\\n                        currentNodeIsSearched = CheckPartNumberIsInput(pdtChild, partNames)\\n                        'ret = ConcatMessagesStrings(True, pdtChild.PartNumber, ret, TypeName(pdtChild))\\n                        'If currentNodeIsSearched Then\\n                        '    searchedID.add(i, i)\\n                        '    parentIsOk = True\\n                        'End If\\n                        'check children-children\\n                        Dim ret As Integer\\n                        ret = 0\\n                        If CheckReferenceIsProductByDocType(pdtChild) Then\\n                                ret = GetChildren(productRoot, pdtChild, partNames, showChildComps, transparencyChildComps, currentNodeIsSearched)\\n                        End If\\n                        If ret \u003e 1 Or currentNodeIsSearched Then\\n                                searchedID.Add i, i\\n                                showChildComps.Add pdtChild\\n                                returnVisable = 2\\n                        End If\\n                End If\\n        Next\\n\\n    If returnVisable \u003c\u003e 0 Then\\n        For i = 1 To productsArr.Count\\n            If Not searchedID.Exists(i) Then\\n                transparencyChildComps.Add productsArr.item(i)\\n            End If\\n        Next\\n    End If\\n\\n    Set productsArr = Nothing\\n\\n    GetChildren = returnVisable\\n\\nEnd Function\\n\\n'Check Reference Product type\\n'Input:  Product component\\n'Return: CATProduct true, other false\\nFunction CheckReferenceIsProductByDocType(ByRef productNode As Product) As Boolean\\n    CheckReferenceIsProductByDocType = False\\n    'Retrieve the reference product\\n    Dim refpdt As Product\\n    Set refpdt = productNode.ReferenceProduct\\n    \\n    If Not refpdt Is Nothing Then\\n        Dim parentObj As CATBaseDispatch\\n        Set parentObj = refpdt.Parent\\n        \\n        'MsgBox (\"TypeName:\" \u0026 TypeName(parentObj))\\n        If StrComp(TypeName(parentObj), \"ProductDocument\", vbTextCompare) = 0 Then\\n            'CATPart CATProduct\\n            CheckReferenceIsProductByDocType = True\\n        End If\\n        Set parentObj = Nothing\\n        \\n    End If\\n    Set refpdt = Nothing\\n        \\nEnd Function\\n\\n'Check PartNumber Is same as Input\\n'Input: productNode: current component product\\n'       partNames: part number list\\n'Return: True, False\\nFunction CheckPartNumberIsInput(ByRef productNode As Product, ByRef partNames As Object) As Boolean\\n    'test\\n    'CheckPartNumberIsInput = True\\n    'Exit Function\\n    CheckPartNumberIsInput = False\\n        Dim pNumStr As String\\n        'MsgBox productNode.Name\\n        pNumStr = productNode.PartNumber\\n    Dim itemStrReduce As String\\n    Dim item As Variant\\n    For Each item In partNames\\n                itemStr = item\\n                itemStrReduce = Left(pNumStr,Len(itemStr))\\n        If itemStrReduce = itemStr Then\\n            CheckPartNumberIsInput = True\\n            Exit Function\\n        End If\\n    Next\\nEnd Function\\n\\n'---------------------------------------------------------------------------------------------------------\\n'recursive in getting all children products\\n'Input: showPartNumber: get part number in excel\\n'       inputSearch: intput conditions\\n'       excelPath: excel Path\\n'       partNumberTitle: partNumber Title in excel table head\\n'Return: 0 ok, other error\\nFunction ReadExcel(ByRef showPartNumber As Object, inputSearch As Object, excelPath As String, partNumberTitle As String)\\n        ' 创建 Excel 应用程序对象\\n        Dim ExcelApp\\n        Set ExcelApp = CreateObject(\"Excel.Application\")\\n        ' 设置 Excel 应用程序可见\\n        ExcelApp.Visible = False\\n        ' 禁用 Excel 的警告和确认对话框\\n        ExcelApp.DisplayAlerts = False\\n        ' 打开 Excel 文件\\n        Dim Workbook\\n        Set Workbook = ExcelApp.Workbooks.Open(excelPath)\\n        ' 选择工作表\\n        Dim Sheets\\n        Set Sheets = Workbook.Sheets\\n        Dim Sheet\\n        Set Sheet = Workbook.Sheets(1)\\n        ' 输出工作表名称\\n        'MsgBox(\"工作表名称: \" \u0026 Sheet.Name)\\n\\n        '获取表头\\n        Dim allRows, allCols\\n        allRows = Sheet.UsedRange.Rows.Count\\n        allCols = Sheet.UsedRange.Columns.Count\\n        Dim row, col\\n        '获取PartNumber表头colum\\n        Dim PartNumberCol\\n        PartNumberCol = 0\\n        For col = 1 To allCols\\n                Dim CellValue\\n                CellValue = Sheet.cells(1, col).value\\n                If CellValue = partNumberTitle Then\\n                        PartNumberCol = col\\n                        Exit For\\n                End If\\n        Next\\n        'MsgBox(\"Part number column: \" \u0026 PartNumberCol)\\n\\n        'check value\\n        If PartNumberCol \u003c\u003e 0 Then\\n                For col = 1 To allCols\\n                        Dim CellTitle\\n                        CellTitle = Sheet.cells(1, col).value\\n                        Dim listCheck As Object\\n                        Set listCheck = GetMapList(inputSearch, CellTitle)\\n                        If Not listCheck Is Nothing Then\\n                                For row = 2 To allRows\\n                                        If Not Sheet.cells(row, col) Is Nothing Then\\n                                                Dim CellValue2 As String\\n                                                CellValue2 = Sheet.cells(row, col).value\\n\\n                                                For Each item In listCheck\\n                                                        'MsgBox(\"CellValue: \" \u0026 CellValue \u0026 \" item: \" \u0026 item)\\n                                                        Dim ret\\n                                                        'ret = True\\n                                                        'ret = CompareConditionCheck(CellValue2, item)\\n                                                        \\n                                                        'CATScript can not identify 'Like' key word\\n                                                        If CustomLikeAddAnyToPattern(CellValue2, item, True, True) Then\\n                                                                ret = True\\n                                                        Else\\n                                                                ret = False\\n                                                        End If\\n\\n                                                        If ret Then\\n                                                                Dim pNumber\\n                                                                pNumber = Sheet.cells(row, PartNumberCol).value\\n                                                                'MsgBox (\"Find Condition 行: \" \u0026 row \u0026 \", 列: \" \u0026 col \u0026 \", 值: \" \u0026 CellValue2 \u0026\",\\r\\n Find Part number: \" \u0026 pNumber)\\n                                                                AddToMap showPartNumber, pNumber, pNumber\\n                                                                Exit For\\n                                                        End If\\n\\n                                                Next\\n\\n                                        End If\\n                                Next\\n                        End If\\n                Next\\n        Else\\n                MsgBox(\"Can not find Part number in Excel!\")\\n        End If\\n        ' 释放对象\\n        Set Sheet = Nothing\\n        Set Sheets = Nothing\\n         ' 关闭 Excel 文件\\n        Workbook.Close(False)\\n        Set Workbook = Nothing\\n        ExcelApp.Quit\\n        Set ExcelApp = Nothing\\n        ' 清除 COM 对象\\n        'Call ReleaseCOMObjects\\n        ReadExcel = 0\\nEnd Function\\n\\n'------------------------------------------------------------------------------------------------------\\n'is add Asterisk in pattern\\n'Input: expression: expression string in excel\\n'       pattern: intput conditions pattern\\n'       preAsterisk: is add prefix Asterisk\\n'       sufAsterisk: is add suffix Asterisk\\n'Return: True, False\\nFunction CustomLikeAddAnyToPattern(expression As String, pattern As String, preAsterisk As Boolean, sufAsterisk As Boolean) As Boolean\\n        Dim valReg As String\\n        valReg = pattern\\n        If preAsterisk Then\\n                valReg = \"*\" \u0026 valReg\\n        End If\\n        If sufAsterisk Then\\n                valReg = valReg \u0026 \"*\"\\n        End If\\n        'MsgBox \"CellValue2:\" \u0026 CellValue2 \u0026 \" valReg:\" \u0026 valReg\\n        CustomLikeAddAnyToPattern = CustomLike(expression, valReg)\\nEnd Function\\n\\n'Custom VB Like Function, fuzzy search string\\n'Input: expression: expression string in excel\\n'       pattern: intput conditions pattern\\n'Return: True, False\\nFunction CustomLike(expression As String, pattern As String) As Boolean\\n        Dim i As Long, j As Long\\n        Dim exprLen As Long, patLen As Long\\n        Dim exprChar As String, patChar As String\\n        Dim exprPos As Long, patPos As Long\\n        Dim starPos As Long, exprStarPos As Long\\n\\n        exprLen = Len(expression)\\n        patLen = Len(pattern)\\n        exprPos = 1\\n        patPos = 1\\n        starPos = 0\\n        exprStarPos = 0\\n\\n        While exprPos \u003c= exprLen And patPos \u003c= patLen\\n                If patPos \u003c= patLen Then\\n                        patChar = Mid(pattern, patPos, 1)\\n                Else\\n                        patChar = \"\"\\n                End If\\n\\n                If exprPos \u003c= exprLen Then\\n                        exprChar = Mid(expression, exprPos, 1)\\n                Else\\n                        exprChar = \"\"\\n                End If\\n\\n                Select Case patChar\\n                        Case \"?\"\\n                                If exprChar = \"\" Then\\n                                        CustomLike = False\\n                                        Exit Function\\n                                End If\\n                                exprPos = exprPos + 1\\n                                patPos = patPos + 1\\n                        Case \"[\"\\n                                Dim charList As String, negated As Boolean\\n                                negated = False\\n                                patPos = patPos + 1\\n                                charList = \"\"\\n                                Do While patPos \u003c= patLen\\n                                        patChar = Mid(pattern, patPos, 1)\\n                                        If patChar = \"]\" Then\\n                                                patPos = patPos + 1\\n                                                Exit Do\\n                                        ElseIf patChar = \"^\" And Not negated Then\\n                                                negated = True\\n                                        Else\\n                                                charList = charList \u0026 patChar\\n                                        End If\\n                                        patPos = patPos + 1\\n                                Loop\\n                                If (negated And InStr(1, charList, exprChar, vbBinaryCompare) \u003e 0) Or (Not negated And InStr(1, charList, exprChar, vbBinaryCompare) = 0) Then\\n                                        CustomLike = False\\n                                        Exit Function\\n                                End If\\n                                exprPos = exprPos + 1\\n                        Case \"*\"\\n                                If patPos = patLen Then\\n                                        CustomLike = True\\n                                        Exit Function\\n                                End If\\n                                starPos = patPos\\n                                exprStarPos = exprPos\\n                                patPos = patPos + 1\\n                        Case Else\\n                                If exprChar \u003c\u003e patChar Then\\n                                        If starPos = 0 Then\\n                                                CustomLike = False\\n                                                Exit Function\\n                                        Else\\n                                                patPos = starPos + 1\\n                                                exprPos = exprStarPos + 1\\n                                                exprStarPos = exprPos\\n                                        End If\\n                                Else\\n                                        exprPos = exprPos + 1\\n                                        patPos = patPos + 1\\n                                End If\\n                End Select\\n        WEnd\\n\\n        If patPos = patLen Then\\n                CustomLike = True\\n        Else\\n                CustomLike = False\\n        End If\\nEnd Function\\n\\n'------------------------------------------------------------------------------------------------------        \\n' 创建一个函数来向 Map 中添加键值对\\nFunction AddToMapValueList(map, key, value)\\n        If Not map.Exists(key) Then\\n                ' 如果键不存在，则创建一个新的数组\\n                Dim newList\\n                Set newList = CreateObject(\"System.Collections.ArrayList\")\\n                newList.Add(value)\\n                map.Add key, newList\\n        Else\\n                ' 如果键已存在，则向现有列表中添加值\\n                Dim list\\n                Set list = map(key)\\n                list.Add(value)\\n        End If\\n        AddToMapValueList = 0\\nEnd Function\\n\\n' 创建一个函数来从 Map 中获取列表\\nFunction GetMapList(map, key)\\n        If map.Exists(key) Then\\n                Set GetMapList = map(key)\\n        Else\\n                Set GetMapList = Nothing\\n        End If\\nEnd Function\\n\\n'Map string, list\\nFunction AddToSet(ByRef collectMap As Collection, ByVal item As String) As Boolean\\n        If Not Contains(collectMap, item) Then\\n                collectMap.Add item, item\\n        End If\\n        AddToSet = True\\nEnd Function\\n\\nFunction AddToMap(ByRef collectMap As Collection, keyName As String, value As String) As Boolean\\n        If Not Contains(collectMap, keyName) Then\\n                collectMap.Add value, keyName\\n        End If\\n        AddToMap = True\\nEnd Function\\n\\nFunction Contains(ByRef collectMap As Collection, ByVal item As String) As Boolean\\n        On Error Resume Next\\n        collectMap.item(item)\\n        Contains = (Err.Number = 0)\\n        'On Error GoTo 0\\nEnd Function\\n\\nFunction RemoveFromSet(ByRef collectMap As Collection, ByVal item As String)\\n        If Contains(collectMap, item) Then\\n                collectMap.Remove item\\n        RemoveFromSet = 0\\n        Else\\n                RemoveFromSet = -1\\n        End If\\nEnd Function"
    },
    {
        "instruction": "高亮显示[CR270LA]材质的组件, part number表格路径/home/aaron/excel_file.xlsx。",
        "input": "",
        "output": "Language=CATSCRIPT\\n\\n'test main run\\nSub CATMain()\\n\\n        Dim excelPath = \"/home/aaron/excel_file.xlsx\" \\n        Dim materials = \"[CR270LA]\" \\n        \\n        Dim materialNames() As String = StrToArr materials\\n        \\n        ' 不支持Dir\\n        ' 检查文件是否存在\\n        'MsgBox \"FileExists: \" \u0026 fso.FileExists(excelPath)\\n        If fso.FileExists(excelPath) = False Then\\n        'MsgBox \"Excel文件不存在: \" \u0026 excelPath\\n                excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\\n                If fso.FileExists(excelPath) = False Then\\n                        MsgBox \"Excel文件不存在: \" \u0026 excelPath\\n                        Exit Sub\\n                End If\\n        End If\\n        Dim partNumberTitle\\n        partNumberTitle = \"Part number\"\\n        ' 创建一个 Dictionary 对象\\n        ' 创建 Scripting.Dictionary 对象\\n        Dim mapSearch\\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")\\n        'Dim mapSearch As New Collection\\n        'AddToMapValueList mapSearch, \"MaterialName\", \"CR240*\"\\n        'AddToMapValueList mapSearch, \"MaterialName\", \"*CR270LA*\"\\n        \\n        Dim expression\\n        expression = materials\\n        Dim strLen\\n        strLen = Len(expression)\\n        Dim splitPosition\\n        splitPosition = 1\\n        Dim exprChar\\n        For i = 1 To strLen\\n            exprChar = Mid(expression, i, 1)\\n            If Mid(expression, i, 1) = \",\" Then\\n                Dim mess\\n                mess = Mid(expression, splitPosition, i - splitPosition)\\n                splitPosition = i + 1\\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\\n            End If\\n        Next\\n        If splitPosition \u003c strLen Then\\n            Dim mess2\\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\\n        End If\\n    \\n\\n        Dim showPartNumber\\n        'showPartNumber.Add key:=\"test\", item:=\"test\"\\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\\n        'Set showPartNumber = New Collection\\n        'Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\\n        'MsgBox (\"CompareConditionCheck: \" \u0026 CompareConditionCheck(\"[CR270LA]\", \"CR240*\"))\\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\\n\\n        '---------------------------------------------------------------------------------\\n        'loop children\\n        Dim showChildComps As Object\\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\\n        'add root Document\\n        'childComps.Add item:=rootProduct.Name, key:=rootProduct.Name\\n        Dim transparencyChildComps As Object\\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\\n        Dim ret As Integer\\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\\nEnd Sub\\n\\n'getting all children products and set show or hide, and set Opacity\\n'Input: partNames: part number list\\n'       showChildComps: conform to part number, set show and no Opacity\\n'       transparencyChildComps: not conform to part number, set Opacity\\n'Return: 0 ok, other error\\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\\n        '使用catiaApp调用COM接口的方法\\n        Dim rootDoc As ProductDocument\\n        Set rootDoc = CATIA.ActiveDocument\\n        If rootDoc Is Nothing Then\\n            'ConcatMessagesStrings True, \"Can not get active document!\"\\n            CATIALoopChildren = -2\\n            Exit Function\\n        End If\\n\\n        'ConcatMessagesStrings False, \"active document:\", rootDoc.FullName\\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\\n            'ConcatMessagesStrings True, \"current document is not a assembly!\"\\n            CATIALoopChildren = -3\\n            Exit Function\\n        End If\\n\\n        'Dim ret As Integer\\n        'Product\\n        Dim rootProduct As Product\\n        Set rootProduct = rootDoc.Product\\n        Dim productChildren As Products\\n        Set productChildren = rootProduct.Products\\n        \\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\\n                \\n                CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\\n                \\nEnd Function\\n\\n'change products show or hide, and set Opacity\\n'Input: productRoot: root product\\n'       productNodes: select component list\\n'       isShow: \u003c0 not change, 0 show, 1 hide\\n'       isTransparency:\u003c0 no Transparency, 0~100 set Transparency(0~100)\\n'Return: 0 ok, other error\\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\\n        'CATIA.ActiveDocument.Selection.Search (\"Sketcher.AbsoluteAxis,all\")\\n        'CATIA.ActiveDocument.Selection.VisProperties.SetShow\\n        Dim parentDoc As Document\\n        Set parentDoc = productRoot.Parent\\n        If parentDoc Is Nothing Then\\n                ChangeCompState = -3\\n                Exit Function\\n        End If\\n                        \\n        Dim selectionNode As Selection\\n        Set selectionNode = parentDoc.Selection\\n        If selectionNode Is Nothing Then\\n                ChangeCompState = -4\\n                Exit Function\\n        End If\\n\\n        Dim visProp As visPropertySet\\n        Set visProp = selectionNode.VisProperties\\n        If visProp Is Nothing Then\\n                ChangeCompState = -5\\n                Exit Function\\n        End If\\n\\n        Dim productNode As Variant\\n        For Each productNode In productNodes\\n                selectionNode.Add productNode\\n        Next\\n\\n        Set visProp = visProp.Parent\\n        If visProp Is Nothing Then\\n                ChangeCompState = -6\\n                Exit Function\\n        End If\\n        \\n        'CatVisPropertyShow.catVisPropertyNoShowAttr    1\\n    'CatVisPropertyShow.catVisPropertyShowAttr      0\\n    If isShow \u003c 0 Then\\n        Dim showState As CatVisPropertyShow\\n        visProp.GetShow showState\\n        If showState \u003c\u003e isShow Then\\n            visProp.SetShow isShow\\n        End If\\n    End If\\n        \\n        If isTransparency \u003c 0 Then\\n        visProp.SetVisibleOpacity 100, 0\\n    Else\\n        visProp.SetVisibleOpacity isTransparency, 1\\n    End If\\n        selectionNode.Clear\\n        ChangeCompState = 0\\nEnd Function\\n\\n'recursive in getting all children products\\n'Input: productRoot: root product\\n'       productNode: current component product\\n'       partNames: part number list\\n'       showChildComps: conform to part number, set show and no Opacity\\n'       transparencyChildComps: not conform to part number, set Opacity\\n'       parentIsOk: parent product is conform to part number\\n'Return: 0 ok, other error\\nFunction GetChildren(ByRef productRoot As Product, ByRef productNode As Product, ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object, ByVal parentIsOk As Boolean) As Integer\\n    'Get children products as array\\n    Dim productsArr As Products\\n        Set productsArr = productNode.Products\\n        If productsArr Is Nothing Then\\n                GetChildren = -2\\n                Exit Function\\n        End If\\n        Dim returnVisable As Integer\\n        returnVisable = 0\\n        '0 default\\n        '1 all hide\\n        '2 all show\\n        '3 hide\\show\\n        Dim searchedID\\n        Set searchedID = CreateObject(\"Scripting.Dictionary\")\\n\\n        'On Error Resume Next\\n        For i = 1 To productsArr.Count\\n                'Get child\\n                Dim pdtChild As Product\\n                Set pdtChild = productsArr.item(i)\\n                'MsgBox \"now:\" \u0026 pdtChild.Name\\n                If parentIsOk Then\\n                        showChildComps.Add pdtChild\\n                        returnVisable = 2\\n                Else\\n                        Dim currentNodeIsSearched As Boolean\\n                        currentNodeIsSearched = CheckPartNumberIsInput(pdtChild, partNames)\\n                        'ret = ConcatMessagesStrings(True, pdtChild.PartNumber, ret, TypeName(pdtChild))\\n                        'If currentNodeIsSearched Then\\n                        '    searchedID.add(i, i)\\n                        '    parentIsOk = True\\n                        'End If\\n                        'check children-children\\n                        Dim ret As Integer\\n                        ret = 0\\n                        If CheckReferenceIsProductByDocType(pdtChild) Then\\n                                ret = GetChildren(productRoot, pdtChild, partNames, showChildComps, transparencyChildComps, currentNodeIsSearched)\\n                        End If\\n                        If ret \u003e 1 Or currentNodeIsSearched Then\\n                                searchedID.Add i, i\\n                                showChildComps.Add pdtChild\\n                                returnVisable = 2\\n                        End If\\n                End If\\n        Next\\n\\n    If returnVisable \u003c\u003e 0 Then\\n        For i = 1 To productsArr.Count\\n            If Not searchedID.Exists(i) Then\\n                transparencyChildComps.Add productsArr.item(i)\\n            End If\\n        Next\\n    End If\\n\\n    Set productsArr = Nothing\\n\\n    GetChildren = returnVisable\\n\\nEnd Function\\n\\n'Check Reference Product type\\n'Input:  Product component\\n'Return: CATProduct true, other false\\nFunction CheckReferenceIsProductByDocType(ByRef productNode As Product) As Boolean\\n    CheckReferenceIsProductByDocType = False\\n    'Retrieve the reference product\\n    Dim refpdt As Product\\n    Set refpdt = productNode.ReferenceProduct\\n    \\n    If Not refpdt Is Nothing Then\\n        Dim parentObj As CATBaseDispatch\\n        Set parentObj = refpdt.Parent\\n        \\n        'MsgBox (\"TypeName:\" \u0026 TypeName(parentObj))\\n        If StrComp(TypeName(parentObj), \"ProductDocument\", vbTextCompare) = 0 Then\\n            'CATPart CATProduct\\n            CheckReferenceIsProductByDocType = True\\n        End If\\n        Set parentObj = Nothing\\n        \\n    End If\\n    Set refpdt = Nothing\\n        \\nEnd Function\\n\\n'Check PartNumber Is same as Input\\n'Input: productNode: current component product\\n'       partNames: part number list\\n'Return: True, False\\nFunction CheckPartNumberIsInput(ByRef productNode As Product, ByRef partNames As Object) As Boolean\\n    'test\\n    'CheckPartNumberIsInput = True\\n    'Exit Function\\n    CheckPartNumberIsInput = False\\n        Dim pNumStr As String\\n        'MsgBox productNode.Name\\n        pNumStr = productNode.PartNumber\\n    Dim itemStrReduce As String\\n    Dim item As Variant\\n    For Each item In partNames\\n                itemStr = item\\n                itemStrReduce = Left(pNumStr,Len(itemStr))\\n        If itemStrReduce = itemStr Then\\n            CheckPartNumberIsInput = True\\n            Exit Function\\n        End If\\n    Next\\nEnd Function\\n\\n'---------------------------------------------------------------------------------------------------------\\n'recursive in getting all children products\\n'Input: showPartNumber: get part number in excel\\n'       inputSearch: intput conditions\\n'       excelPath: excel Path\\n'       partNumberTitle: partNumber Title in excel table head\\n'Return: 0 ok, other error\\nFunction ReadExcel(ByRef showPartNumber As Object, inputSearch As Object, excelPath As String, partNumberTitle As String)\\n        ' 创建 Excel 应用程序对象\\n        Dim ExcelApp\\n        Set ExcelApp = CreateObject(\"Excel.Application\")\\n        ' 设置 Excel 应用程序可见\\n        ExcelApp.Visible = False\\n        ' 禁用 Excel 的警告和确认对话框\\n        ExcelApp.DisplayAlerts = False\\n        ' 打开 Excel 文件\\n        Dim Workbook\\n        Set Workbook = ExcelApp.Workbooks.Open(excelPath)\\n        ' 选择工作表\\n        Dim Sheets\\n        Set Sheets = Workbook.Sheets\\n        Dim Sheet\\n        Set Sheet = Workbook.Sheets(1)\\n        ' 输出工作表名称\\n        'MsgBox(\"工作表名称: \" \u0026 Sheet.Name)\\n\\n        '获取表头\\n        Dim allRows, allCols\\n        allRows = Sheet.UsedRange.Rows.Count\\n        allCols = Sheet.UsedRange.Columns.Count\\n        Dim row, col\\n        '获取PartNumber表头colum\\n        Dim PartNumberCol\\n        PartNumberCol = 0\\n        For col = 1 To allCols\\n                Dim CellValue\\n                CellValue = Sheet.cells(1, col).value\\n                If CellValue = partNumberTitle Then\\n                        PartNumberCol = col\\n                        Exit For\\n                End If\\n        Next\\n        'MsgBox(\"Part number column: \" \u0026 PartNumberCol)\\n\\n        'check value\\n        If PartNumberCol \u003c\u003e 0 Then\\n                For col = 1 To allCols\\n                        Dim CellTitle\\n                        CellTitle = Sheet.cells(1, col).value\\n                        Dim listCheck As Object\\n                        Set listCheck = GetMapList(inputSearch, CellTitle)\\n                        If Not listCheck Is Nothing Then\\n                                For row = 2 To allRows\\n                                        If Not Sheet.cells(row, col) Is Nothing Then\\n                                                Dim CellValue2 As String\\n                                                CellValue2 = Sheet.cells(row, col).value\\n\\n                                                For Each item In listCheck\\n                                                        'MsgBox(\"CellValue: \" \u0026 CellValue \u0026 \" item: \" \u0026 item)\\n                                                        Dim ret\\n                                                        'ret = True\\n                                                        'ret = CompareConditionCheck(CellValue2, item)\\n                                                        \\n                                                        'CATScript can not identify 'Like' key word\\n                                                        If CustomLikeAddAnyToPattern(CellValue2, item, True, True) Then\\n                                                                ret = True\\n                                                        Else\\n                                                                ret = False\\n                                                        End If\\n\\n                                                        If ret Then\\n                                                                Dim pNumber\\n                                                                pNumber = Sheet.cells(row, PartNumberCol).value\\n                                                                'MsgBox (\"Find Condition 行: \" \u0026 row \u0026 \", 列: \" \u0026 col \u0026 \", 值: \" \u0026 CellValue2 \u0026\",\\r\\n Find Part number: \" \u0026 pNumber)\\n                                                                AddToMap showPartNumber, pNumber, pNumber\\n                                                                Exit For\\n                                                        End If\\n\\n                                                Next\\n\\n                                        End If\\n                                Next\\n                        End If\\n                Next\\n        Else\\n                MsgBox(\"Can not find Part number in Excel!\")\\n        End If\\n        ' 释放对象\\n        Set Sheet = Nothing\\n        Set Sheets = Nothing\\n         ' 关闭 Excel 文件\\n        Workbook.Close(False)\\n        Set Workbook = Nothing\\n        ExcelApp.Quit\\n        Set ExcelApp = Nothing\\n        ' 清除 COM 对象\\n        'Call ReleaseCOMObjects\\n        ReadExcel = 0\\nEnd Function\\n\\n'------------------------------------------------------------------------------------------------------\\n'is add Asterisk in pattern\\n'Input: expression: expression string in excel\\n'       pattern: intput conditions pattern\\n'       preAsterisk: is add prefix Asterisk\\n'       sufAsterisk: is add suffix Asterisk\\n'Return: True, False\\nFunction CustomLikeAddAnyToPattern(expression As String, pattern As String, preAsterisk As Boolean, sufAsterisk As Boolean) As Boolean\\n        Dim valReg As String\\n        valReg = pattern\\n        If preAsterisk Then\\n                valReg = \"*\" \u0026 valReg\\n        End If\\n        If sufAsterisk Then\\n                valReg = valReg \u0026 \"*\"\\n        End If\\n        'MsgBox \"CellValue2:\" \u0026 CellValue2 \u0026 \" valReg:\" \u0026 valReg\\n        CustomLikeAddAnyToPattern = CustomLike(expression, valReg)\\nEnd Function\\n\\n'Custom VB Like Function, fuzzy search string\\n'Input: expression: expression string in excel\\n'       pattern: intput conditions pattern\\n'Return: True, False\\nFunction CustomLike(expression As String, pattern As String) As Boolean\\n        Dim i As Long, j As Long\\n        Dim exprLen As Long, patLen As Long\\n        Dim exprChar As String, patChar As String\\n        Dim exprPos As Long, patPos As Long\\n        Dim starPos As Long, exprStarPos As Long\\n\\n        exprLen = Len(expression)\\n        patLen = Len(pattern)\\n        exprPos = 1\\n        patPos = 1\\n        starPos = 0\\n        exprStarPos = 0\\n\\n        While exprPos \u003c= exprLen And patPos \u003c= patLen\\n                If patPos \u003c= patLen Then\\n                        patChar = Mid(pattern, patPos, 1)\\n                Else\\n                        patChar = \"\"\\n                End If\\n\\n                If exprPos \u003c= exprLen Then\\n                        exprChar = Mid(expression, exprPos, 1)\\n                Else\\n                        exprChar = \"\"\\n                End If\\n\\n                Select Case patChar\\n                        Case \"?\"\\n                                If exprChar = \"\" Then\\n                                        CustomLike = False\\n                                        Exit Function\\n                                End If\\n                                exprPos = exprPos + 1\\n                                patPos = patPos + 1\\n                        Case \"[\"\\n                                Dim charList As String, negated As Boolean\\n                                negated = False\\n                                patPos = patPos + 1\\n                                charList = \"\"\\n                                Do While patPos \u003c= patLen\\n                                        patChar = Mid(pattern, patPos, 1)\\n                                        If patChar = \"]\" Then\\n                                                patPos = patPos + 1\\n                                                Exit Do\\n                                        ElseIf patChar = \"^\" And Not negated Then\\n                                                negated = True\\n                                        Else\\n                                                charList = charList \u0026 patChar\\n                                        End If\\n                                        patPos = patPos + 1\\n                                Loop\\n                                If (negated And InStr(1, charList, exprChar, vbBinaryCompare) \u003e 0) Or (Not negated And InStr(1, charList, exprChar, vbBinaryCompare) = 0) Then\\n                                        CustomLike = False\\n                                        Exit Function\\n                                End If\\n                                exprPos = exprPos + 1\\n                        Case \"*\"\\n                                If patPos = patLen Then\\n                                        CustomLike = True\\n                                        Exit Function\\n                                End If\\n                                starPos = patPos\\n                                exprStarPos = exprPos\\n                                patPos = patPos + 1\\n                        Case Else\\n                                If exprChar \u003c\u003e patChar Then\\n                                        If starPos = 0 Then\\n                                                CustomLike = False\\n                                                Exit Function\\n                                        Else\\n                                                patPos = starPos + 1\\n                                                exprPos = exprStarPos + 1\\n                                                exprStarPos = exprPos\\n                                        End If\\n                                Else\\n                                        exprPos = exprPos + 1\\n                                        patPos = patPos + 1\\n                                End If\\n                End Select\\n        WEnd\\n\\n        If patPos = patLen Then\\n                CustomLike = True\\n        Else\\n                CustomLike = False\\n        End If\\nEnd Function\\n\\n'------------------------------------------------------------------------------------------------------        \\n' 创建一个函数来向 Map 中添加键值对\\nFunction AddToMapValueList(map, key, value)\\n        If Not map.Exists(key) Then\\n                ' 如果键不存在，则创建一个新的数组\\n                Dim newList\\n                Set newList = CreateObject(\"System.Collections.ArrayList\")\\n                newList.Add(value)\\n                map.Add key, newList\\n        Else\\n                ' 如果键已存在，则向现有列表中添加值\\n                Dim list\\n                Set list = map(key)\\n                list.Add(value)\\n        End If\\n        AddToMapValueList = 0\\nEnd Function\\n\\n' 创建一个函数来从 Map 中获取列表\\nFunction GetMapList(map, key)\\n        If map.Exists(key) Then\\n                Set GetMapList = map(key)\\n        Else\\n                Set GetMapList = Nothing\\n        End If\\nEnd Function\\n\\n'Map string, list\\nFunction AddToSet(ByRef collectMap As Collection, ByVal item As String) As Boolean\\n        If Not Contains(collectMap, item) Then\\n                collectMap.Add item, item\\n        End If\\n        AddToSet = True\\nEnd Function\\n\\nFunction AddToMap(ByRef collectMap As Collection, keyName As String, value As String) As Boolean\\n        If Not Contains(collectMap, keyName) Then\\n                collectMap.Add value, keyName\\n        End If\\n        AddToMap = True\\nEnd Function\\n\\nFunction Contains(ByRef collectMap As Collection, ByVal item As String) As Boolean\\n        On Error Resume Next\\n        collectMap.item(item)\\n        Contains = (Err.Number = 0)\\n        'On Error GoTo 0\\nEnd Function\\n\\nFunction RemoveFromSet(ByRef collectMap As Collection, ByVal item As String)\\n        If Contains(collectMap, item) Then\\n                collectMap.Remove item\\n        RemoveFromSet = 0\\n        Else\\n                RemoveFromSet = -1\\n        End If\\nEnd Function"
    },
    {
        "instruction": "高亮显示~/excel.xlsx中CR240*材质的组件。",
        "input": "",
        "output": "Language=CATSCRIPT\\n\\n'test main run\\nSub CATMain()\\n\\n        Dim excelPath = \"~/excel.xlsx\" \\n        Dim materials = \"CR240*\" \\n        \\n        Dim materialNames() As String = StrToArr materials\\n        \\n        ' 不支持Dir\\n        ' 检查文件是否存在\\n        'MsgBox \"FileExists: \" \u0026 fso.FileExists(excelPath)\\n        If fso.FileExists(excelPath) = False Then\\n        'MsgBox \"Excel文件不存在: \" \u0026 excelPath\\n                excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\\n                If fso.FileExists(excelPath) = False Then\\n                        MsgBox \"Excel文件不存在: \" \u0026 excelPath\\n                        Exit Sub\\n                End If\\n        End If\\n        Dim partNumberTitle\\n        partNumberTitle = \"Part number\"\\n        ' 创建一个 Dictionary 对象\\n        ' 创建 Scripting.Dictionary 对象\\n        Dim mapSearch\\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")\\n        'Dim mapSearch As New Collection\\n        'AddToMapValueList mapSearch, \"MaterialName\", \"CR240*\"\\n        'AddToMapValueList mapSearch, \"MaterialName\", \"*CR270LA*\"\\n        \\n        Dim expression\\n        expression = materials\\n        Dim strLen\\n        strLen = Len(expression)\\n        Dim splitPosition\\n        splitPosition = 1\\n        Dim exprChar\\n        For i = 1 To strLen\\n            exprChar = Mid(expression, i, 1)\\n            If Mid(expression, i, 1) = \",\" Then\\n                Dim mess\\n                mess = Mid(expression, splitPosition, i - splitPosition)\\n                splitPosition = i + 1\\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\\n            End If\\n        Next\\n        If splitPosition \u003c strLen Then\\n            Dim mess2\\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\\n        End If\\n    \\n\\n        Dim showPartNumber\\n        'showPartNumber.Add key:=\"test\", item:=\"test\"\\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\\n        'Set showPartNumber = New Collection\\n        'Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\\n        'MsgBox (\"CompareConditionCheck: \" \u0026 CompareConditionCheck(\"[CR270LA]\", \"CR240*\"))\\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\\n\\n        '---------------------------------------------------------------------------------\\n        'loop children\\n        Dim showChildComps As Object\\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\\n        'add root Document\\n        'childComps.Add item:=rootProduct.Name, key:=rootProduct.Name\\n        Dim transparencyChildComps As Object\\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\\n        Dim ret As Integer\\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\\nEnd Sub\\n\\n'getting all children products and set show or hide, and set Opacity\\n'Input: partNames: part number list\\n'       showChildComps: conform to part number, set show and no Opacity\\n'       transparencyChildComps: not conform to part number, set Opacity\\n'Return: 0 ok, other error\\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\\n        '使用catiaApp调用COM接口的方法\\n        Dim rootDoc As ProductDocument\\n        Set rootDoc = CATIA.ActiveDocument\\n        If rootDoc Is Nothing Then\\n            'ConcatMessagesStrings True, \"Can not get active document!\"\\n            CATIALoopChildren = -2\\n            Exit Function\\n        End If\\n\\n        'ConcatMessagesStrings False, \"active document:\", rootDoc.FullName\\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\\n            'ConcatMessagesStrings True, \"current document is not a assembly!\"\\n            CATIALoopChildren = -3\\n            Exit Function\\n        End If\\n\\n        'Dim ret As Integer\\n        'Product\\n        Dim rootProduct As Product\\n        Set rootProduct = rootDoc.Product\\n        Dim productChildren As Products\\n        Set productChildren = rootProduct.Products\\n        \\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\\n                \\n                CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\\n                \\nEnd Function\\n\\n'change products show or hide, and set Opacity\\n'Input: productRoot: root product\\n'       productNodes: select component list\\n'       isShow: \u003c0 not change, 0 show, 1 hide\\n'       isTransparency:\u003c0 no Transparency, 0~100 set Transparency(0~100)\\n'Return: 0 ok, other error\\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\\n        'CATIA.ActiveDocument.Selection.Search (\"Sketcher.AbsoluteAxis,all\")\\n        'CATIA.ActiveDocument.Selection.VisProperties.SetShow\\n        Dim parentDoc As Document\\n        Set parentDoc = productRoot.Parent\\n        If parentDoc Is Nothing Then\\n                ChangeCompState = -3\\n                Exit Function\\n        End If\\n                        \\n        Dim selectionNode As Selection\\n        Set selectionNode = parentDoc.Selection\\n        If selectionNode Is Nothing Then\\n                ChangeCompState = -4\\n                Exit Function\\n        End If\\n\\n        Dim visProp As visPropertySet\\n        Set visProp = selectionNode.VisProperties\\n        If visProp Is Nothing Then\\n                ChangeCompState = -5\\n                Exit Function\\n        End If\\n\\n        Dim productNode As Variant\\n        For Each productNode In productNodes\\n                selectionNode.Add productNode\\n        Next\\n\\n        Set visProp = visProp.Parent\\n        If visProp Is Nothing Then\\n                ChangeCompState = -6\\n                Exit Function\\n        End If\\n        \\n        'CatVisPropertyShow.catVisPropertyNoShowAttr    1\\n    'CatVisPropertyShow.catVisPropertyShowAttr      0\\n    If isShow \u003c 0 Then\\n        Dim showState As CatVisPropertyShow\\n        visProp.GetShow showState\\n        If showState \u003c\u003e isShow Then\\n            visProp.SetShow isShow\\n        End If\\n    End If\\n        \\n        If isTransparency \u003c 0 Then\\n        visProp.SetVisibleOpacity 100, 0\\n    Else\\n        visProp.SetVisibleOpacity isTransparency, 1\\n    End If\\n        selectionNode.Clear\\n        ChangeCompState = 0\\nEnd Function\\n\\n'recursive in getting all children products\\n'Input: productRoot: root product\\n'       productNode: current component product\\n'       partNames: part number list\\n'       showChildComps: conform to part number, set show and no Opacity\\n'       transparencyChildComps: not conform to part number, set Opacity\\n'       parentIsOk: parent product is conform to part number\\n'Return: 0 ok, other error\\nFunction GetChildren(ByRef productRoot As Product, ByRef productNode As Product, ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object, ByVal parentIsOk As Boolean) As Integer\\n    'Get children products as array\\n    Dim productsArr As Products\\n        Set productsArr = productNode.Products\\n        If productsArr Is Nothing Then\\n                GetChildren = -2\\n                Exit Function\\n        End If\\n        Dim returnVisable As Integer\\n        returnVisable = 0\\n        '0 default\\n        '1 all hide\\n        '2 all show\\n        '3 hide\\show\\n        Dim searchedID\\n        Set searchedID = CreateObject(\"Scripting.Dictionary\")\\n\\n        'On Error Resume Next\\n        For i = 1 To productsArr.Count\\n                'Get child\\n                Dim pdtChild As Product\\n                Set pdtChild = productsArr.item(i)\\n                'MsgBox \"now:\" \u0026 pdtChild.Name\\n                If parentIsOk Then\\n                        showChildComps.Add pdtChild\\n                        returnVisable = 2\\n                Else\\n                        Dim currentNodeIsSearched As Boolean\\n                        currentNodeIsSearched = CheckPartNumberIsInput(pdtChild, partNames)\\n                        'ret = ConcatMessagesStrings(True, pdtChild.PartNumber, ret, TypeName(pdtChild))\\n                        'If currentNodeIsSearched Then\\n                        '    searchedID.add(i, i)\\n                        '    parentIsOk = True\\n                        'End If\\n                        'check children-children\\n                        Dim ret As Integer\\n                        ret = 0\\n                        If CheckReferenceIsProductByDocType(pdtChild) Then\\n                                ret = GetChildren(productRoot, pdtChild, partNames, showChildComps, transparencyChildComps, currentNodeIsSearched)\\n                        End If\\n                        If ret \u003e 1 Or currentNodeIsSearched Then\\n                                searchedID.Add i, i\\n                                showChildComps.Add pdtChild\\n                                returnVisable = 2\\n                        End If\\n                End If\\n        Next\\n\\n    If returnVisable \u003c\u003e 0 Then\\n        For i = 1 To productsArr.Count\\n            If Not searchedID.Exists(i) Then\\n                transparencyChildComps.Add productsArr.item(i)\\n            End If\\n        Next\\n    End If\\n\\n    Set productsArr = Nothing\\n\\n    GetChildren = returnVisable\\n\\nEnd Function\\n\\n'Check Reference Product type\\n'Input:  Product component\\n'Return: CATProduct true, other false\\nFunction CheckReferenceIsProductByDocType(ByRef productNode As Product) As Boolean\\n    CheckReferenceIsProductByDocType = False\\n    'Retrieve the reference product\\n    Dim refpdt As Product\\n    Set refpdt = productNode.ReferenceProduct\\n    \\n    If Not refpdt Is Nothing Then\\n        Dim parentObj As CATBaseDispatch\\n        Set parentObj = refpdt.Parent\\n        \\n        'MsgBox (\"TypeName:\" \u0026 TypeName(parentObj))\\n        If StrComp(TypeName(parentObj), \"ProductDocument\", vbTextCompare) = 0 Then\\n            'CATPart CATProduct\\n            CheckReferenceIsProductByDocType = True\\n        End If\\n        Set parentObj = Nothing\\n        \\n    End If\\n    Set refpdt = Nothing\\n        \\nEnd Function\\n\\n'Check PartNumber Is same as Input\\n'Input: productNode: current component product\\n'       partNames: part number list\\n'Return: True, False\\nFunction CheckPartNumberIsInput(ByRef productNode As Product, ByRef partNames As Object) As Boolean\\n    'test\\n    'CheckPartNumberIsInput = True\\n    'Exit Function\\n    CheckPartNumberIsInput = False\\n        Dim pNumStr As String\\n        'MsgBox productNode.Name\\n        pNumStr = productNode.PartNumber\\n    Dim itemStrReduce As String\\n    Dim item As Variant\\n    For Each item In partNames\\n                itemStr = item\\n                itemStrReduce = Left(pNumStr,Len(itemStr))\\n        If itemStrReduce = itemStr Then\\n            CheckPartNumberIsInput = True\\n            Exit Function\\n        End If\\n    Next\\nEnd Function\\n\\n'---------------------------------------------------------------------------------------------------------\\n'recursive in getting all children products\\n'Input: showPartNumber: get part number in excel\\n'       inputSearch: intput conditions\\n'       excelPath: excel Path\\n'       partNumberTitle: partNumber Title in excel table head\\n'Return: 0 ok, other error\\nFunction ReadExcel(ByRef showPartNumber As Object, inputSearch As Object, excelPath As String, partNumberTitle As String)\\n        ' 创建 Excel 应用程序对象\\n        Dim ExcelApp\\n        Set ExcelApp = CreateObject(\"Excel.Application\")\\n        ' 设置 Excel 应用程序可见\\n        ExcelApp.Visible = False\\n        ' 禁用 Excel 的警告和确认对话框\\n        ExcelApp.DisplayAlerts = False\\n        ' 打开 Excel 文件\\n        Dim Workbook\\n        Set Workbook = ExcelApp.Workbooks.Open(excelPath)\\n        ' 选择工作表\\n        Dim Sheets\\n        Set Sheets = Workbook.Sheets\\n        Dim Sheet\\n        Set Sheet = Workbook.Sheets(1)\\n        ' 输出工作表名称\\n        'MsgBox(\"工作表名称: \" \u0026 Sheet.Name)\\n\\n        '获取表头\\n        Dim allRows, allCols\\n        allRows = Sheet.UsedRange.Rows.Count\\n        allCols = Sheet.UsedRange.Columns.Count\\n        Dim row, col\\n        '获取PartNumber表头colum\\n        Dim PartNumberCol\\n        PartNumberCol = 0\\n        For col = 1 To allCols\\n                Dim CellValue\\n                CellValue = Sheet.cells(1, col).value\\n                If CellValue = partNumberTitle Then\\n                        PartNumberCol = col\\n                        Exit For\\n                End If\\n        Next\\n        'MsgBox(\"Part number column: \" \u0026 PartNumberCol)\\n\\n        'check value\\n        If PartNumberCol \u003c\u003e 0 Then\\n                For col = 1 To allCols\\n                        Dim CellTitle\\n                        CellTitle = Sheet.cells(1, col).value\\n                        Dim listCheck As Object\\n                        Set listCheck = GetMapList(inputSearch, CellTitle)\\n                        If Not listCheck Is Nothing Then\\n                                For row = 2 To allRows\\n                                        If Not Sheet.cells(row, col) Is Nothing Then\\n                                                Dim CellValue2 As String\\n                                                CellValue2 = Sheet.cells(row, col).value\\n\\n                                                For Each item In listCheck\\n                                                        'MsgBox(\"CellValue: \" \u0026 CellValue \u0026 \" item: \" \u0026 item)\\n                                                        Dim ret\\n                                                        'ret = True\\n                                                        'ret = CompareConditionCheck(CellValue2, item)\\n                                                        \\n                                                        'CATScript can not identify 'Like' key word\\n                                                        If CustomLikeAddAnyToPattern(CellValue2, item, True, True) Then\\n                                                                ret = True\\n                                                        Else\\n                                                                ret = False\\n                                                        End If\\n\\n                                                        If ret Then\\n                                                                Dim pNumber\\n                                                                pNumber = Sheet.cells(row, PartNumberCol).value\\n                                                                'MsgBox (\"Find Condition 行: \" \u0026 row \u0026 \", 列: \" \u0026 col \u0026 \", 值: \" \u0026 CellValue2 \u0026\",\\r\\n Find Part number: \" \u0026 pNumber)\\n                                                                AddToMap showPartNumber, pNumber, pNumber\\n                                                                Exit For\\n                                                        End If\\n\\n                                                Next\\n\\n                                        End If\\n                                Next\\n                        End If\\n                Next\\n        Else\\n                MsgBox(\"Can not find Part number in Excel!\")\\n        End If\\n        ' 释放对象\\n        Set Sheet = Nothing\\n        Set Sheets = Nothing\\n         ' 关闭 Excel 文件\\n        Workbook.Close(False)\\n        Set Workbook = Nothing\\n        ExcelApp.Quit\\n        Set ExcelApp = Nothing\\n        ' 清除 COM 对象\\n        'Call ReleaseCOMObjects\\n        ReadExcel = 0\\nEnd Function\\n\\n'------------------------------------------------------------------------------------------------------\\n'is add Asterisk in pattern\\n'Input: expression: expression string in excel\\n'       pattern: intput conditions pattern\\n'       preAsterisk: is add prefix Asterisk\\n'       sufAsterisk: is add suffix Asterisk\\n'Return: True, False\\nFunction CustomLikeAddAnyToPattern(expression As String, pattern As String, preAsterisk As Boolean, sufAsterisk As Boolean) As Boolean\\n        Dim valReg As String\\n        valReg = pattern\\n        If preAsterisk Then\\n                valReg = \"*\" \u0026 valReg\\n        End If\\n        If sufAsterisk Then\\n                valReg = valReg \u0026 \"*\"\\n        End If\\n        'MsgBox \"CellValue2:\" \u0026 CellValue2 \u0026 \" valReg:\" \u0026 valReg\\n        CustomLikeAddAnyToPattern = CustomLike(expression, valReg)\\nEnd Function\\n\\n'Custom VB Like Function, fuzzy search string\\n'Input: expression: expression string in excel\\n'       pattern: intput conditions pattern\\n'Return: True, False\\nFunction CustomLike(expression As String, pattern As String) As Boolean\\n        Dim i As Long, j As Long\\n        Dim exprLen As Long, patLen As Long\\n        Dim exprChar As String, patChar As String\\n        Dim exprPos As Long, patPos As Long\\n        Dim starPos As Long, exprStarPos As Long\\n\\n        exprLen = Len(expression)\\n        patLen = Len(pattern)\\n        exprPos = 1\\n        patPos = 1\\n        starPos = 0\\n        exprStarPos = 0\\n\\n        While exprPos \u003c= exprLen And patPos \u003c= patLen\\n                If patPos \u003c= patLen Then\\n                        patChar = Mid(pattern, patPos, 1)\\n                Else\\n                        patChar = \"\"\\n                End If\\n\\n                If exprPos \u003c= exprLen Then\\n                        exprChar = Mid(expression, exprPos, 1)\\n                Else\\n                        exprChar = \"\"\\n                End If\\n\\n                Select Case patChar\\n                        Case \"?\"\\n                                If exprChar = \"\" Then\\n                                        CustomLike = False\\n                                        Exit Function\\n                                End If\\n                                exprPos = exprPos + 1\\n                                patPos = patPos + 1\\n                        Case \"[\"\\n                                Dim charList As String, negated As Boolean\\n                                negated = False\\n                                patPos = patPos + 1\\n                                charList = \"\"\\n                                Do While patPos \u003c= patLen\\n                                        patChar = Mid(pattern, patPos, 1)\\n                                        If patChar = \"]\" Then\\n                                                patPos = patPos + 1\\n                                                Exit Do\\n                                        ElseIf patChar = \"^\" And Not negated Then\\n                                                negated = True\\n                                        Else\\n                                                charList = charList \u0026 patChar\\n                                        End If\\n                                        patPos = patPos + 1\\n                                Loop\\n                                If (negated And InStr(1, charList, exprChar, vbBinaryCompare) \u003e 0) Or (Not negated And InStr(1, charList, exprChar, vbBinaryCompare) = 0) Then\\n                                        CustomLike = False\\n                                        Exit Function\\n                                End If\\n                                exprPos = exprPos + 1\\n                        Case \"*\"\\n                                If patPos = patLen Then\\n                                        CustomLike = True\\n                                        Exit Function\\n                                End If\\n                                starPos = patPos\\n                                exprStarPos = exprPos\\n                                patPos = patPos + 1\\n                        Case Else\\n                                If exprChar \u003c\u003e patChar Then\\n                                        If starPos = 0 Then\\n                                                CustomLike = False\\n                                                Exit Function\\n                                        Else\\n                                                patPos = starPos + 1\\n                                                exprPos = exprStarPos + 1\\n                                                exprStarPos = exprPos\\n                                        End If\\n                                Else\\n                                        exprPos = exprPos + 1\\n                                        patPos = patPos + 1\\n                                End If\\n                End Select\\n        WEnd\\n\\n        If patPos = patLen Then\\n                CustomLike = True\\n        Else\\n                CustomLike = False\\n        End If\\nEnd Function\\n\\n'------------------------------------------------------------------------------------------------------        \\n' 创建一个函数来向 Map 中添加键值对\\nFunction AddToMapValueList(map, key, value)\\n        If Not map.Exists(key) Then\\n                ' 如果键不存在，则创建一个新的数组\\n                Dim newList\\n                Set newList = CreateObject(\"System.Collections.ArrayList\")\\n                newList.Add(value)\\n                map.Add key, newList\\n        Else\\n                ' 如果键已存在，则向现有列表中添加值\\n                Dim list\\n                Set list = map(key)\\n                list.Add(value)\\n        End If\\n        AddToMapValueList = 0\\nEnd Function\\n\\n' 创建一个函数来从 Map 中获取列表\\nFunction GetMapList(map, key)\\n        If map.Exists(key) Then\\n                Set GetMapList = map(key)\\n        Else\\n                Set GetMapList = Nothing\\n        End If\\nEnd Function\\n\\n'Map string, list\\nFunction AddToSet(ByRef collectMap As Collection, ByVal item As String) As Boolean\\n        If Not Contains(collectMap, item) Then\\n                collectMap.Add item, item\\n        End If\\n        AddToSet = True\\nEnd Function\\n\\nFunction AddToMap(ByRef collectMap As Collection, keyName As String, value As String) As Boolean\\n        If Not Contains(collectMap, keyName) Then\\n                collectMap.Add value, keyName\\n        End If\\n        AddToMap = True\\nEnd Function\\n\\nFunction Contains(ByRef collectMap As Collection, ByVal item As String) As Boolean\\n        On Error Resume Next\\n        collectMap.item(item)\\n        Contains = (Err.Number = 0)\\n        'On Error GoTo 0\\nEnd Function\\n\\nFunction RemoveFromSet(ByRef collectMap As Collection, ByVal item As String)\\n        If Contains(collectMap, item) Then\\n                collectMap.Remove item\\n        RemoveFromSet = 0\\n        Else\\n                RemoveFromSet = -1\\n        End If\\nEnd Function"
    },
    {
        "instruction": "高亮显示[CR270LA]材质的组件, part number表格路径~/excel.xlsx。",
        "input": "",
        "output": "Language=CATSCRIPT\\n\\n'test main run\\nSub CATMain()\\n\\n        Dim excelPath = \"~/excel.xlsx\" \\n        Dim materials = \"[CR270LA]\" \\n        \\n        Dim materialNames() As String = StrToArr materials\\n        \\n        ' 不支持Dir\\n        ' 检查文件是否存在\\n        'MsgBox \"FileExists: \" \u0026 fso.FileExists(excelPath)\\n        If fso.FileExists(excelPath) = False Then\\n        'MsgBox \"Excel文件不存在: \" \u0026 excelPath\\n                excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\\n                If fso.FileExists(excelPath) = False Then\\n                        MsgBox \"Excel文件不存在: \" \u0026 excelPath\\n                        Exit Sub\\n                End If\\n        End If\\n        Dim partNumberTitle\\n        partNumberTitle = \"Part number\"\\n        ' 创建一个 Dictionary 对象\\n        ' 创建 Scripting.Dictionary 对象\\n        Dim mapSearch\\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")\\n        'Dim mapSearch As New Collection\\n        'AddToMapValueList mapSearch, \"MaterialName\", \"CR240*\"\\n        'AddToMapValueList mapSearch, \"MaterialName\", \"*CR270LA*\"\\n        \\n        Dim expression\\n        expression = materials\\n        Dim strLen\\n        strLen = Len(expression)\\n        Dim splitPosition\\n        splitPosition = 1\\n        Dim exprChar\\n        For i = 1 To strLen\\n            exprChar = Mid(expression, i, 1)\\n            If Mid(expression, i, 1) = \",\" Then\\n                Dim mess\\n                mess = Mid(expression, splitPosition, i - splitPosition)\\n                splitPosition = i + 1\\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\\n            End If\\n        Next\\n        If splitPosition \u003c strLen Then\\n            Dim mess2\\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\\n        End If\\n    \\n\\n        Dim showPartNumber\\n        'showPartNumber.Add key:=\"test\", item:=\"test\"\\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\\n        'Set showPartNumber = New Collection\\n        'Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\\n        'MsgBox (\"CompareConditionCheck: \" \u0026 CompareConditionCheck(\"[CR270LA]\", \"CR240*\"))\\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\\n\\n        '---------------------------------------------------------------------------------\\n        'loop children\\n        Dim showChildComps As Object\\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\\n        'add root Document\\n        'childComps.Add item:=rootProduct.Name, key:=rootProduct.Name\\n        Dim transparencyChildComps As Object\\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\\n        Dim ret As Integer\\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\\nEnd Sub\\n\\n'getting all children products and set show or hide, and set Opacity\\n'Input: partNames: part number list\\n'       showChildComps: conform to part number, set show and no Opacity\\n'       transparencyChildComps: not conform to part number, set Opacity\\n'Return: 0 ok, other error\\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\\n        '使用catiaApp调用COM接口的方法\\n        Dim rootDoc As ProductDocument\\n        Set rootDoc = CATIA.ActiveDocument\\n        If rootDoc Is Nothing Then\\n            'ConcatMessagesStrings True, \"Can not get active document!\"\\n            CATIALoopChildren = -2\\n            Exit Function\\n        End If\\n\\n        'ConcatMessagesStrings False, \"active document:\", rootDoc.FullName\\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\\n            'ConcatMessagesStrings True, \"current document is not a assembly!\"\\n            CATIALoopChildren = -3\\n            Exit Function\\n        End If\\n\\n        'Dim ret As Integer\\n        'Product\\n        Dim rootProduct As Product\\n        Set rootProduct = rootDoc.Product\\n        Dim productChildren As Products\\n        Set productChildren = rootProduct.Products\\n        \\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\\n                \\n                CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\\n                \\nEnd Function\\n\\n'change products show or hide, and set Opacity\\n'Input: productRoot: root product\\n'       productNodes: select component list\\n'       isShow: \u003c0 not change, 0 show, 1 hide\\n'       isTransparency:\u003c0 no Transparency, 0~100 set Transparency(0~100)\\n'Return: 0 ok, other error\\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\\n        'CATIA.ActiveDocument.Selection.Search (\"Sketcher.AbsoluteAxis,all\")\\n        'CATIA.ActiveDocument.Selection.VisProperties.SetShow\\n        Dim parentDoc As Document\\n        Set parentDoc = productRoot.Parent\\n        If parentDoc Is Nothing Then\\n                ChangeCompState = -3\\n                Exit Function\\n        End If\\n                        \\n        Dim selectionNode As Selection\\n        Set selectionNode = parentDoc.Selection\\n        If selectionNode Is Nothing Then\\n                ChangeCompState = -4\\n                Exit Function\\n        End If\\n\\n        Dim visProp As visPropertySet\\n        Set visProp = selectionNode.VisProperties\\n        If visProp Is Nothing Then\\n                ChangeCompState = -5\\n                Exit Function\\n        End If\\n\\n        Dim productNode As Variant\\n        For Each productNode In productNodes\\n                selectionNode.Add productNode\\n        Next\\n\\n        Set visProp = visProp.Parent\\n        If visProp Is Nothing Then\\n                ChangeCompState = -6\\n                Exit Function\\n        End If\\n        \\n        'CatVisPropertyShow.catVisPropertyNoShowAttr    1\\n    'CatVisPropertyShow.catVisPropertyShowAttr      0\\n    If isShow \u003c 0 Then\\n        Dim showState As CatVisPropertyShow\\n        visProp.GetShow showState\\n        If showState \u003c\u003e isShow Then\\n            visProp.SetShow isShow\\n        End If\\n    End If\\n        \\n        If isTransparency \u003c 0 Then\\n        visProp.SetVisibleOpacity 100, 0\\n    Else\\n        visProp.SetVisibleOpacity isTransparency, 1\\n    End If\\n        selectionNode.Clear\\n        ChangeCompState = 0\\nEnd Function\\n\\n'recursive in getting all children products\\n'Input: productRoot: root product\\n'       productNode: current component product\\n'       partNames: part number list\\n'       showChildComps: conform to part number, set show and no Opacity\\n'       transparencyChildComps: not conform to part number, set Opacity\\n'       parentIsOk: parent product is conform to part number\\n'Return: 0 ok, other error\\nFunction GetChildren(ByRef productRoot As Product, ByRef productNode As Product, ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object, ByVal parentIsOk As Boolean) As Integer\\n    'Get children products as array\\n    Dim productsArr As Products\\n        Set productsArr = productNode.Products\\n        If productsArr Is Nothing Then\\n                GetChildren = -2\\n                Exit Function\\n        End If\\n        Dim returnVisable As Integer\\n        returnVisable = 0\\n        '0 default\\n        '1 all hide\\n        '2 all show\\n        '3 hide\\show\\n        Dim searchedID\\n        Set searchedID = CreateObject(\"Scripting.Dictionary\")\\n\\n        'On Error Resume Next\\n        For i = 1 To productsArr.Count\\n                'Get child\\n                Dim pdtChild As Product\\n                Set pdtChild = productsArr.item(i)\\n                'MsgBox \"now:\" \u0026 pdtChild.Name\\n                If parentIsOk Then\\n                        showChildComps.Add pdtChild\\n                        returnVisable = 2\\n                Else\\n                        Dim currentNodeIsSearched As Boolean\\n                        currentNodeIsSearched = CheckPartNumberIsInput(pdtChild, partNames)\\n                        'ret = ConcatMessagesStrings(True, pdtChild.PartNumber, ret, TypeName(pdtChild))\\n                        'If currentNodeIsSearched Then\\n                        '    searchedID.add(i, i)\\n                        '    parentIsOk = True\\n                        'End If\\n                        'check children-children\\n                        Dim ret As Integer\\n                        ret = 0\\n                        If CheckReferenceIsProductByDocType(pdtChild) Then\\n                                ret = GetChildren(productRoot, pdtChild, partNames, showChildComps, transparencyChildComps, currentNodeIsSearched)\\n                        End If\\n                        If ret \u003e 1 Or currentNodeIsSearched Then\\n                                searchedID.Add i, i\\n                                showChildComps.Add pdtChild\\n                                returnVisable = 2\\n                        End If\\n                End If\\n        Next\\n\\n    If returnVisable \u003c\u003e 0 Then\\n        For i = 1 To productsArr.Count\\n            If Not searchedID.Exists(i) Then\\n                transparencyChildComps.Add productsArr.item(i)\\n            End If\\n        Next\\n    End If\\n\\n    Set productsArr = Nothing\\n\\n    GetChildren = returnVisable\\n\\nEnd Function\\n\\n'Check Reference Product type\\n'Input:  Product component\\n'Return: CATProduct true, other false\\nFunction CheckReferenceIsProductByDocType(ByRef productNode As Product) As Boolean\\n    CheckReferenceIsProductByDocType = False\\n    'Retrieve the reference product\\n    Dim refpdt As Product\\n    Set refpdt = productNode.ReferenceProduct\\n    \\n    If Not refpdt Is Nothing Then\\n        Dim parentObj As CATBaseDispatch\\n        Set parentObj = refpdt.Parent\\n        \\n        'MsgBox (\"TypeName:\" \u0026 TypeName(parentObj))\\n        If StrComp(TypeName(parentObj), \"ProductDocument\", vbTextCompare) = 0 Then\\n            'CATPart CATProduct\\n            CheckReferenceIsProductByDocType = True\\n        End If\\n        Set parentObj = Nothing\\n        \\n    End If\\n    Set refpdt = Nothing\\n        \\nEnd Function\\n\\n'Check PartNumber Is same as Input\\n'Input: productNode: current component product\\n'       partNames: part number list\\n'Return: True, False\\nFunction CheckPartNumberIsInput(ByRef productNode As Product, ByRef partNames As Object) As Boolean\\n    'test\\n    'CheckPartNumberIsInput = True\\n    'Exit Function\\n    CheckPartNumberIsInput = False\\n        Dim pNumStr As String\\n        'MsgBox productNode.Name\\n        pNumStr = productNode.PartNumber\\n    Dim itemStrReduce As String\\n    Dim item As Variant\\n    For Each item In partNames\\n                itemStr = item\\n                itemStrReduce = Left(pNumStr,Len(itemStr))\\n        If itemStrReduce = itemStr Then\\n            CheckPartNumberIsInput = True\\n            Exit Function\\n        End If\\n    Next\\nEnd Function\\n\\n'---------------------------------------------------------------------------------------------------------\\n'recursive in getting all children products\\n'Input: showPartNumber: get part number in excel\\n'       inputSearch: intput conditions\\n'       excelPath: excel Path\\n'       partNumberTitle: partNumber Title in excel table head\\n'Return: 0 ok, other error\\nFunction ReadExcel(ByRef showPartNumber As Object, inputSearch As Object, excelPath As String, partNumberTitle As String)\\n        ' 创建 Excel 应用程序对象\\n        Dim ExcelApp\\n        Set ExcelApp = CreateObject(\"Excel.Application\")\\n        ' 设置 Excel 应用程序可见\\n        ExcelApp.Visible = False\\n        ' 禁用 Excel 的警告和确认对话框\\n        ExcelApp.DisplayAlerts = False\\n        ' 打开 Excel 文件\\n        Dim Workbook\\n        Set Workbook = ExcelApp.Workbooks.Open(excelPath)\\n        ' 选择工作表\\n        Dim Sheets\\n        Set Sheets = Workbook.Sheets\\n        Dim Sheet\\n        Set Sheet = Workbook.Sheets(1)\\n        ' 输出工作表名称\\n        'MsgBox(\"工作表名称: \" \u0026 Sheet.Name)\\n\\n        '获取表头\\n        Dim allRows, allCols\\n        allRows = Sheet.UsedRange.Rows.Count\\n        allCols = Sheet.UsedRange.Columns.Count\\n        Dim row, col\\n        '获取PartNumber表头colum\\n        Dim PartNumberCol\\n        PartNumberCol = 0\\n        For col = 1 To allCols\\n                Dim CellValue\\n                CellValue = Sheet.cells(1, col).value\\n                If CellValue = partNumberTitle Then\\n                        PartNumberCol = col\\n                        Exit For\\n                End If\\n        Next\\n        'MsgBox(\"Part number column: \" \u0026 PartNumberCol)\\n\\n        'check value\\n        If PartNumberCol \u003c\u003e 0 Then\\n                For col = 1 To allCols\\n                        Dim CellTitle\\n                        CellTitle = Sheet.cells(1, col).value\\n                        Dim listCheck As Object\\n                        Set listCheck = GetMapList(inputSearch, CellTitle)\\n                        If Not listCheck Is Nothing Then\\n                                For row = 2 To allRows\\n                                        If Not Sheet.cells(row, col) Is Nothing Then\\n                                                Dim CellValue2 As String\\n                                                CellValue2 = Sheet.cells(row, col).value\\n\\n                                                For Each item In listCheck\\n                                                        'MsgBox(\"CellValue: \" \u0026 CellValue \u0026 \" item: \" \u0026 item)\\n                                                        Dim ret\\n                                                        'ret = True\\n                                                        'ret = CompareConditionCheck(CellValue2, item)\\n                                                        \\n                                                        'CATScript can not identify 'Like' key word\\n                                                        If CustomLikeAddAnyToPattern(CellValue2, item, True, True) Then\\n                                                                ret = True\\n                                                        Else\\n                                                                ret = False\\n                                                        End If\\n\\n                                                        If ret Then\\n                                                                Dim pNumber\\n                                                                pNumber = Sheet.cells(row, PartNumberCol).value\\n                                                                'MsgBox (\"Find Condition 行: \" \u0026 row \u0026 \", 列: \" \u0026 col \u0026 \", 值: \" \u0026 CellValue2 \u0026\",\\r\\n Find Part number: \" \u0026 pNumber)\\n                                                                AddToMap showPartNumber, pNumber, pNumber\\n                                                                Exit For\\n                                                        End If\\n\\n                                                Next\\n\\n                                        End If\\n                                Next\\n                        End If\\n                Next\\n        Else\\n                MsgBox(\"Can not find Part number in Excel!\")\\n        End If\\n        ' 释放对象\\n        Set Sheet = Nothing\\n        Set Sheets = Nothing\\n         ' 关闭 Excel 文件\\n        Workbook.Close(False)\\n        Set Workbook = Nothing\\n        ExcelApp.Quit\\n        Set ExcelApp = Nothing\\n        ' 清除 COM 对象\\n        'Call ReleaseCOMObjects\\n        ReadExcel = 0\\nEnd Function\\n\\n'------------------------------------------------------------------------------------------------------\\n'is add Asterisk in pattern\\n'Input: expression: expression string in excel\\n'       pattern: intput conditions pattern\\n'       preAsterisk: is add prefix Asterisk\\n'       sufAsterisk: is add suffix Asterisk\\n'Return: True, False\\nFunction CustomLikeAddAnyToPattern(expression As String, pattern As String, preAsterisk As Boolean, sufAsterisk As Boolean) As Boolean\\n        Dim valReg As String\\n        valReg = pattern\\n        If preAsterisk Then\\n                valReg = \"*\" \u0026 valReg\\n        End If\\n        If sufAsterisk Then\\n                valReg = valReg \u0026 \"*\"\\n        End If\\n        'MsgBox \"CellValue2:\" \u0026 CellValue2 \u0026 \" valReg:\" \u0026 valReg\\n        CustomLikeAddAnyToPattern = CustomLike(expression, valReg)\\nEnd Function\\n\\n'Custom VB Like Function, fuzzy search string\\n'Input: expression: expression string in excel\\n'       pattern: intput conditions pattern\\n'Return: True, False\\nFunction CustomLike(expression As String, pattern As String) As Boolean\\n        Dim i As Long, j As Long\\n        Dim exprLen As Long, patLen As Long\\n        Dim exprChar As String, patChar As String\\n        Dim exprPos As Long, patPos As Long\\n        Dim starPos As Long, exprStarPos As Long\\n\\n        exprLen = Len(expression)\\n        patLen = Len(pattern)\\n        exprPos = 1\\n        patPos = 1\\n        starPos = 0\\n        exprStarPos = 0\\n\\n        While exprPos \u003c= exprLen And patPos \u003c= patLen\\n                If patPos \u003c= patLen Then\\n                        patChar = Mid(pattern, patPos, 1)\\n                Else\\n                        patChar = \"\"\\n                End If\\n\\n                If exprPos \u003c= exprLen Then\\n                        exprChar = Mid(expression, exprPos, 1)\\n                Else\\n                        exprChar = \"\"\\n                End If\\n\\n                Select Case patChar\\n                        Case \"?\"\\n                                If exprChar = \"\" Then\\n                                        CustomLike = False\\n                                        Exit Function\\n                                End If\\n                                exprPos = exprPos + 1\\n                                patPos = patPos + 1\\n                        Case \"[\"\\n                                Dim charList As String, negated As Boolean\\n                                negated = False\\n                                patPos = patPos + 1\\n                                charList = \"\"\\n                                Do While patPos \u003c= patLen\\n                                        patChar = Mid(pattern, patPos, 1)\\n                                        If patChar = \"]\" Then\\n                                                patPos = patPos + 1\\n                                                Exit Do\\n                                        ElseIf patChar = \"^\" And Not negated Then\\n                                                negated = True\\n                                        Else\\n                                                charList = charList \u0026 patChar\\n                                        End If\\n                                        patPos = patPos + 1\\n                                Loop\\n                                If (negated And InStr(1, charList, exprChar, vbBinaryCompare) \u003e 0) Or (Not negated And InStr(1, charList, exprChar, vbBinaryCompare) = 0) Then\\n                                        CustomLike = False\\n                                        Exit Function\\n                                End If\\n                                exprPos = exprPos + 1\\n                        Case \"*\"\\n                                If patPos = patLen Then\\n                                        CustomLike = True\\n                                        Exit Function\\n                                End If\\n                                starPos = patPos\\n                                exprStarPos = exprPos\\n                                patPos = patPos + 1\\n                        Case Else\\n                                If exprChar \u003c\u003e patChar Then\\n                                        If starPos = 0 Then\\n                                                CustomLike = False\\n                                                Exit Function\\n                                        Else\\n                                                patPos = starPos + 1\\n                                                exprPos = exprStarPos + 1\\n                                                exprStarPos = exprPos\\n                                        End If\\n                                Else\\n                                        exprPos = exprPos + 1\\n                                        patPos = patPos + 1\\n                                End If\\n                End Select\\n        WEnd\\n\\n        If patPos = patLen Then\\n                CustomLike = True\\n        Else\\n                CustomLike = False\\n        End If\\nEnd Function\\n\\n'------------------------------------------------------------------------------------------------------        \\n' 创建一个函数来向 Map 中添加键值对\\nFunction AddToMapValueList(map, key, value)\\n        If Not map.Exists(key) Then\\n                ' 如果键不存在，则创建一个新的数组\\n                Dim newList\\n                Set newList = CreateObject(\"System.Collections.ArrayList\")\\n                newList.Add(value)\\n                map.Add key, newList\\n        Else\\n                ' 如果键已存在，则向现有列表中添加值\\n                Dim list\\n                Set list = map(key)\\n                list.Add(value)\\n        End If\\n        AddToMapValueList = 0\\nEnd Function\\n\\n' 创建一个函数来从 Map 中获取列表\\nFunction GetMapList(map, key)\\n        If map.Exists(key) Then\\n                Set GetMapList = map(key)\\n        Else\\n                Set GetMapList = Nothing\\n        End If\\nEnd Function\\n\\n'Map string, list\\nFunction AddToSet(ByRef collectMap As Collection, ByVal item As String) As Boolean\\n        If Not Contains(collectMap, item) Then\\n                collectMap.Add item, item\\n        End If\\n        AddToSet = True\\nEnd Function\\n\\nFunction AddToMap(ByRef collectMap As Collection, keyName As String, value As String) As Boolean\\n        If Not Contains(collectMap, keyName) Then\\n                collectMap.Add value, keyName\\n        End If\\n        AddToMap = True\\nEnd Function\\n\\nFunction Contains(ByRef collectMap As Collection, ByVal item As String) As Boolean\\n        On Error Resume Next\\n        collectMap.item(item)\\n        Contains = (Err.Number = 0)\\n        'On Error GoTo 0\\nEnd Function\\n\\nFunction RemoveFromSet(ByRef collectMap As Collection, ByVal item As String)\\n        If Contains(collectMap, item) Then\\n                collectMap.Remove item\\n        RemoveFromSet = 0\\n        Else\\n                RemoveFromSet = -1\\n        End If\\nEnd Function"
    },
    {
        "instruction": "高亮显示~/excel.xlsx中[CR270LA]材质的组件。",
        "input": "",
        "output": "Language=CATSCRIPT\\n\\n'test main run\\nSub CATMain()\\n\\n        Dim excelPath = \"~/excel.xlsx\" \\n        Dim materials = \"[CR270LA]\" \\n        \\n        Dim materialNames() As String = StrToArr materials\\n        \\n        ' 不支持Dir\\n        ' 检查文件是否存在\\n        'MsgBox \"FileExists: \" \u0026 fso.FileExists(excelPath)\\n        If fso.FileExists(excelPath) = False Then\\n        'MsgBox \"Excel文件不存在: \" \u0026 excelPath\\n                excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\\n                If fso.FileExists(excelPath) = False Then\\n                        MsgBox \"Excel文件不存在: \" \u0026 excelPath\\n                        Exit Sub\\n                End If\\n        End If\\n        Dim partNumberTitle\\n        partNumberTitle = \"Part number\"\\n        ' 创建一个 Dictionary 对象\\n        ' 创建 Scripting.Dictionary 对象\\n        Dim mapSearch\\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")\\n        'Dim mapSearch As New Collection\\n        'AddToMapValueList mapSearch, \"MaterialName\", \"CR240*\"\\n        'AddToMapValueList mapSearch, \"MaterialName\", \"*CR270LA*\"\\n        \\n        Dim expression\\n        expression = materials\\n        Dim strLen\\n        strLen = Len(expression)\\n        Dim splitPosition\\n        splitPosition = 1\\n        Dim exprChar\\n        For i = 1 To strLen\\n            exprChar = Mid(expression, i, 1)\\n            If Mid(expression, i, 1) = \",\" Then\\n                Dim mess\\n                mess = Mid(expression, splitPosition, i - splitPosition)\\n                splitPosition = i + 1\\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\\n            End If\\n        Next\\n        If splitPosition \u003c strLen Then\\n            Dim mess2\\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\\n        End If\\n    \\n\\n        Dim showPartNumber\\n        'showPartNumber.Add key:=\"test\", item:=\"test\"\\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\\n        'Set showPartNumber = New Collection\\n        'Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\\n        'MsgBox (\"CompareConditionCheck: \" \u0026 CompareConditionCheck(\"[CR270LA]\", \"CR240*\"))\\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\\n\\n        '---------------------------------------------------------------------------------\\n        'loop children\\n        Dim showChildComps As Object\\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\\n        'add root Document\\n        'childComps.Add item:=rootProduct.Name, key:=rootProduct.Name\\n        Dim transparencyChildComps As Object\\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\\n        Dim ret As Integer\\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\\nEnd Sub\\n\\n'getting all children products and set show or hide, and set Opacity\\n'Input: partNames: part number list\\n'       showChildComps: conform to part number, set show and no Opacity\\n'       transparencyChildComps: not conform to part number, set Opacity\\n'Return: 0 ok, other error\\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\\n        '使用catiaApp调用COM接口的方法\\n        Dim rootDoc As ProductDocument\\n        Set rootDoc = CATIA.ActiveDocument\\n        If rootDoc Is Nothing Then\\n            'ConcatMessagesStrings True, \"Can not get active document!\"\\n            CATIALoopChildren = -2\\n            Exit Function\\n        End If\\n\\n        'ConcatMessagesStrings False, \"active document:\", rootDoc.FullName\\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\\n            'ConcatMessagesStrings True, \"current document is not a assembly!\"\\n            CATIALoopChildren = -3\\n            Exit Function\\n        End If\\n\\n        'Dim ret As Integer\\n        'Product\\n        Dim rootProduct As Product\\n        Set rootProduct = rootDoc.Product\\n        Dim productChildren As Products\\n        Set productChildren = rootProduct.Products\\n        \\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\\n                \\n                CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\\n                \\nEnd Function\\n\\n'change products show or hide, and set Opacity\\n'Input: productRoot: root product\\n'       productNodes: select component list\\n'       isShow: \u003c0 not change, 0 show, 1 hide\\n'       isTransparency:\u003c0 no Transparency, 0~100 set Transparency(0~100)\\n'Return: 0 ok, other error\\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\\n        'CATIA.ActiveDocument.Selection.Search (\"Sketcher.AbsoluteAxis,all\")\\n        'CATIA.ActiveDocument.Selection.VisProperties.SetShow\\n        Dim parentDoc As Document\\n        Set parentDoc = productRoot.Parent\\n        If parentDoc Is Nothing Then\\n                ChangeCompState = -3\\n                Exit Function\\n        End If\\n                        \\n        Dim selectionNode As Selection\\n        Set selectionNode = parentDoc.Selection\\n        If selectionNode Is Nothing Then\\n                ChangeCompState = -4\\n                Exit Function\\n        End If\\n\\n        Dim visProp As visPropertySet\\n        Set visProp = selectionNode.VisProperties\\n        If visProp Is Nothing Then\\n                ChangeCompState = -5\\n                Exit Function\\n        End If\\n\\n        Dim productNode As Variant\\n        For Each productNode In productNodes\\n                selectionNode.Add productNode\\n        Next\\n\\n        Set visProp = visProp.Parent\\n        If visProp Is Nothing Then\\n                ChangeCompState = -6\\n                Exit Function\\n        End If\\n        \\n        'CatVisPropertyShow.catVisPropertyNoShowAttr    1\\n    'CatVisPropertyShow.catVisPropertyShowAttr      0\\n    If isShow \u003c 0 Then\\n        Dim showState As CatVisPropertyShow\\n        visProp.GetShow showState\\n        If showState \u003c\u003e isShow Then\\n            visProp.SetShow isShow\\n        End If\\n    End If\\n        \\n        If isTransparency \u003c 0 Then\\n        visProp.SetVisibleOpacity 100, 0\\n    Else\\n        visProp.SetVisibleOpacity isTransparency, 1\\n    End If\\n        selectionNode.Clear\\n        ChangeCompState = 0\\nEnd Function\\n\\n'recursive in getting all children products\\n'Input: productRoot: root product\\n'       productNode: current component product\\n'       partNames: part number list\\n'       showChildComps: conform to part number, set show and no Opacity\\n'       transparencyChildComps: not conform to part number, set Opacity\\n'       parentIsOk: parent product is conform to part number\\n'Return: 0 ok, other error\\nFunction GetChildren(ByRef productRoot As Product, ByRef productNode As Product, ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object, ByVal parentIsOk As Boolean) As Integer\\n    'Get children products as array\\n    Dim productsArr As Products\\n        Set productsArr = productNode.Products\\n        If productsArr Is Nothing Then\\n                GetChildren = -2\\n                Exit Function\\n        End If\\n        Dim returnVisable As Integer\\n        returnVisable = 0\\n        '0 default\\n        '1 all hide\\n        '2 all show\\n        '3 hide\\show\\n        Dim searchedID\\n        Set searchedID = CreateObject(\"Scripting.Dictionary\")\\n\\n        'On Error Resume Next\\n        For i = 1 To productsArr.Count\\n                'Get child\\n                Dim pdtChild As Product\\n                Set pdtChild = productsArr.item(i)\\n                'MsgBox \"now:\" \u0026 pdtChild.Name\\n                If parentIsOk Then\\n                        showChildComps.Add pdtChild\\n                        returnVisable = 2\\n                Else\\n                        Dim currentNodeIsSearched As Boolean\\n                        currentNodeIsSearched = CheckPartNumberIsInput(pdtChild, partNames)\\n                        'ret = ConcatMessagesStrings(True, pdtChild.PartNumber, ret, TypeName(pdtChild))\\n                        'If currentNodeIsSearched Then\\n                        '    searchedID.add(i, i)\\n                        '    parentIsOk = True\\n                        'End If\\n                        'check children-children\\n                        Dim ret As Integer\\n                        ret = 0\\n                        If CheckReferenceIsProductByDocType(pdtChild) Then\\n                                ret = GetChildren(productRoot, pdtChild, partNames, showChildComps, transparencyChildComps, currentNodeIsSearched)\\n                        End If\\n                        If ret \u003e 1 Or currentNodeIsSearched Then\\n                                searchedID.Add i, i\\n                                showChildComps.Add pdtChild\\n                                returnVisable = 2\\n                        End If\\n                End If\\n        Next\\n\\n    If returnVisable \u003c\u003e 0 Then\\n        For i = 1 To productsArr.Count\\n            If Not searchedID.Exists(i) Then\\n                transparencyChildComps.Add productsArr.item(i)\\n            End If\\n        Next\\n    End If\\n\\n    Set productsArr = Nothing\\n\\n    GetChildren = returnVisable\\n\\nEnd Function\\n\\n'Check Reference Product type\\n'Input:  Product component\\n'Return: CATProduct true, other false\\nFunction CheckReferenceIsProductByDocType(ByRef productNode As Product) As Boolean\\n    CheckReferenceIsProductByDocType = False\\n    'Retrieve the reference product\\n    Dim refpdt As Product\\n    Set refpdt = productNode.ReferenceProduct\\n    \\n    If Not refpdt Is Nothing Then\\n        Dim parentObj As CATBaseDispatch\\n        Set parentObj = refpdt.Parent\\n        \\n        'MsgBox (\"TypeName:\" \u0026 TypeName(parentObj))\\n        If StrComp(TypeName(parentObj), \"ProductDocument\", vbTextCompare) = 0 Then\\n            'CATPart CATProduct\\n            CheckReferenceIsProductByDocType = True\\n        End If\\n        Set parentObj = Nothing\\n        \\n    End If\\n    Set refpdt = Nothing\\n        \\nEnd Function\\n\\n'Check PartNumber Is same as Input\\n'Input: productNode: current component product\\n'       partNames: part number list\\n'Return: True, False\\nFunction CheckPartNumberIsInput(ByRef productNode As Product, ByRef partNames As Object) As Boolean\\n    'test\\n    'CheckPartNumberIsInput = True\\n    'Exit Function\\n    CheckPartNumberIsInput = False\\n        Dim pNumStr As String\\n        'MsgBox productNode.Name\\n        pNumStr = productNode.PartNumber\\n    Dim itemStrReduce As String\\n    Dim item As Variant\\n    For Each item In partNames\\n                itemStr = item\\n                itemStrReduce = Left(pNumStr,Len(itemStr))\\n        If itemStrReduce = itemStr Then\\n            CheckPartNumberIsInput = True\\n            Exit Function\\n        End If\\n    Next\\nEnd Function\\n\\n'---------------------------------------------------------------------------------------------------------\\n'recursive in getting all children products\\n'Input: showPartNumber: get part number in excel\\n'       inputSearch: intput conditions\\n'       excelPath: excel Path\\n'       partNumberTitle: partNumber Title in excel table head\\n'Return: 0 ok, other error\\nFunction ReadExcel(ByRef showPartNumber As Object, inputSearch As Object, excelPath As String, partNumberTitle As String)\\n        ' 创建 Excel 应用程序对象\\n        Dim ExcelApp\\n        Set ExcelApp = CreateObject(\"Excel.Application\")\\n        ' 设置 Excel 应用程序可见\\n        ExcelApp.Visible = False\\n        ' 禁用 Excel 的警告和确认对话框\\n        ExcelApp.DisplayAlerts = False\\n        ' 打开 Excel 文件\\n        Dim Workbook\\n        Set Workbook = ExcelApp.Workbooks.Open(excelPath)\\n        ' 选择工作表\\n        Dim Sheets\\n        Set Sheets = Workbook.Sheets\\n        Dim Sheet\\n        Set Sheet = Workbook.Sheets(1)\\n        ' 输出工作表名称\\n        'MsgBox(\"工作表名称: \" \u0026 Sheet.Name)\\n\\n        '获取表头\\n        Dim allRows, allCols\\n        allRows = Sheet.UsedRange.Rows.Count\\n        allCols = Sheet.UsedRange.Columns.Count\\n        Dim row, col\\n        '获取PartNumber表头colum\\n        Dim PartNumberCol\\n        PartNumberCol = 0\\n        For col = 1 To allCols\\n                Dim CellValue\\n                CellValue = Sheet.cells(1, col).value\\n                If CellValue = partNumberTitle Then\\n                        PartNumberCol = col\\n                        Exit For\\n                End If\\n        Next\\n        'MsgBox(\"Part number column: \" \u0026 PartNumberCol)\\n\\n        'check value\\n        If PartNumberCol \u003c\u003e 0 Then\\n                For col = 1 To allCols\\n                        Dim CellTitle\\n                        CellTitle = Sheet.cells(1, col).value\\n                        Dim listCheck As Object\\n                        Set listCheck = GetMapList(inputSearch, CellTitle)\\n                        If Not listCheck Is Nothing Then\\n                                For row = 2 To allRows\\n                                        If Not Sheet.cells(row, col) Is Nothing Then\\n                                                Dim CellValue2 As String\\n                                                CellValue2 = Sheet.cells(row, col).value\\n\\n                                                For Each item In listCheck\\n                                                        'MsgBox(\"CellValue: \" \u0026 CellValue \u0026 \" item: \" \u0026 item)\\n                                                        Dim ret\\n                                                        'ret = True\\n                                                        'ret = CompareConditionCheck(CellValue2, item)\\n                                                        \\n                                                        'CATScript can not identify 'Like' key word\\n                                                        If CustomLikeAddAnyToPattern(CellValue2, item, True, True) Then\\n                                                                ret = True\\n                                                        Else\\n                                                                ret = False\\n                                                        End If\\n\\n                                                        If ret Then\\n                                                                Dim pNumber\\n                                                                pNumber = Sheet.cells(row, PartNumberCol).value\\n                                                                'MsgBox (\"Find Condition 行: \" \u0026 row \u0026 \", 列: \" \u0026 col \u0026 \", 值: \" \u0026 CellValue2 \u0026\",\\r\\n Find Part number: \" \u0026 pNumber)\\n                                                                AddToMap showPartNumber, pNumber, pNumber\\n                                                                Exit For\\n                                                        End If\\n\\n                                                Next\\n\\n                                        End If\\n                                Next\\n                        End If\\n                Next\\n        Else\\n                MsgBox(\"Can not find Part number in Excel!\")\\n        End If\\n        ' 释放对象\\n        Set Sheet = Nothing\\n        Set Sheets = Nothing\\n         ' 关闭 Excel 文件\\n        Workbook.Close(False)\\n        Set Workbook = Nothing\\n        ExcelApp.Quit\\n        Set ExcelApp = Nothing\\n        ' 清除 COM 对象\\n        'Call ReleaseCOMObjects\\n        ReadExcel = 0\\nEnd Function\\n\\n'------------------------------------------------------------------------------------------------------\\n'is add Asterisk in pattern\\n'Input: expression: expression string in excel\\n'       pattern: intput conditions pattern\\n'       preAsterisk: is add prefix Asterisk\\n'       sufAsterisk: is add suffix Asterisk\\n'Return: True, False\\nFunction CustomLikeAddAnyToPattern(expression As String, pattern As String, preAsterisk As Boolean, sufAsterisk As Boolean) As Boolean\\n        Dim valReg As String\\n        valReg = pattern\\n        If preAsterisk Then\\n                valReg = \"*\" \u0026 valReg\\n        End If\\n        If sufAsterisk Then\\n                valReg = valReg \u0026 \"*\"\\n        End If\\n        'MsgBox \"CellValue2:\" \u0026 CellValue2 \u0026 \" valReg:\" \u0026 valReg\\n        CustomLikeAddAnyToPattern = CustomLike(expression, valReg)\\nEnd Function\\n\\n'Custom VB Like Function, fuzzy search string\\n'Input: expression: expression string in excel\\n'       pattern: intput conditions pattern\\n'Return: True, False\\nFunction CustomLike(expression As String, pattern As String) As Boolean\\n        Dim i As Long, j As Long\\n        Dim exprLen As Long, patLen As Long\\n        Dim exprChar As String, patChar As String\\n        Dim exprPos As Long, patPos As Long\\n        Dim starPos As Long, exprStarPos As Long\\n\\n        exprLen = Len(expression)\\n        patLen = Len(pattern)\\n        exprPos = 1\\n        patPos = 1\\n        starPos = 0\\n        exprStarPos = 0\\n\\n        While exprPos \u003c= exprLen And patPos \u003c= patLen\\n                If patPos \u003c= patLen Then\\n                        patChar = Mid(pattern, patPos, 1)\\n                Else\\n                        patChar = \"\"\\n                End If\\n\\n                If exprPos \u003c= exprLen Then\\n                        exprChar = Mid(expression, exprPos, 1)\\n                Else\\n                        exprChar = \"\"\\n                End If\\n\\n                Select Case patChar\\n                        Case \"?\"\\n                                If exprChar = \"\" Then\\n                                        CustomLike = False\\n                                        Exit Function\\n                                End If\\n                                exprPos = exprPos + 1\\n                                patPos = patPos + 1\\n                        Case \"[\"\\n                                Dim charList As String, negated As Boolean\\n                                negated = False\\n                                patPos = patPos + 1\\n                                charList = \"\"\\n                                Do While patPos \u003c= patLen\\n                                        patChar = Mid(pattern, patPos, 1)\\n                                        If patChar = \"]\" Then\\n                                                patPos = patPos + 1\\n                                                Exit Do\\n                                        ElseIf patChar = \"^\" And Not negated Then\\n                                                negated = True\\n                                        Else\\n                                                charList = charList \u0026 patChar\\n                                        End If\\n                                        patPos = patPos + 1\\n                                Loop\\n                                If (negated And InStr(1, charList, exprChar, vbBinaryCompare) \u003e 0) Or (Not negated And InStr(1, charList, exprChar, vbBinaryCompare) = 0) Then\\n                                        CustomLike = False\\n                                        Exit Function\\n                                End If\\n                                exprPos = exprPos + 1\\n                        Case \"*\"\\n                                If patPos = patLen Then\\n                                        CustomLike = True\\n                                        Exit Function\\n                                End If\\n                                starPos = patPos\\n                                exprStarPos = exprPos\\n                                patPos = patPos + 1\\n                        Case Else\\n                                If exprChar \u003c\u003e patChar Then\\n                                        If starPos = 0 Then\\n                                                CustomLike = False\\n                                                Exit Function\\n                                        Else\\n                                                patPos = starPos + 1\\n                                                exprPos = exprStarPos + 1\\n                                                exprStarPos = exprPos\\n                                        End If\\n                                Else\\n                                        exprPos = exprPos + 1\\n                                        patPos = patPos + 1\\n                                End If\\n                End Select\\n        WEnd\\n\\n        If patPos = patLen Then\\n                CustomLike = True\\n        Else\\n                CustomLike = False\\n        End If\\nEnd Function\\n\\n'------------------------------------------------------------------------------------------------------        \\n' 创建一个函数来向 Map 中添加键值对\\nFunction AddToMapValueList(map, key, value)\\n        If Not map.Exists(key) Then\\n                ' 如果键不存在，则创建一个新的数组\\n                Dim newList\\n                Set newList = CreateObject(\"System.Collections.ArrayList\")\\n                newList.Add(value)\\n                map.Add key, newList\\n        Else\\n                ' 如果键已存在，则向现有列表中添加值\\n                Dim list\\n                Set list = map(key)\\n                list.Add(value)\\n        End If\\n        AddToMapValueList = 0\\nEnd Function\\n\\n' 创建一个函数来从 Map 中获取列表\\nFunction GetMapList(map, key)\\n        If map.Exists(key) Then\\n                Set GetMapList = map(key)\\n        Else\\n                Set GetMapList = Nothing\\n        End If\\nEnd Function\\n\\n'Map string, list\\nFunction AddToSet(ByRef collectMap As Collection, ByVal item As String) As Boolean\\n        If Not Contains(collectMap, item) Then\\n                collectMap.Add item, item\\n        End If\\n        AddToSet = True\\nEnd Function\\n\\nFunction AddToMap(ByRef collectMap As Collection, keyName As String, value As String) As Boolean\\n        If Not Contains(collectMap, keyName) Then\\n                collectMap.Add value, keyName\\n        End If\\n        AddToMap = True\\nEnd Function\\n\\nFunction Contains(ByRef collectMap As Collection, ByVal item As String) As Boolean\\n        On Error Resume Next\\n        collectMap.item(item)\\n        Contains = (Err.Number = 0)\\n        'On Error GoTo 0\\nEnd Function\\n\\nFunction RemoveFromSet(ByRef collectMap As Collection, ByVal item As String)\\n        If Contains(collectMap, item) Then\\n                collectMap.Remove item\\n        RemoveFromSet = 0\\n        Else\\n                RemoveFromSet = -1\\n        End If\\nEnd Function"
    },
    {
        "instruction": "高亮显示CR240*,[CR270LA]材质的组件, part number表格路径D:\\Documents\\catiaVB\\TB.xlsx。",
        "input": "",
        "output": "Language=CATSCRIPT\\n\\n'test main run\\nSub CATMain()\\n\\n        Dim excelPath = \"D:\\Documents\\catiaVB\\TB.xlsx\" \\n        Dim materials = \"CR240*,[CR270LA]\" \\n        \\n        Dim materialNames() As String = StrToArr materials\\n        \\n        ' 不支持Dir\\n        ' 检查文件是否存在\\n        'MsgBox \"FileExists: \" \u0026 fso.FileExists(excelPath)\\n        If fso.FileExists(excelPath) = False Then\\n        'MsgBox \"Excel文件不存在: \" \u0026 excelPath\\n                excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\\n                If fso.FileExists(excelPath) = False Then\\n                        MsgBox \"Excel文件不存在: \" \u0026 excelPath\\n                        Exit Sub\\n                End If\\n        End If\\n        Dim partNumberTitle\\n        partNumberTitle = \"Part number\"\\n        ' 创建一个 Dictionary 对象\\n        ' 创建 Scripting.Dictionary 对象\\n        Dim mapSearch\\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")\\n        'Dim mapSearch As New Collection\\n        'AddToMapValueList mapSearch, \"MaterialName\", \"CR240*\"\\n        'AddToMapValueList mapSearch, \"MaterialName\", \"*CR270LA*\"\\n        \\n        Dim expression\\n        expression = materials\\n        Dim strLen\\n        strLen = Len(expression)\\n        Dim splitPosition\\n        splitPosition = 1\\n        Dim exprChar\\n        For i = 1 To strLen\\n            exprChar = Mid(expression, i, 1)\\n            If Mid(expression, i, 1) = \",\" Then\\n                Dim mess\\n                mess = Mid(expression, splitPosition, i - splitPosition)\\n                splitPosition = i + 1\\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\\n            End If\\n        Next\\n        If splitPosition \u003c strLen Then\\n            Dim mess2\\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\\n        End If\\n    \\n\\n        Dim showPartNumber\\n        'showPartNumber.Add key:=\"test\", item:=\"test\"\\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\\n        'Set showPartNumber = New Collection\\n        'Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\\n        'MsgBox (\"CompareConditionCheck: \" \u0026 CompareConditionCheck(\"[CR270LA]\", \"CR240*\"))\\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\\n\\n        '---------------------------------------------------------------------------------\\n        'loop children\\n        Dim showChildComps As Object\\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\\n        'add root Document\\n        'childComps.Add item:=rootProduct.Name, key:=rootProduct.Name\\n        Dim transparencyChildComps As Object\\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\\n        Dim ret As Integer\\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\\nEnd Sub\\n\\n'getting all children products and set show or hide, and set Opacity\\n'Input: partNames: part number list\\n'       showChildComps: conform to part number, set show and no Opacity\\n'       transparencyChildComps: not conform to part number, set Opacity\\n'Return: 0 ok, other error\\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\\n        '使用catiaApp调用COM接口的方法\\n        Dim rootDoc As ProductDocument\\n        Set rootDoc = CATIA.ActiveDocument\\n        If rootDoc Is Nothing Then\\n            'ConcatMessagesStrings True, \"Can not get active document!\"\\n            CATIALoopChildren = -2\\n            Exit Function\\n        End If\\n\\n        'ConcatMessagesStrings False, \"active document:\", rootDoc.FullName\\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\\n            'ConcatMessagesStrings True, \"current document is not a assembly!\"\\n            CATIALoopChildren = -3\\n            Exit Function\\n        End If\\n\\n        'Dim ret As Integer\\n        'Product\\n        Dim rootProduct As Product\\n        Set rootProduct = rootDoc.Product\\n        Dim productChildren As Products\\n        Set productChildren = rootProduct.Products\\n        \\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\\n                \\n                CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\\n                \\nEnd Function\\n\\n'change products show or hide, and set Opacity\\n'Input: productRoot: root product\\n'       productNodes: select component list\\n'       isShow: \u003c0 not change, 0 show, 1 hide\\n'       isTransparency:\u003c0 no Transparency, 0~100 set Transparency(0~100)\\n'Return: 0 ok, other error\\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\\n        'CATIA.ActiveDocument.Selection.Search (\"Sketcher.AbsoluteAxis,all\")\\n        'CATIA.ActiveDocument.Selection.VisProperties.SetShow\\n        Dim parentDoc As Document\\n        Set parentDoc = productRoot.Parent\\n        If parentDoc Is Nothing Then\\n                ChangeCompState = -3\\n                Exit Function\\n        End If\\n                        \\n        Dim selectionNode As Selection\\n        Set selectionNode = parentDoc.Selection\\n        If selectionNode Is Nothing Then\\n                ChangeCompState = -4\\n                Exit Function\\n        End If\\n\\n        Dim visProp As visPropertySet\\n        Set visProp = selectionNode.VisProperties\\n        If visProp Is Nothing Then\\n                ChangeCompState = -5\\n                Exit Function\\n        End If\\n\\n        Dim productNode As Variant\\n        For Each productNode In productNodes\\n                selectionNode.Add productNode\\n        Next\\n\\n        Set visProp = visProp.Parent\\n        If visProp Is Nothing Then\\n                ChangeCompState = -6\\n                Exit Function\\n        End If\\n        \\n        'CatVisPropertyShow.catVisPropertyNoShowAttr    1\\n    'CatVisPropertyShow.catVisPropertyShowAttr      0\\n    If isShow \u003c 0 Then\\n        Dim showState As CatVisPropertyShow\\n        visProp.GetShow showState\\n        If showState \u003c\u003e isShow Then\\n            visProp.SetShow isShow\\n        End If\\n    End If\\n        \\n        If isTransparency \u003c 0 Then\\n        visProp.SetVisibleOpacity 100, 0\\n    Else\\n        visProp.SetVisibleOpacity isTransparency, 1\\n    End If\\n        selectionNode.Clear\\n        ChangeCompState = 0\\nEnd Function\\n\\n'recursive in getting all children products\\n'Input: productRoot: root product\\n'       productNode: current component product\\n'       partNames: part number list\\n'       showChildComps: conform to part number, set show and no Opacity\\n'       transparencyChildComps: not conform to part number, set Opacity\\n'       parentIsOk: parent product is conform to part number\\n'Return: 0 ok, other error\\nFunction GetChildren(ByRef productRoot As Product, ByRef productNode As Product, ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object, ByVal parentIsOk As Boolean) As Integer\\n    'Get children products as array\\n    Dim productsArr As Products\\n        Set productsArr = productNode.Products\\n        If productsArr Is Nothing Then\\n                GetChildren = -2\\n                Exit Function\\n        End If\\n        Dim returnVisable As Integer\\n        returnVisable = 0\\n        '0 default\\n        '1 all hide\\n        '2 all show\\n        '3 hide\\show\\n        Dim searchedID\\n        Set searchedID = CreateObject(\"Scripting.Dictionary\")\\n\\n        'On Error Resume Next\\n        For i = 1 To productsArr.Count\\n                'Get child\\n                Dim pdtChild As Product\\n                Set pdtChild = productsArr.item(i)\\n                'MsgBox \"now:\" \u0026 pdtChild.Name\\n                If parentIsOk Then\\n                        showChildComps.Add pdtChild\\n                        returnVisable = 2\\n                Else\\n                        Dim currentNodeIsSearched As Boolean\\n                        currentNodeIsSearched = CheckPartNumberIsInput(pdtChild, partNames)\\n                        'ret = ConcatMessagesStrings(True, pdtChild.PartNumber, ret, TypeName(pdtChild))\\n                        'If currentNodeIsSearched Then\\n                        '    searchedID.add(i, i)\\n                        '    parentIsOk = True\\n                        'End If\\n                        'check children-children\\n                        Dim ret As Integer\\n                        ret = 0\\n                        If CheckReferenceIsProductByDocType(pdtChild) Then\\n                                ret = GetChildren(productRoot, pdtChild, partNames, showChildComps, transparencyChildComps, currentNodeIsSearched)\\n                        End If\\n                        If ret \u003e 1 Or currentNodeIsSearched Then\\n                                searchedID.Add i, i\\n                                showChildComps.Add pdtChild\\n                                returnVisable = 2\\n                        End If\\n                End If\\n        Next\\n\\n    If returnVisable \u003c\u003e 0 Then\\n        For i = 1 To productsArr.Count\\n            If Not searchedID.Exists(i) Then\\n                transparencyChildComps.Add productsArr.item(i)\\n            End If\\n        Next\\n    End If\\n\\n    Set productsArr = Nothing\\n\\n    GetChildren = returnVisable\\n\\nEnd Function\\n\\n'Check Reference Product type\\n'Input:  Product component\\n'Return: CATProduct true, other false\\nFunction CheckReferenceIsProductByDocType(ByRef productNode As Product) As Boolean\\n    CheckReferenceIsProductByDocType = False\\n    'Retrieve the reference product\\n    Dim refpdt As Product\\n    Set refpdt = productNode.ReferenceProduct\\n    \\n    If Not refpdt Is Nothing Then\\n        Dim parentObj As CATBaseDispatch\\n        Set parentObj = refpdt.Parent\\n        \\n        'MsgBox (\"TypeName:\" \u0026 TypeName(parentObj))\\n        If StrComp(TypeName(parentObj), \"ProductDocument\", vbTextCompare) = 0 Then\\n            'CATPart CATProduct\\n            CheckReferenceIsProductByDocType = True\\n        End If\\n        Set parentObj = Nothing\\n        \\n    End If\\n    Set refpdt = Nothing\\n        \\nEnd Function\\n\\n'Check PartNumber Is same as Input\\n'Input: productNode: current component product\\n'       partNames: part number list\\n'Return: True, False\\nFunction CheckPartNumberIsInput(ByRef productNode As Product, ByRef partNames As Object) As Boolean\\n    'test\\n    'CheckPartNumberIsInput = True\\n    'Exit Function\\n    CheckPartNumberIsInput = False\\n        Dim pNumStr As String\\n        'MsgBox productNode.Name\\n        pNumStr = productNode.PartNumber\\n    Dim itemStrReduce As String\\n    Dim item As Variant\\n    For Each item In partNames\\n                itemStr = item\\n                itemStrReduce = Left(pNumStr,Len(itemStr))\\n        If itemStrReduce = itemStr Then\\n            CheckPartNumberIsInput = True\\n            Exit Function\\n        End If\\n    Next\\nEnd Function\\n\\n'---------------------------------------------------------------------------------------------------------\\n'recursive in getting all children products\\n'Input: showPartNumber: get part number in excel\\n'       inputSearch: intput conditions\\n'       excelPath: excel Path\\n'       partNumberTitle: partNumber Title in excel table head\\n'Return: 0 ok, other error\\nFunction ReadExcel(ByRef showPartNumber As Object, inputSearch As Object, excelPath As String, partNumberTitle As String)\\n        ' 创建 Excel 应用程序对象\\n        Dim ExcelApp\\n        Set ExcelApp = CreateObject(\"Excel.Application\")\\n        ' 设置 Excel 应用程序可见\\n        ExcelApp.Visible = False\\n        ' 禁用 Excel 的警告和确认对话框\\n        ExcelApp.DisplayAlerts = False\\n        ' 打开 Excel 文件\\n        Dim Workbook\\n        Set Workbook = ExcelApp.Workbooks.Open(excelPath)\\n        ' 选择工作表\\n        Dim Sheets\\n        Set Sheets = Workbook.Sheets\\n        Dim Sheet\\n        Set Sheet = Workbook.Sheets(1)\\n        ' 输出工作表名称\\n        'MsgBox(\"工作表名称: \" \u0026 Sheet.Name)\\n\\n        '获取表头\\n        Dim allRows, allCols\\n        allRows = Sheet.UsedRange.Rows.Count\\n        allCols = Sheet.UsedRange.Columns.Count\\n        Dim row, col\\n        '获取PartNumber表头colum\\n        Dim PartNumberCol\\n        PartNumberCol = 0\\n        For col = 1 To allCols\\n                Dim CellValue\\n                CellValue = Sheet.cells(1, col).value\\n                If CellValue = partNumberTitle Then\\n                        PartNumberCol = col\\n                        Exit For\\n                End If\\n        Next\\n        'MsgBox(\"Part number column: \" \u0026 PartNumberCol)\\n\\n        'check value\\n        If PartNumberCol \u003c\u003e 0 Then\\n                For col = 1 To allCols\\n                        Dim CellTitle\\n                        CellTitle = Sheet.cells(1, col).value\\n                        Dim listCheck As Object\\n                        Set listCheck = GetMapList(inputSearch, CellTitle)\\n                        If Not listCheck Is Nothing Then\\n                                For row = 2 To allRows\\n                                        If Not Sheet.cells(row, col) Is Nothing Then\\n                                                Dim CellValue2 As String\\n                                                CellValue2 = Sheet.cells(row, col).value\\n\\n                                                For Each item In listCheck\\n                                                        'MsgBox(\"CellValue: \" \u0026 CellValue \u0026 \" item: \" \u0026 item)\\n                                                        Dim ret\\n                                                        'ret = True\\n                                                        'ret = CompareConditionCheck(CellValue2, item)\\n                                                        \\n                                                        'CATScript can not identify 'Like' key word\\n                                                        If CustomLikeAddAnyToPattern(CellValue2, item, True, True) Then\\n                                                                ret = True\\n                                                        Else\\n                                                                ret = False\\n                                                        End If\\n\\n                                                        If ret Then\\n                                                                Dim pNumber\\n                                                                pNumber = Sheet.cells(row, PartNumberCol).value\\n                                                                'MsgBox (\"Find Condition 行: \" \u0026 row \u0026 \", 列: \" \u0026 col \u0026 \", 值: \" \u0026 CellValue2 \u0026\",\\r\\n Find Part number: \" \u0026 pNumber)\\n                                                                AddToMap showPartNumber, pNumber, pNumber\\n                                                                Exit For\\n                                                        End If\\n\\n                                                Next\\n\\n                                        End If\\n                                Next\\n                        End If\\n                Next\\n        Else\\n                MsgBox(\"Can not find Part number in Excel!\")\\n        End If\\n        ' 释放对象\\n        Set Sheet = Nothing\\n        Set Sheets = Nothing\\n         ' 关闭 Excel 文件\\n        Workbook.Close(False)\\n        Set Workbook = Nothing\\n        ExcelApp.Quit\\n        Set ExcelApp = Nothing\\n        ' 清除 COM 对象\\n        'Call ReleaseCOMObjects\\n        ReadExcel = 0\\nEnd Function\\n\\n'------------------------------------------------------------------------------------------------------\\n'is add Asterisk in pattern\\n'Input: expression: expression string in excel\\n'       pattern: intput conditions pattern\\n'       preAsterisk: is add prefix Asterisk\\n'       sufAsterisk: is add suffix Asterisk\\n'Return: True, False\\nFunction CustomLikeAddAnyToPattern(expression As String, pattern As String, preAsterisk As Boolean, sufAsterisk As Boolean) As Boolean\\n        Dim valReg As String\\n        valReg = pattern\\n        If preAsterisk Then\\n                valReg = \"*\" \u0026 valReg\\n        End If\\n        If sufAsterisk Then\\n                valReg = valReg \u0026 \"*\"\\n        End If\\n        'MsgBox \"CellValue2:\" \u0026 CellValue2 \u0026 \" valReg:\" \u0026 valReg\\n        CustomLikeAddAnyToPattern = CustomLike(expression, valReg)\\nEnd Function\\n\\n'Custom VB Like Function, fuzzy search string\\n'Input: expression: expression string in excel\\n'       pattern: intput conditions pattern\\n'Return: True, False\\nFunction CustomLike(expression As String, pattern As String) As Boolean\\n        Dim i As Long, j As Long\\n        Dim exprLen As Long, patLen As Long\\n        Dim exprChar As String, patChar As String\\n        Dim exprPos As Long, patPos As Long\\n        Dim starPos As Long, exprStarPos As Long\\n\\n        exprLen = Len(expression)\\n        patLen = Len(pattern)\\n        exprPos = 1\\n        patPos = 1\\n        starPos = 0\\n        exprStarPos = 0\\n\\n        While exprPos \u003c= exprLen And patPos \u003c= patLen\\n                If patPos \u003c= patLen Then\\n                        patChar = Mid(pattern, patPos, 1)\\n                Else\\n                        patChar = \"\"\\n                End If\\n\\n                If exprPos \u003c= exprLen Then\\n                        exprChar = Mid(expression, exprPos, 1)\\n                Else\\n                        exprChar = \"\"\\n                End If\\n\\n                Select Case patChar\\n                        Case \"?\"\\n                                If exprChar = \"\" Then\\n                                        CustomLike = False\\n                                        Exit Function\\n                                End If\\n                                exprPos = exprPos + 1\\n                                patPos = patPos + 1\\n                        Case \"[\"\\n                                Dim charList As String, negated As Boolean\\n                                negated = False\\n                                patPos = patPos + 1\\n                                charList = \"\"\\n                                Do While patPos \u003c= patLen\\n                                        patChar = Mid(pattern, patPos, 1)\\n                                        If patChar = \"]\" Then\\n                                                patPos = patPos + 1\\n                                                Exit Do\\n                                        ElseIf patChar = \"^\" And Not negated Then\\n                                                negated = True\\n                                        Else\\n                                                charList = charList \u0026 patChar\\n                                        End If\\n                                        patPos = patPos + 1\\n                                Loop\\n                                If (negated And InStr(1, charList, exprChar, vbBinaryCompare) \u003e 0) Or (Not negated And InStr(1, charList, exprChar, vbBinaryCompare) = 0) Then\\n                                        CustomLike = False\\n                                        Exit Function\\n                                End If\\n                                exprPos = exprPos + 1\\n                        Case \"*\"\\n                                If patPos = patLen Then\\n                                        CustomLike = True\\n                                        Exit Function\\n                                End If\\n                                starPos = patPos\\n                                exprStarPos = exprPos\\n                                patPos = patPos + 1\\n                        Case Else\\n                                If exprChar \u003c\u003e patChar Then\\n                                        If starPos = 0 Then\\n                                                CustomLike = False\\n                                                Exit Function\\n                                        Else\\n                                                patPos = starPos + 1\\n                                                exprPos = exprStarPos + 1\\n                                                exprStarPos = exprPos\\n                                        End If\\n                                Else\\n                                        exprPos = exprPos + 1\\n                                        patPos = patPos + 1\\n                                End If\\n                End Select\\n        WEnd\\n\\n        If patPos = patLen Then\\n                CustomLike = True\\n        Else\\n                CustomLike = False\\n        End If\\nEnd Function\\n\\n'------------------------------------------------------------------------------------------------------        \\n' 创建一个函数来向 Map 中添加键值对\\nFunction AddToMapValueList(map, key, value)\\n        If Not map.Exists(key) Then\\n                ' 如果键不存在，则创建一个新的数组\\n                Dim newList\\n                Set newList = CreateObject(\"System.Collections.ArrayList\")\\n                newList.Add(value)\\n                map.Add key, newList\\n        Else\\n                ' 如果键已存在，则向现有列表中添加值\\n                Dim list\\n                Set list = map(key)\\n                list.Add(value)\\n        End If\\n        AddToMapValueList = 0\\nEnd Function\\n\\n' 创建一个函数来从 Map 中获取列表\\nFunction GetMapList(map, key)\\n        If map.Exists(key) Then\\n                Set GetMapList = map(key)\\n        Else\\n                Set GetMapList = Nothing\\n        End If\\nEnd Function\\n\\n'Map string, list\\nFunction AddToSet(ByRef collectMap As Collection, ByVal item As String) As Boolean\\n        If Not Contains(collectMap, item) Then\\n                collectMap.Add item, item\\n        End If\\n        AddToSet = True\\nEnd Function\\n\\nFunction AddToMap(ByRef collectMap As Collection, keyName As String, value As String) As Boolean\\n        If Not Contains(collectMap, keyName) Then\\n                collectMap.Add value, keyName\\n        End If\\n        AddToMap = True\\nEnd Function\\n\\nFunction Contains(ByRef collectMap As Collection, ByVal item As String) As Boolean\\n        On Error Resume Next\\n        collectMap.item(item)\\n        Contains = (Err.Number = 0)\\n        'On Error GoTo 0\\nEnd Function\\n\\nFunction RemoveFromSet(ByRef collectMap As Collection, ByVal item As String)\\n        If Contains(collectMap, item) Then\\n                collectMap.Remove item\\n        RemoveFromSet = 0\\n        Else\\n                RemoveFromSet = -1\\n        End If\\nEnd Function"
    },
    {
        "instruction": "高亮显示./excel.xlsx中CR240*材质的组件。",
        "input": "",
        "output": "Language=CATSCRIPT\\n\\n'test main run\\nSub CATMain()\\n\\n        Dim excelPath = \"./excel.xlsx\" \\n        Dim materials = \"CR240*\" \\n        \\n        Dim materialNames() As String = StrToArr materials\\n        \\n        ' 不支持Dir\\n        ' 检查文件是否存在\\n        'MsgBox \"FileExists: \" \u0026 fso.FileExists(excelPath)\\n        If fso.FileExists(excelPath) = False Then\\n        'MsgBox \"Excel文件不存在: \" \u0026 excelPath\\n                excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\\n                If fso.FileExists(excelPath) = False Then\\n                        MsgBox \"Excel文件不存在: \" \u0026 excelPath\\n                        Exit Sub\\n                End If\\n        End If\\n        Dim partNumberTitle\\n        partNumberTitle = \"Part number\"\\n        ' 创建一个 Dictionary 对象\\n        ' 创建 Scripting.Dictionary 对象\\n        Dim mapSearch\\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")\\n        'Dim mapSearch As New Collection\\n        'AddToMapValueList mapSearch, \"MaterialName\", \"CR240*\"\\n        'AddToMapValueList mapSearch, \"MaterialName\", \"*CR270LA*\"\\n        \\n        Dim expression\\n        expression = materials\\n        Dim strLen\\n        strLen = Len(expression)\\n        Dim splitPosition\\n        splitPosition = 1\\n        Dim exprChar\\n        For i = 1 To strLen\\n            exprChar = Mid(expression, i, 1)\\n            If Mid(expression, i, 1) = \",\" Then\\n                Dim mess\\n                mess = Mid(expression, splitPosition, i - splitPosition)\\n                splitPosition = i + 1\\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\\n            End If\\n        Next\\n        If splitPosition \u003c strLen Then\\n            Dim mess2\\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\\n        End If\\n    \\n\\n        Dim showPartNumber\\n        'showPartNumber.Add key:=\"test\", item:=\"test\"\\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\\n        'Set showPartNumber = New Collection\\n        'Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\\n        'MsgBox (\"CompareConditionCheck: \" \u0026 CompareConditionCheck(\"[CR270LA]\", \"CR240*\"))\\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\\n\\n        '---------------------------------------------------------------------------------\\n        'loop children\\n        Dim showChildComps As Object\\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\\n        'add root Document\\n        'childComps.Add item:=rootProduct.Name, key:=rootProduct.Name\\n        Dim transparencyChildComps As Object\\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\\n        Dim ret As Integer\\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\\nEnd Sub\\n\\n'getting all children products and set show or hide, and set Opacity\\n'Input: partNames: part number list\\n'       showChildComps: conform to part number, set show and no Opacity\\n'       transparencyChildComps: not conform to part number, set Opacity\\n'Return: 0 ok, other error\\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\\n        '使用catiaApp调用COM接口的方法\\n        Dim rootDoc As ProductDocument\\n        Set rootDoc = CATIA.ActiveDocument\\n        If rootDoc Is Nothing Then\\n            'ConcatMessagesStrings True, \"Can not get active document!\"\\n            CATIALoopChildren = -2\\n            Exit Function\\n        End If\\n\\n        'ConcatMessagesStrings False, \"active document:\", rootDoc.FullName\\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\\n            'ConcatMessagesStrings True, \"current document is not a assembly!\"\\n            CATIALoopChildren = -3\\n            Exit Function\\n        End If\\n\\n        'Dim ret As Integer\\n        'Product\\n        Dim rootProduct As Product\\n        Set rootProduct = rootDoc.Product\\n        Dim productChildren As Products\\n        Set productChildren = rootProduct.Products\\n        \\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\\n                \\n                CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\\n                \\nEnd Function\\n\\n'change products show or hide, and set Opacity\\n'Input: productRoot: root product\\n'       productNodes: select component list\\n'       isShow: \u003c0 not change, 0 show, 1 hide\\n'       isTransparency:\u003c0 no Transparency, 0~100 set Transparency(0~100)\\n'Return: 0 ok, other error\\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\\n        'CATIA.ActiveDocument.Selection.Search (\"Sketcher.AbsoluteAxis,all\")\\n        'CATIA.ActiveDocument.Selection.VisProperties.SetShow\\n        Dim parentDoc As Document\\n        Set parentDoc = productRoot.Parent\\n        If parentDoc Is Nothing Then\\n                ChangeCompState = -3\\n                Exit Function\\n        End If\\n                        \\n        Dim selectionNode As Selection\\n        Set selectionNode = parentDoc.Selection\\n        If selectionNode Is Nothing Then\\n                ChangeCompState = -4\\n                Exit Function\\n        End If\\n\\n        Dim visProp As visPropertySet\\n        Set visProp = selectionNode.VisProperties\\n        If visProp Is Nothing Then\\n                ChangeCompState = -5\\n                Exit Function\\n        End If\\n\\n        Dim productNode As Variant\\n        For Each productNode In productNodes\\n                selectionNode.Add productNode\\n        Next\\n\\n        Set visProp = visProp.Parent\\n        If visProp Is Nothing Then\\n                ChangeCompState = -6\\n                Exit Function\\n        End If\\n        \\n        'CatVisPropertyShow.catVisPropertyNoShowAttr    1\\n    'CatVisPropertyShow.catVisPropertyShowAttr      0\\n    If isShow \u003c 0 Then\\n        Dim showState As CatVisPropertyShow\\n        visProp.GetShow showState\\n        If showState \u003c\u003e isShow Then\\n            visProp.SetShow isShow\\n        End If\\n    End If\\n        \\n        If isTransparency \u003c 0 Then\\n        visProp.SetVisibleOpacity 100, 0\\n    Else\\n        visProp.SetVisibleOpacity isTransparency, 1\\n    End If\\n        selectionNode.Clear\\n        ChangeCompState = 0\\nEnd Function\\n\\n'recursive in getting all children products\\n'Input: productRoot: root product\\n'       productNode: current component product\\n'       partNames: part number list\\n'       showChildComps: conform to part number, set show and no Opacity\\n'       transparencyChildComps: not conform to part number, set Opacity\\n'       parentIsOk: parent product is conform to part number\\n'Return: 0 ok, other error\\nFunction GetChildren(ByRef productRoot As Product, ByRef productNode As Product, ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object, ByVal parentIsOk As Boolean) As Integer\\n    'Get children products as array\\n    Dim productsArr As Products\\n        Set productsArr = productNode.Products\\n        If productsArr Is Nothing Then\\n                GetChildren = -2\\n                Exit Function\\n        End If\\n        Dim returnVisable As Integer\\n        returnVisable = 0\\n        '0 default\\n        '1 all hide\\n        '2 all show\\n        '3 hide\\show\\n        Dim searchedID\\n        Set searchedID = CreateObject(\"Scripting.Dictionary\")\\n\\n        'On Error Resume Next\\n        For i = 1 To productsArr.Count\\n                'Get child\\n                Dim pdtChild As Product\\n                Set pdtChild = productsArr.item(i)\\n                'MsgBox \"now:\" \u0026 pdtChild.Name\\n                If parentIsOk Then\\n                        showChildComps.Add pdtChild\\n                        returnVisable = 2\\n                Else\\n                        Dim currentNodeIsSearched As Boolean\\n                        currentNodeIsSearched = CheckPartNumberIsInput(pdtChild, partNames)\\n                        'ret = ConcatMessagesStrings(True, pdtChild.PartNumber, ret, TypeName(pdtChild))\\n                        'If currentNodeIsSearched Then\\n                        '    searchedID.add(i, i)\\n                        '    parentIsOk = True\\n                        'End If\\n                        'check children-children\\n                        Dim ret As Integer\\n                        ret = 0\\n                        If CheckReferenceIsProductByDocType(pdtChild) Then\\n                                ret = GetChildren(productRoot, pdtChild, partNames, showChildComps, transparencyChildComps, currentNodeIsSearched)\\n                        End If\\n                        If ret \u003e 1 Or currentNodeIsSearched Then\\n                                searchedID.Add i, i\\n                                showChildComps.Add pdtChild\\n                                returnVisable = 2\\n                        End If\\n                End If\\n        Next\\n\\n    If returnVisable \u003c\u003e 0 Then\\n        For i = 1 To productsArr.Count\\n            If Not searchedID.Exists(i) Then\\n                transparencyChildComps.Add productsArr.item(i)\\n            End If\\n        Next\\n    End If\\n\\n    Set productsArr = Nothing\\n\\n    GetChildren = returnVisable\\n\\nEnd Function\\n\\n'Check Reference Product type\\n'Input:  Product component\\n'Return: CATProduct true, other false\\nFunction CheckReferenceIsProductByDocType(ByRef productNode As Product) As Boolean\\n    CheckReferenceIsProductByDocType = False\\n    'Retrieve the reference product\\n    Dim refpdt As Product\\n    Set refpdt = productNode.ReferenceProduct\\n    \\n    If Not refpdt Is Nothing Then\\n        Dim parentObj As CATBaseDispatch\\n        Set parentObj = refpdt.Parent\\n        \\n        'MsgBox (\"TypeName:\" \u0026 TypeName(parentObj))\\n        If StrComp(TypeName(parentObj), \"ProductDocument\", vbTextCompare) = 0 Then\\n            'CATPart CATProduct\\n            CheckReferenceIsProductByDocType = True\\n        End If\\n        Set parentObj = Nothing\\n        \\n    End If\\n    Set refpdt = Nothing\\n        \\nEnd Function\\n\\n'Check PartNumber Is same as Input\\n'Input: productNode: current component product\\n'       partNames: part number list\\n'Return: True, False\\nFunction CheckPartNumberIsInput(ByRef productNode As Product, ByRef partNames As Object) As Boolean\\n    'test\\n    'CheckPartNumberIsInput = True\\n    'Exit Function\\n    CheckPartNumberIsInput = False\\n        Dim pNumStr As String\\n        'MsgBox productNode.Name\\n        pNumStr = productNode.PartNumber\\n    Dim itemStrReduce As String\\n    Dim item As Variant\\n    For Each item In partNames\\n                itemStr = item\\n                itemStrReduce = Left(pNumStr,Len(itemStr))\\n        If itemStrReduce = itemStr Then\\n            CheckPartNumberIsInput = True\\n            Exit Function\\n        End If\\n    Next\\nEnd Function\\n\\n'---------------------------------------------------------------------------------------------------------\\n'recursive in getting all children products\\n'Input: showPartNumber: get part number in excel\\n'       inputSearch: intput conditions\\n'       excelPath: excel Path\\n'       partNumberTitle: partNumber Title in excel table head\\n'Return: 0 ok, other error\\nFunction ReadExcel(ByRef showPartNumber As Object, inputSearch As Object, excelPath As String, partNumberTitle As String)\\n        ' 创建 Excel 应用程序对象\\n        Dim ExcelApp\\n        Set ExcelApp = CreateObject(\"Excel.Application\")\\n        ' 设置 Excel 应用程序可见\\n        ExcelApp.Visible = False\\n        ' 禁用 Excel 的警告和确认对话框\\n        ExcelApp.DisplayAlerts = False\\n        ' 打开 Excel 文件\\n        Dim Workbook\\n        Set Workbook = ExcelApp.Workbooks.Open(excelPath)\\n        ' 选择工作表\\n        Dim Sheets\\n        Set Sheets = Workbook.Sheets\\n        Dim Sheet\\n        Set Sheet = Workbook.Sheets(1)\\n        ' 输出工作表名称\\n        'MsgBox(\"工作表名称: \" \u0026 Sheet.Name)\\n\\n        '获取表头\\n        Dim allRows, allCols\\n        allRows = Sheet.UsedRange.Rows.Count\\n        allCols = Sheet.UsedRange.Columns.Count\\n        Dim row, col\\n        '获取PartNumber表头colum\\n        Dim PartNumberCol\\n        PartNumberCol = 0\\n        For col = 1 To allCols\\n                Dim CellValue\\n                CellValue = Sheet.cells(1, col).value\\n                If CellValue = partNumberTitle Then\\n                        PartNumberCol = col\\n                        Exit For\\n                End If\\n        Next\\n        'MsgBox(\"Part number column: \" \u0026 PartNumberCol)\\n\\n        'check value\\n        If PartNumberCol \u003c\u003e 0 Then\\n                For col = 1 To allCols\\n                        Dim CellTitle\\n                        CellTitle = Sheet.cells(1, col).value\\n                        Dim listCheck As Object\\n                        Set listCheck = GetMapList(inputSearch, CellTitle)\\n                        If Not listCheck Is Nothing Then\\n                                For row = 2 To allRows\\n                                        If Not Sheet.cells(row, col) Is Nothing Then\\n                                                Dim CellValue2 As String\\n                                                CellValue2 = Sheet.cells(row, col).value\\n\\n                                                For Each item In listCheck\\n                                                        'MsgBox(\"CellValue: \" \u0026 CellValue \u0026 \" item: \" \u0026 item)\\n                                                        Dim ret\\n                                                        'ret = True\\n                                                        'ret = CompareConditionCheck(CellValue2, item)\\n                                                        \\n                                                        'CATScript can not identify 'Like' key word\\n                                                        If CustomLikeAddAnyToPattern(CellValue2, item, True, True) Then\\n                                                                ret = True\\n                                                        Else\\n                                                                ret = False\\n                                                        End If\\n\\n                                                        If ret Then\\n                                                                Dim pNumber\\n                                                                pNumber = Sheet.cells(row, PartNumberCol).value\\n                                                                'MsgBox (\"Find Condition 行: \" \u0026 row \u0026 \", 列: \" \u0026 col \u0026 \", 值: \" \u0026 CellValue2 \u0026\",\\r\\n Find Part number: \" \u0026 pNumber)\\n                                                                AddToMap showPartNumber, pNumber, pNumber\\n                                                                Exit For\\n                                                        End If\\n\\n                                                Next\\n\\n                                        End If\\n                                Next\\n                        End If\\n                Next\\n        Else\\n                MsgBox(\"Can not find Part number in Excel!\")\\n        End If\\n        ' 释放对象\\n        Set Sheet = Nothing\\n        Set Sheets = Nothing\\n         ' 关闭 Excel 文件\\n        Workbook.Close(False)\\n        Set Workbook = Nothing\\n        ExcelApp.Quit\\n        Set ExcelApp = Nothing\\n        ' 清除 COM 对象\\n        'Call ReleaseCOMObjects\\n        ReadExcel = 0\\nEnd Function\\n\\n'------------------------------------------------------------------------------------------------------\\n'is add Asterisk in pattern\\n'Input: expression: expression string in excel\\n'       pattern: intput conditions pattern\\n'       preAsterisk: is add prefix Asterisk\\n'       sufAsterisk: is add suffix Asterisk\\n'Return: True, False\\nFunction CustomLikeAddAnyToPattern(expression As String, pattern As String, preAsterisk As Boolean, sufAsterisk As Boolean) As Boolean\\n        Dim valReg As String\\n        valReg = pattern\\n        If preAsterisk Then\\n                valReg = \"*\" \u0026 valReg\\n        End If\\n        If sufAsterisk Then\\n                valReg = valReg \u0026 \"*\"\\n        End If\\n        'MsgBox \"CellValue2:\" \u0026 CellValue2 \u0026 \" valReg:\" \u0026 valReg\\n        CustomLikeAddAnyToPattern = CustomLike(expression, valReg)\\nEnd Function\\n\\n'Custom VB Like Function, fuzzy search string\\n'Input: expression: expression string in excel\\n'       pattern: intput conditions pattern\\n'Return: True, False\\nFunction CustomLike(expression As String, pattern As String) As Boolean\\n        Dim i As Long, j As Long\\n        Dim exprLen As Long, patLen As Long\\n        Dim exprChar As String, patChar As String\\n        Dim exprPos As Long, patPos As Long\\n        Dim starPos As Long, exprStarPos As Long\\n\\n        exprLen = Len(expression)\\n        patLen = Len(pattern)\\n        exprPos = 1\\n        patPos = 1\\n        starPos = 0\\n        exprStarPos = 0\\n\\n        While exprPos \u003c= exprLen And patPos \u003c= patLen\\n                If patPos \u003c= patLen Then\\n                        patChar = Mid(pattern, patPos, 1)\\n                Else\\n                        patChar = \"\"\\n                End If\\n\\n                If exprPos \u003c= exprLen Then\\n                        exprChar = Mid(expression, exprPos, 1)\\n                Else\\n                        exprChar = \"\"\\n                End If\\n\\n                Select Case patChar\\n                        Case \"?\"\\n                                If exprChar = \"\" Then\\n                                        CustomLike = False\\n                                        Exit Function\\n                                End If\\n                                exprPos = exprPos + 1\\n                                patPos = patPos + 1\\n                        Case \"[\"\\n                                Dim charList As String, negated As Boolean\\n                                negated = False\\n                                patPos = patPos + 1\\n                                charList = \"\"\\n                                Do While patPos \u003c= patLen\\n                                        patChar = Mid(pattern, patPos, 1)\\n                                        If patChar = \"]\" Then\\n                                                patPos = patPos + 1\\n                                                Exit Do\\n                                        ElseIf patChar = \"^\" And Not negated Then\\n                                                negated = True\\n                                        Else\\n                                                charList = charList \u0026 patChar\\n                                        End If\\n                                        patPos = patPos + 1\\n                                Loop\\n                                If (negated And InStr(1, charList, exprChar, vbBinaryCompare) \u003e 0) Or (Not negated And InStr(1, charList, exprChar, vbBinaryCompare) = 0) Then\\n                                        CustomLike = False\\n                                        Exit Function\\n                                End If\\n                                exprPos = exprPos + 1\\n                        Case \"*\"\\n                                If patPos = patLen Then\\n                                        CustomLike = True\\n                                        Exit Function\\n                                End If\\n                                starPos = patPos\\n                                exprStarPos = exprPos\\n                                patPos = patPos + 1\\n                        Case Else\\n                                If exprChar \u003c\u003e patChar Then\\n                                        If starPos = 0 Then\\n                                                CustomLike = False\\n                                                Exit Function\\n                                        Else\\n                                                patPos = starPos + 1\\n                                                exprPos = exprStarPos + 1\\n                                                exprStarPos = exprPos\\n                                        End If\\n                                Else\\n                                        exprPos = exprPos + 1\\n                                        patPos = patPos + 1\\n                                End If\\n                End Select\\n        WEnd\\n\\n        If patPos = patLen Then\\n                CustomLike = True\\n        Else\\n                CustomLike = False\\n        End If\\nEnd Function\\n\\n'------------------------------------------------------------------------------------------------------        \\n' 创建一个函数来向 Map 中添加键值对\\nFunction AddToMapValueList(map, key, value)\\n        If Not map.Exists(key) Then\\n                ' 如果键不存在，则创建一个新的数组\\n                Dim newList\\n                Set newList = CreateObject(\"System.Collections.ArrayList\")\\n                newList.Add(value)\\n                map.Add key, newList\\n        Else\\n                ' 如果键已存在，则向现有列表中添加值\\n                Dim list\\n                Set list = map(key)\\n                list.Add(value)\\n        End If\\n        AddToMapValueList = 0\\nEnd Function\\n\\n' 创建一个函数来从 Map 中获取列表\\nFunction GetMapList(map, key)\\n        If map.Exists(key) Then\\n                Set GetMapList = map(key)\\n        Else\\n                Set GetMapList = Nothing\\n        End If\\nEnd Function\\n\\n'Map string, list\\nFunction AddToSet(ByRef collectMap As Collection, ByVal item As String) As Boolean\\n        If Not Contains(collectMap, item) Then\\n                collectMap.Add item, item\\n        End If\\n        AddToSet = True\\nEnd Function\\n\\nFunction AddToMap(ByRef collectMap As Collection, keyName As String, value As String) As Boolean\\n        If Not Contains(collectMap, keyName) Then\\n                collectMap.Add value, keyName\\n        End If\\n        AddToMap = True\\nEnd Function\\n\\nFunction Contains(ByRef collectMap As Collection, ByVal item As String) As Boolean\\n        On Error Resume Next\\n        collectMap.item(item)\\n        Contains = (Err.Number = 0)\\n        'On Error GoTo 0\\nEnd Function\\n\\nFunction RemoveFromSet(ByRef collectMap As Collection, ByVal item As String)\\n        If Contains(collectMap, item) Then\\n                collectMap.Remove item\\n        RemoveFromSet = 0\\n        Else\\n                RemoveFromSet = -1\\n        End If\\nEnd Function"
    },
    {
        "instruction": "高亮显示CR240*,[CR270LA]材质的组件, part number表格路径./excel.xlsx。",
        "input": "",
        "output": "Language=CATSCRIPT\\n\\n'test main run\\nSub CATMain()\\n\\n        Dim excelPath = \"./excel.xlsx\" \\n        Dim materials = \"CR240*,[CR270LA]\" \\n        \\n        Dim materialNames() As String = StrToArr materials\\n        \\n        ' 不支持Dir\\n        ' 检查文件是否存在\\n        'MsgBox \"FileExists: \" \u0026 fso.FileExists(excelPath)\\n        If fso.FileExists(excelPath) = False Then\\n        'MsgBox \"Excel文件不存在: \" \u0026 excelPath\\n                excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\\n                If fso.FileExists(excelPath) = False Then\\n                        MsgBox \"Excel文件不存在: \" \u0026 excelPath\\n                        Exit Sub\\n                End If\\n        End If\\n        Dim partNumberTitle\\n        partNumberTitle = \"Part number\"\\n        ' 创建一个 Dictionary 对象\\n        ' 创建 Scripting.Dictionary 对象\\n        Dim mapSearch\\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")\\n        'Dim mapSearch As New Collection\\n        'AddToMapValueList mapSearch, \"MaterialName\", \"CR240*\"\\n        'AddToMapValueList mapSearch, \"MaterialName\", \"*CR270LA*\"\\n        \\n        Dim expression\\n        expression = materials\\n        Dim strLen\\n        strLen = Len(expression)\\n        Dim splitPosition\\n        splitPosition = 1\\n        Dim exprChar\\n        For i = 1 To strLen\\n            exprChar = Mid(expression, i, 1)\\n            If Mid(expression, i, 1) = \",\" Then\\n                Dim mess\\n                mess = Mid(expression, splitPosition, i - splitPosition)\\n                splitPosition = i + 1\\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\\n            End If\\n        Next\\n        If splitPosition \u003c strLen Then\\n            Dim mess2\\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\\n        End If\\n    \\n\\n        Dim showPartNumber\\n        'showPartNumber.Add key:=\"test\", item:=\"test\"\\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\\n        'Set showPartNumber = New Collection\\n        'Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\\n        'MsgBox (\"CompareConditionCheck: \" \u0026 CompareConditionCheck(\"[CR270LA]\", \"CR240*\"))\\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\\n\\n        '---------------------------------------------------------------------------------\\n        'loop children\\n        Dim showChildComps As Object\\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\\n        'add root Document\\n        'childComps.Add item:=rootProduct.Name, key:=rootProduct.Name\\n        Dim transparencyChildComps As Object\\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\\n        Dim ret As Integer\\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\\nEnd Sub\\n\\n'getting all children products and set show or hide, and set Opacity\\n'Input: partNames: part number list\\n'       showChildComps: conform to part number, set show and no Opacity\\n'       transparencyChildComps: not conform to part number, set Opacity\\n'Return: 0 ok, other error\\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\\n        '使用catiaApp调用COM接口的方法\\n        Dim rootDoc As ProductDocument\\n        Set rootDoc = CATIA.ActiveDocument\\n        If rootDoc Is Nothing Then\\n            'ConcatMessagesStrings True, \"Can not get active document!\"\\n            CATIALoopChildren = -2\\n            Exit Function\\n        End If\\n\\n        'ConcatMessagesStrings False, \"active document:\", rootDoc.FullName\\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\\n            'ConcatMessagesStrings True, \"current document is not a assembly!\"\\n            CATIALoopChildren = -3\\n            Exit Function\\n        End If\\n\\n        'Dim ret As Integer\\n        'Product\\n        Dim rootProduct As Product\\n        Set rootProduct = rootDoc.Product\\n        Dim productChildren As Products\\n        Set productChildren = rootProduct.Products\\n        \\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\\n                \\n                CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\\n                \\nEnd Function\\n\\n'change products show or hide, and set Opacity\\n'Input: productRoot: root product\\n'       productNodes: select component list\\n'       isShow: \u003c0 not change, 0 show, 1 hide\\n'       isTransparency:\u003c0 no Transparency, 0~100 set Transparency(0~100)\\n'Return: 0 ok, other error\\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\\n        'CATIA.ActiveDocument.Selection.Search (\"Sketcher.AbsoluteAxis,all\")\\n        'CATIA.ActiveDocument.Selection.VisProperties.SetShow\\n        Dim parentDoc As Document\\n        Set parentDoc = productRoot.Parent\\n        If parentDoc Is Nothing Then\\n                ChangeCompState = -3\\n                Exit Function\\n        End If\\n                        \\n        Dim selectionNode As Selection\\n        Set selectionNode = parentDoc.Selection\\n        If selectionNode Is Nothing Then\\n                ChangeCompState = -4\\n                Exit Function\\n        End If\\n\\n        Dim visProp As visPropertySet\\n        Set visProp = selectionNode.VisProperties\\n        If visProp Is Nothing Then\\n                ChangeCompState = -5\\n                Exit Function\\n        End If\\n\\n        Dim productNode As Variant\\n        For Each productNode In productNodes\\n                selectionNode.Add productNode\\n        Next\\n\\n        Set visProp = visProp.Parent\\n        If visProp Is Nothing Then\\n                ChangeCompState = -6\\n                Exit Function\\n        End If\\n        \\n        'CatVisPropertyShow.catVisPropertyNoShowAttr    1\\n    'CatVisPropertyShow.catVisPropertyShowAttr      0\\n    If isShow \u003c 0 Then\\n        Dim showState As CatVisPropertyShow\\n        visProp.GetShow showState\\n        If showState \u003c\u003e isShow Then\\n            visProp.SetShow isShow\\n        End If\\n    End If\\n        \\n        If isTransparency \u003c 0 Then\\n        visProp.SetVisibleOpacity 100, 0\\n    Else\\n        visProp.SetVisibleOpacity isTransparency, 1\\n    End If\\n        selectionNode.Clear\\n        ChangeCompState = 0\\nEnd Function\\n\\n'recursive in getting all children products\\n'Input: productRoot: root product\\n'       productNode: current component product\\n'       partNames: part number list\\n'       showChildComps: conform to part number, set show and no Opacity\\n'       transparencyChildComps: not conform to part number, set Opacity\\n'       parentIsOk: parent product is conform to part number\\n'Return: 0 ok, other error\\nFunction GetChildren(ByRef productRoot As Product, ByRef productNode As Product, ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object, ByVal parentIsOk As Boolean) As Integer\\n    'Get children products as array\\n    Dim productsArr As Products\\n        Set productsArr = productNode.Products\\n        If productsArr Is Nothing Then\\n                GetChildren = -2\\n                Exit Function\\n        End If\\n        Dim returnVisable As Integer\\n        returnVisable = 0\\n        '0 default\\n        '1 all hide\\n        '2 all show\\n        '3 hide\\show\\n        Dim searchedID\\n        Set searchedID = CreateObject(\"Scripting.Dictionary\")\\n\\n        'On Error Resume Next\\n        For i = 1 To productsArr.Count\\n                'Get child\\n                Dim pdtChild As Product\\n                Set pdtChild = productsArr.item(i)\\n                'MsgBox \"now:\" \u0026 pdtChild.Name\\n                If parentIsOk Then\\n                        showChildComps.Add pdtChild\\n                        returnVisable = 2\\n                Else\\n                        Dim currentNodeIsSearched As Boolean\\n                        currentNodeIsSearched = CheckPartNumberIsInput(pdtChild, partNames)\\n                        'ret = ConcatMessagesStrings(True, pdtChild.PartNumber, ret, TypeName(pdtChild))\\n                        'If currentNodeIsSearched Then\\n                        '    searchedID.add(i, i)\\n                        '    parentIsOk = True\\n                        'End If\\n                        'check children-children\\n                        Dim ret As Integer\\n                        ret = 0\\n                        If CheckReferenceIsProductByDocType(pdtChild) Then\\n                                ret = GetChildren(productRoot, pdtChild, partNames, showChildComps, transparencyChildComps, currentNodeIsSearched)\\n                        End If\\n                        If ret \u003e 1 Or currentNodeIsSearched Then\\n                                searchedID.Add i, i\\n                                showChildComps.Add pdtChild\\n                                returnVisable = 2\\n                        End If\\n                End If\\n        Next\\n\\n    If returnVisable \u003c\u003e 0 Then\\n        For i = 1 To productsArr.Count\\n            If Not searchedID.Exists(i) Then\\n                transparencyChildComps.Add productsArr.item(i)\\n            End If\\n        Next\\n    End If\\n\\n    Set productsArr = Nothing\\n\\n    GetChildren = returnVisable\\n\\nEnd Function\\n\\n'Check Reference Product type\\n'Input:  Product component\\n'Return: CATProduct true, other false\\nFunction CheckReferenceIsProductByDocType(ByRef productNode As Product) As Boolean\\n    CheckReferenceIsProductByDocType = False\\n    'Retrieve the reference product\\n    Dim refpdt As Product\\n    Set refpdt = productNode.ReferenceProduct\\n    \\n    If Not refpdt Is Nothing Then\\n        Dim parentObj As CATBaseDispatch\\n        Set parentObj = refpdt.Parent\\n        \\n        'MsgBox (\"TypeName:\" \u0026 TypeName(parentObj))\\n        If StrComp(TypeName(parentObj), \"ProductDocument\", vbTextCompare) = 0 Then\\n            'CATPart CATProduct\\n            CheckReferenceIsProductByDocType = True\\n        End If\\n        Set parentObj = Nothing\\n        \\n    End If\\n    Set refpdt = Nothing\\n        \\nEnd Function\\n\\n'Check PartNumber Is same as Input\\n'Input: productNode: current component product\\n'       partNames: part number list\\n'Return: True, False\\nFunction CheckPartNumberIsInput(ByRef productNode As Product, ByRef partNames As Object) As Boolean\\n    'test\\n    'CheckPartNumberIsInput = True\\n    'Exit Function\\n    CheckPartNumberIsInput = False\\n        Dim pNumStr As String\\n        'MsgBox productNode.Name\\n        pNumStr = productNode.PartNumber\\n    Dim itemStrReduce As String\\n    Dim item As Variant\\n    For Each item In partNames\\n                itemStr = item\\n                itemStrReduce = Left(pNumStr,Len(itemStr))\\n        If itemStrReduce = itemStr Then\\n            CheckPartNumberIsInput = True\\n            Exit Function\\n        End If\\n    Next\\nEnd Function\\n\\n'---------------------------------------------------------------------------------------------------------\\n'recursive in getting all children products\\n'Input: showPartNumber: get part number in excel\\n'       inputSearch: intput conditions\\n'       excelPath: excel Path\\n'       partNumberTitle: partNumber Title in excel table head\\n'Return: 0 ok, other error\\nFunction ReadExcel(ByRef showPartNumber As Object, inputSearch As Object, excelPath As String, partNumberTitle As String)\\n        ' 创建 Excel 应用程序对象\\n        Dim ExcelApp\\n        Set ExcelApp = CreateObject(\"Excel.Application\")\\n        ' 设置 Excel 应用程序可见\\n        ExcelApp.Visible = False\\n        ' 禁用 Excel 的警告和确认对话框\\n        ExcelApp.DisplayAlerts = False\\n        ' 打开 Excel 文件\\n        Dim Workbook\\n        Set Workbook = ExcelApp.Workbooks.Open(excelPath)\\n        ' 选择工作表\\n        Dim Sheets\\n        Set Sheets = Workbook.Sheets\\n        Dim Sheet\\n        Set Sheet = Workbook.Sheets(1)\\n        ' 输出工作表名称\\n        'MsgBox(\"工作表名称: \" \u0026 Sheet.Name)\\n\\n        '获取表头\\n        Dim allRows, allCols\\n        allRows = Sheet.UsedRange.Rows.Count\\n        allCols = Sheet.UsedRange.Columns.Count\\n        Dim row, col\\n        '获取PartNumber表头colum\\n        Dim PartNumberCol\\n        PartNumberCol = 0\\n        For col = 1 To allCols\\n                Dim CellValue\\n                CellValue = Sheet.cells(1, col).value\\n                If CellValue = partNumberTitle Then\\n                        PartNumberCol = col\\n                        Exit For\\n                End If\\n        Next\\n        'MsgBox(\"Part number column: \" \u0026 PartNumberCol)\\n\\n        'check value\\n        If PartNumberCol \u003c\u003e 0 Then\\n                For col = 1 To allCols\\n                        Dim CellTitle\\n                        CellTitle = Sheet.cells(1, col).value\\n                        Dim listCheck As Object\\n                        Set listCheck = GetMapList(inputSearch, CellTitle)\\n                        If Not listCheck Is Nothing Then\\n                                For row = 2 To allRows\\n                                        If Not Sheet.cells(row, col) Is Nothing Then\\n                                                Dim CellValue2 As String\\n                                                CellValue2 = Sheet.cells(row, col).value\\n\\n                                                For Each item In listCheck\\n                                                        'MsgBox(\"CellValue: \" \u0026 CellValue \u0026 \" item: \" \u0026 item)\\n                                                        Dim ret\\n                                                        'ret = True\\n                                                        'ret = CompareConditionCheck(CellValue2, item)\\n                                                        \\n                                                        'CATScript can not identify 'Like' key word\\n                                                        If CustomLikeAddAnyToPattern(CellValue2, item, True, True) Then\\n                                                                ret = True\\n                                                        Else\\n                                                                ret = False\\n                                                        End If\\n\\n                                                        If ret Then\\n                                                                Dim pNumber\\n                                                                pNumber = Sheet.cells(row, PartNumberCol).value\\n                                                                'MsgBox (\"Find Condition 行: \" \u0026 row \u0026 \", 列: \" \u0026 col \u0026 \", 值: \" \u0026 CellValue2 \u0026\",\\r\\n Find Part number: \" \u0026 pNumber)\\n                                                                AddToMap showPartNumber, pNumber, pNumber\\n                                                                Exit For\\n                                                        End If\\n\\n                                                Next\\n\\n                                        End If\\n                                Next\\n                        End If\\n                Next\\n        Else\\n                MsgBox(\"Can not find Part number in Excel!\")\\n        End If\\n        ' 释放对象\\n        Set Sheet = Nothing\\n        Set Sheets = Nothing\\n         ' 关闭 Excel 文件\\n        Workbook.Close(False)\\n        Set Workbook = Nothing\\n        ExcelApp.Quit\\n        Set ExcelApp = Nothing\\n        ' 清除 COM 对象\\n        'Call ReleaseCOMObjects\\n        ReadExcel = 0\\nEnd Function\\n\\n'------------------------------------------------------------------------------------------------------\\n'is add Asterisk in pattern\\n'Input: expression: expression string in excel\\n'       pattern: intput conditions pattern\\n'       preAsterisk: is add prefix Asterisk\\n'       sufAsterisk: is add suffix Asterisk\\n'Return: True, False\\nFunction CustomLikeAddAnyToPattern(expression As String, pattern As String, preAsterisk As Boolean, sufAsterisk As Boolean) As Boolean\\n        Dim valReg As String\\n        valReg = pattern\\n        If preAsterisk Then\\n                valReg = \"*\" \u0026 valReg\\n        End If\\n        If sufAsterisk Then\\n                valReg = valReg \u0026 \"*\"\\n        End If\\n        'MsgBox \"CellValue2:\" \u0026 CellValue2 \u0026 \" valReg:\" \u0026 valReg\\n        CustomLikeAddAnyToPattern = CustomLike(expression, valReg)\\nEnd Function\\n\\n'Custom VB Like Function, fuzzy search string\\n'Input: expression: expression string in excel\\n'       pattern: intput conditions pattern\\n'Return: True, False\\nFunction CustomLike(expression As String, pattern As String) As Boolean\\n        Dim i As Long, j As Long\\n        Dim exprLen As Long, patLen As Long\\n        Dim exprChar As String, patChar As String\\n        Dim exprPos As Long, patPos As Long\\n        Dim starPos As Long, exprStarPos As Long\\n\\n        exprLen = Len(expression)\\n        patLen = Len(pattern)\\n        exprPos = 1\\n        patPos = 1\\n        starPos = 0\\n        exprStarPos = 0\\n\\n        While exprPos \u003c= exprLen And patPos \u003c= patLen\\n                If patPos \u003c= patLen Then\\n                        patChar = Mid(pattern, patPos, 1)\\n                Else\\n                        patChar = \"\"\\n                End If\\n\\n                If exprPos \u003c= exprLen Then\\n                        exprChar = Mid(expression, exprPos, 1)\\n                Else\\n                        exprChar = \"\"\\n                End If\\n\\n                Select Case patChar\\n                        Case \"?\"\\n                                If exprChar = \"\" Then\\n                                        CustomLike = False\\n                                        Exit Function\\n                                End If\\n                                exprPos = exprPos + 1\\n                                patPos = patPos + 1\\n                        Case \"[\"\\n                                Dim charList As String, negated As Boolean\\n                                negated = False\\n                                patPos = patPos + 1\\n                                charList = \"\"\\n                                Do While patPos \u003c= patLen\\n                                        patChar = Mid(pattern, patPos, 1)\\n                                        If patChar = \"]\" Then\\n                                                patPos = patPos + 1\\n                                                Exit Do\\n                                        ElseIf patChar = \"^\" And Not negated Then\\n                                                negated = True\\n                                        Else\\n                                                charList = charList \u0026 patChar\\n                                        End If\\n                                        patPos = patPos + 1\\n                                Loop\\n                                If (negated And InStr(1, charList, exprChar, vbBinaryCompare) \u003e 0) Or (Not negated And InStr(1, charList, exprChar, vbBinaryCompare) = 0) Then\\n                                        CustomLike = False\\n                                        Exit Function\\n                                End If\\n                                exprPos = exprPos + 1\\n                        Case \"*\"\\n                                If patPos = patLen Then\\n                                        CustomLike = True\\n                                        Exit Function\\n                                End If\\n                                starPos = patPos\\n                                exprStarPos = exprPos\\n                                patPos = patPos + 1\\n                        Case Else\\n                                If exprChar \u003c\u003e patChar Then\\n                                        If starPos = 0 Then\\n                                                CustomLike = False\\n                                                Exit Function\\n                                        Else\\n                                                patPos = starPos + 1\\n                                                exprPos = exprStarPos + 1\\n                                                exprStarPos = exprPos\\n                                        End If\\n                                Else\\n                                        exprPos = exprPos + 1\\n                                        patPos = patPos + 1\\n                                End If\\n                End Select\\n        WEnd\\n\\n        If patPos = patLen Then\\n                CustomLike = True\\n        Else\\n                CustomLike = False\\n        End If\\nEnd Function\\n\\n'------------------------------------------------------------------------------------------------------        \\n' 创建一个函数来向 Map 中添加键值对\\nFunction AddToMapValueList(map, key, value)\\n        If Not map.Exists(key) Then\\n                ' 如果键不存在，则创建一个新的数组\\n                Dim newList\\n                Set newList = CreateObject(\"System.Collections.ArrayList\")\\n                newList.Add(value)\\n                map.Add key, newList\\n        Else\\n                ' 如果键已存在，则向现有列表中添加值\\n                Dim list\\n                Set list = map(key)\\n                list.Add(value)\\n        End If\\n        AddToMapValueList = 0\\nEnd Function\\n\\n' 创建一个函数来从 Map 中获取列表\\nFunction GetMapList(map, key)\\n        If map.Exists(key) Then\\n                Set GetMapList = map(key)\\n        Else\\n                Set GetMapList = Nothing\\n        End If\\nEnd Function\\n\\n'Map string, list\\nFunction AddToSet(ByRef collectMap As Collection, ByVal item As String) As Boolean\\n        If Not Contains(collectMap, item) Then\\n                collectMap.Add item, item\\n        End If\\n        AddToSet = True\\nEnd Function\\n\\nFunction AddToMap(ByRef collectMap As Collection, keyName As String, value As String) As Boolean\\n        If Not Contains(collectMap, keyName) Then\\n                collectMap.Add value, keyName\\n        End If\\n        AddToMap = True\\nEnd Function\\n\\nFunction Contains(ByRef collectMap As Collection, ByVal item As String) As Boolean\\n        On Error Resume Next\\n        collectMap.item(item)\\n        Contains = (Err.Number = 0)\\n        'On Error GoTo 0\\nEnd Function\\n\\nFunction RemoveFromSet(ByRef collectMap As Collection, ByVal item As String)\\n        If Contains(collectMap, item) Then\\n                collectMap.Remove item\\n        RemoveFromSet = 0\\n        Else\\n                RemoveFromSet = -1\\n        End If\\nEnd Function"
    },
    {
        "instruction": "高亮显示~/excel_file.xlsx中CR240*,[CR270LA]材质的组件。",
        "input": "",
        "output": "Language=CATSCRIPT\\n\\n'test main run\\nSub CATMain()\\n\\n        Dim excelPath = \"~/excel_file.xlsx\" \\n        Dim materials = \"CR240*,[CR270LA]\" \\n        \\n        Dim materialNames() As String = StrToArr materials\\n        \\n        ' 不支持Dir\\n        ' 检查文件是否存在\\n        'MsgBox \"FileExists: \" \u0026 fso.FileExists(excelPath)\\n        If fso.FileExists(excelPath) = False Then\\n        'MsgBox \"Excel文件不存在: \" \u0026 excelPath\\n                excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\\n                If fso.FileExists(excelPath) = False Then\\n                        MsgBox \"Excel文件不存在: \" \u0026 excelPath\\n                        Exit Sub\\n                End If\\n        End If\\n        Dim partNumberTitle\\n        partNumberTitle = \"Part number\"\\n        ' 创建一个 Dictionary 对象\\n        ' 创建 Scripting.Dictionary 对象\\n        Dim mapSearch\\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")\\n        'Dim mapSearch As New Collection\\n        'AddToMapValueList mapSearch, \"MaterialName\", \"CR240*\"\\n        'AddToMapValueList mapSearch, \"MaterialName\", \"*CR270LA*\"\\n        \\n        Dim expression\\n        expression = materials\\n        Dim strLen\\n        strLen = Len(expression)\\n        Dim splitPosition\\n        splitPosition = 1\\n        Dim exprChar\\n        For i = 1 To strLen\\n            exprChar = Mid(expression, i, 1)\\n            If Mid(expression, i, 1) = \",\" Then\\n                Dim mess\\n                mess = Mid(expression, splitPosition, i - splitPosition)\\n                splitPosition = i + 1\\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\\n            End If\\n        Next\\n        If splitPosition \u003c strLen Then\\n            Dim mess2\\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\\n        End If\\n    \\n\\n        Dim showPartNumber\\n        'showPartNumber.Add key:=\"test\", item:=\"test\"\\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\\n        'Set showPartNumber = New Collection\\n        'Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\\n        'MsgBox (\"CompareConditionCheck: \" \u0026 CompareConditionCheck(\"[CR270LA]\", \"CR240*\"))\\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\\n\\n        '---------------------------------------------------------------------------------\\n        'loop children\\n        Dim showChildComps As Object\\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\\n        'add root Document\\n        'childComps.Add item:=rootProduct.Name, key:=rootProduct.Name\\n        Dim transparencyChildComps As Object\\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\\n        Dim ret As Integer\\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\\nEnd Sub\\n\\n'getting all children products and set show or hide, and set Opacity\\n'Input: partNames: part number list\\n'       showChildComps: conform to part number, set show and no Opacity\\n'       transparencyChildComps: not conform to part number, set Opacity\\n'Return: 0 ok, other error\\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\\n        '使用catiaApp调用COM接口的方法\\n        Dim rootDoc As ProductDocument\\n        Set rootDoc = CATIA.ActiveDocument\\n        If rootDoc Is Nothing Then\\n            'ConcatMessagesStrings True, \"Can not get active document!\"\\n            CATIALoopChildren = -2\\n            Exit Function\\n        End If\\n\\n        'ConcatMessagesStrings False, \"active document:\", rootDoc.FullName\\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\\n            'ConcatMessagesStrings True, \"current document is not a assembly!\"\\n            CATIALoopChildren = -3\\n            Exit Function\\n        End If\\n\\n        'Dim ret As Integer\\n        'Product\\n        Dim rootProduct As Product\\n        Set rootProduct = rootDoc.Product\\n        Dim productChildren As Products\\n        Set productChildren = rootProduct.Products\\n        \\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\\n                \\n                CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\\n                \\nEnd Function\\n\\n'change products show or hide, and set Opacity\\n'Input: productRoot: root product\\n'       productNodes: select component list\\n'       isShow: \u003c0 not change, 0 show, 1 hide\\n'       isTransparency:\u003c0 no Transparency, 0~100 set Transparency(0~100)\\n'Return: 0 ok, other error\\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\\n        'CATIA.ActiveDocument.Selection.Search (\"Sketcher.AbsoluteAxis,all\")\\n        'CATIA.ActiveDocument.Selection.VisProperties.SetShow\\n        Dim parentDoc As Document\\n        Set parentDoc = productRoot.Parent\\n        If parentDoc Is Nothing Then\\n                ChangeCompState = -3\\n                Exit Function\\n        End If\\n                        \\n        Dim selectionNode As Selection\\n        Set selectionNode = parentDoc.Selection\\n        If selectionNode Is Nothing Then\\n                ChangeCompState = -4\\n                Exit Function\\n        End If\\n\\n        Dim visProp As visPropertySet\\n        Set visProp = selectionNode.VisProperties\\n        If visProp Is Nothing Then\\n                ChangeCompState = -5\\n                Exit Function\\n        End If\\n\\n        Dim productNode As Variant\\n        For Each productNode In productNodes\\n                selectionNode.Add productNode\\n        Next\\n\\n        Set visProp = visProp.Parent\\n        If visProp Is Nothing Then\\n                ChangeCompState = -6\\n                Exit Function\\n        End If\\n        \\n        'CatVisPropertyShow.catVisPropertyNoShowAttr    1\\n    'CatVisPropertyShow.catVisPropertyShowAttr      0\\n    If isShow \u003c 0 Then\\n        Dim showState As CatVisPropertyShow\\n        visProp.GetShow showState\\n        If showState \u003c\u003e isShow Then\\n            visProp.SetShow isShow\\n        End If\\n    End If\\n        \\n        If isTransparency \u003c 0 Then\\n        visProp.SetVisibleOpacity 100, 0\\n    Else\\n        visProp.SetVisibleOpacity isTransparency, 1\\n    End If\\n        selectionNode.Clear\\n        ChangeCompState = 0\\nEnd Function\\n\\n'recursive in getting all children products\\n'Input: productRoot: root product\\n'       productNode: current component product\\n'       partNames: part number list\\n'       showChildComps: conform to part number, set show and no Opacity\\n'       transparencyChildComps: not conform to part number, set Opacity\\n'       parentIsOk: parent product is conform to part number\\n'Return: 0 ok, other error\\nFunction GetChildren(ByRef productRoot As Product, ByRef productNode As Product, ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object, ByVal parentIsOk As Boolean) As Integer\\n    'Get children products as array\\n    Dim productsArr As Products\\n        Set productsArr = productNode.Products\\n        If productsArr Is Nothing Then\\n                GetChildren = -2\\n                Exit Function\\n        End If\\n        Dim returnVisable As Integer\\n        returnVisable = 0\\n        '0 default\\n        '1 all hide\\n        '2 all show\\n        '3 hide\\show\\n        Dim searchedID\\n        Set searchedID = CreateObject(\"Scripting.Dictionary\")\\n\\n        'On Error Resume Next\\n        For i = 1 To productsArr.Count\\n                'Get child\\n                Dim pdtChild As Product\\n                Set pdtChild = productsArr.item(i)\\n                'MsgBox \"now:\" \u0026 pdtChild.Name\\n                If parentIsOk Then\\n                        showChildComps.Add pdtChild\\n                        returnVisable = 2\\n                Else\\n                        Dim currentNodeIsSearched As Boolean\\n                        currentNodeIsSearched = CheckPartNumberIsInput(pdtChild, partNames)\\n                        'ret = ConcatMessagesStrings(True, pdtChild.PartNumber, ret, TypeName(pdtChild))\\n                        'If currentNodeIsSearched Then\\n                        '    searchedID.add(i, i)\\n                        '    parentIsOk = True\\n                        'End If\\n                        'check children-children\\n                        Dim ret As Integer\\n                        ret = 0\\n                        If CheckReferenceIsProductByDocType(pdtChild) Then\\n                                ret = GetChildren(productRoot, pdtChild, partNames, showChildComps, transparencyChildComps, currentNodeIsSearched)\\n                        End If\\n                        If ret \u003e 1 Or currentNodeIsSearched Then\\n                                searchedID.Add i, i\\n                                showChildComps.Add pdtChild\\n                                returnVisable = 2\\n                        End If\\n                End If\\n        Next\\n\\n    If returnVisable \u003c\u003e 0 Then\\n        For i = 1 To productsArr.Count\\n            If Not searchedID.Exists(i) Then\\n                transparencyChildComps.Add productsArr.item(i)\\n            End If\\n        Next\\n    End If\\n\\n    Set productsArr = Nothing\\n\\n    GetChildren = returnVisable\\n\\nEnd Function\\n\\n'Check Reference Product type\\n'Input:  Product component\\n'Return: CATProduct true, other false\\nFunction CheckReferenceIsProductByDocType(ByRef productNode As Product) As Boolean\\n    CheckReferenceIsProductByDocType = False\\n    'Retrieve the reference product\\n    Dim refpdt As Product\\n    Set refpdt = productNode.ReferenceProduct\\n    \\n    If Not refpdt Is Nothing Then\\n        Dim parentObj As CATBaseDispatch\\n        Set parentObj = refpdt.Parent\\n        \\n        'MsgBox (\"TypeName:\" \u0026 TypeName(parentObj))\\n        If StrComp(TypeName(parentObj), \"ProductDocument\", vbTextCompare) = 0 Then\\n            'CATPart CATProduct\\n            CheckReferenceIsProductByDocType = True\\n        End If\\n        Set parentObj = Nothing\\n        \\n    End If\\n    Set refpdt = Nothing\\n        \\nEnd Function\\n\\n'Check PartNumber Is same as Input\\n'Input: productNode: current component product\\n'       partNames: part number list\\n'Return: True, False\\nFunction CheckPartNumberIsInput(ByRef productNode As Product, ByRef partNames As Object) As Boolean\\n    'test\\n    'CheckPartNumberIsInput = True\\n    'Exit Function\\n    CheckPartNumberIsInput = False\\n        Dim pNumStr As String\\n        'MsgBox productNode.Name\\n        pNumStr = productNode.PartNumber\\n    Dim itemStrReduce As String\\n    Dim item As Variant\\n    For Each item In partNames\\n                itemStr = item\\n                itemStrReduce = Left(pNumStr,Len(itemStr))\\n        If itemStrReduce = itemStr Then\\n            CheckPartNumberIsInput = True\\n            Exit Function\\n        End If\\n    Next\\nEnd Function\\n\\n'---------------------------------------------------------------------------------------------------------\\n'recursive in getting all children products\\n'Input: showPartNumber: get part number in excel\\n'       inputSearch: intput conditions\\n'       excelPath: excel Path\\n'       partNumberTitle: partNumber Title in excel table head\\n'Return: 0 ok, other error\\nFunction ReadExcel(ByRef showPartNumber As Object, inputSearch As Object, excelPath As String, partNumberTitle As String)\\n        ' 创建 Excel 应用程序对象\\n        Dim ExcelApp\\n        Set ExcelApp = CreateObject(\"Excel.Application\")\\n        ' 设置 Excel 应用程序可见\\n        ExcelApp.Visible = False\\n        ' 禁用 Excel 的警告和确认对话框\\n        ExcelApp.DisplayAlerts = False\\n        ' 打开 Excel 文件\\n        Dim Workbook\\n        Set Workbook = ExcelApp.Workbooks.Open(excelPath)\\n        ' 选择工作表\\n        Dim Sheets\\n        Set Sheets = Workbook.Sheets\\n        Dim Sheet\\n        Set Sheet = Workbook.Sheets(1)\\n        ' 输出工作表名称\\n        'MsgBox(\"工作表名称: \" \u0026 Sheet.Name)\\n\\n        '获取表头\\n        Dim allRows, allCols\\n        allRows = Sheet.UsedRange.Rows.Count\\n        allCols = Sheet.UsedRange.Columns.Count\\n        Dim row, col\\n        '获取PartNumber表头colum\\n        Dim PartNumberCol\\n        PartNumberCol = 0\\n        For col = 1 To allCols\\n                Dim CellValue\\n                CellValue = Sheet.cells(1, col).value\\n                If CellValue = partNumberTitle Then\\n                        PartNumberCol = col\\n                        Exit For\\n                End If\\n        Next\\n        'MsgBox(\"Part number column: \" \u0026 PartNumberCol)\\n\\n        'check value\\n        If PartNumberCol \u003c\u003e 0 Then\\n                For col = 1 To allCols\\n                        Dim CellTitle\\n                        CellTitle = Sheet.cells(1, col).value\\n                        Dim listCheck As Object\\n                        Set listCheck = GetMapList(inputSearch, CellTitle)\\n                        If Not listCheck Is Nothing Then\\n                                For row = 2 To allRows\\n                                        If Not Sheet.cells(row, col) Is Nothing Then\\n                                                Dim CellValue2 As String\\n                                                CellValue2 = Sheet.cells(row, col).value\\n\\n                                                For Each item In listCheck\\n                                                        'MsgBox(\"CellValue: \" \u0026 CellValue \u0026 \" item: \" \u0026 item)\\n                                                        Dim ret\\n                                                        'ret = True\\n                                                        'ret = CompareConditionCheck(CellValue2, item)\\n                                                        \\n                                                        'CATScript can not identify 'Like' key word\\n                                                        If CustomLikeAddAnyToPattern(CellValue2, item, True, True) Then\\n                                                                ret = True\\n                                                        Else\\n                                                                ret = False\\n                                                        End If\\n\\n                                                        If ret Then\\n                                                                Dim pNumber\\n                                                                pNumber = Sheet.cells(row, PartNumberCol).value\\n                                                                'MsgBox (\"Find Condition 行: \" \u0026 row \u0026 \", 列: \" \u0026 col \u0026 \", 值: \" \u0026 CellValue2 \u0026\",\\r\\n Find Part number: \" \u0026 pNumber)\\n                                                                AddToMap showPartNumber, pNumber, pNumber\\n                                                                Exit For\\n                                                        End If\\n\\n                                                Next\\n\\n                                        End If\\n                                Next\\n                        End If\\n                Next\\n        Else\\n                MsgBox(\"Can not find Part number in Excel!\")\\n        End If\\n        ' 释放对象\\n        Set Sheet = Nothing\\n        Set Sheets = Nothing\\n         ' 关闭 Excel 文件\\n        Workbook.Close(False)\\n        Set Workbook = Nothing\\n        ExcelApp.Quit\\n        Set ExcelApp = Nothing\\n        ' 清除 COM 对象\\n        'Call ReleaseCOMObjects\\n        ReadExcel = 0\\nEnd Function\\n\\n'------------------------------------------------------------------------------------------------------\\n'is add Asterisk in pattern\\n'Input: expression: expression string in excel\\n'       pattern: intput conditions pattern\\n'       preAsterisk: is add prefix Asterisk\\n'       sufAsterisk: is add suffix Asterisk\\n'Return: True, False\\nFunction CustomLikeAddAnyToPattern(expression As String, pattern As String, preAsterisk As Boolean, sufAsterisk As Boolean) As Boolean\\n        Dim valReg As String\\n        valReg = pattern\\n        If preAsterisk Then\\n                valReg = \"*\" \u0026 valReg\\n        End If\\n        If sufAsterisk Then\\n                valReg = valReg \u0026 \"*\"\\n        End If\\n        'MsgBox \"CellValue2:\" \u0026 CellValue2 \u0026 \" valReg:\" \u0026 valReg\\n        CustomLikeAddAnyToPattern = CustomLike(expression, valReg)\\nEnd Function\\n\\n'Custom VB Like Function, fuzzy search string\\n'Input: expression: expression string in excel\\n'       pattern: intput conditions pattern\\n'Return: True, False\\nFunction CustomLike(expression As String, pattern As String) As Boolean\\n        Dim i As Long, j As Long\\n        Dim exprLen As Long, patLen As Long\\n        Dim exprChar As String, patChar As String\\n        Dim exprPos As Long, patPos As Long\\n        Dim starPos As Long, exprStarPos As Long\\n\\n        exprLen = Len(expression)\\n        patLen = Len(pattern)\\n        exprPos = 1\\n        patPos = 1\\n        starPos = 0\\n        exprStarPos = 0\\n\\n        While exprPos \u003c= exprLen And patPos \u003c= patLen\\n                If patPos \u003c= patLen Then\\n                        patChar = Mid(pattern, patPos, 1)\\n                Else\\n                        patChar = \"\"\\n                End If\\n\\n                If exprPos \u003c= exprLen Then\\n                        exprChar = Mid(expression, exprPos, 1)\\n                Else\\n                        exprChar = \"\"\\n                End If\\n\\n                Select Case patChar\\n                        Case \"?\"\\n                                If exprChar = \"\" Then\\n                                        CustomLike = False\\n                                        Exit Function\\n                                End If\\n                                exprPos = exprPos + 1\\n                                patPos = patPos + 1\\n                        Case \"[\"\\n                                Dim charList As String, negated As Boolean\\n                                negated = False\\n                                patPos = patPos + 1\\n                                charList = \"\"\\n                                Do While patPos \u003c= patLen\\n                                        patChar = Mid(pattern, patPos, 1)\\n                                        If patChar = \"]\" Then\\n                                                patPos = patPos + 1\\n                                                Exit Do\\n                                        ElseIf patChar = \"^\" And Not negated Then\\n                                                negated = True\\n                                        Else\\n                                                charList = charList \u0026 patChar\\n                                        End If\\n                                        patPos = patPos + 1\\n                                Loop\\n                                If (negated And InStr(1, charList, exprChar, vbBinaryCompare) \u003e 0) Or (Not negated And InStr(1, charList, exprChar, vbBinaryCompare) = 0) Then\\n                                        CustomLike = False\\n                                        Exit Function\\n                                End If\\n                                exprPos = exprPos + 1\\n                        Case \"*\"\\n                                If patPos = patLen Then\\n                                        CustomLike = True\\n                                        Exit Function\\n                                End If\\n                                starPos = patPos\\n                                exprStarPos = exprPos\\n                                patPos = patPos + 1\\n                        Case Else\\n                                If exprChar \u003c\u003e patChar Then\\n                                        If starPos = 0 Then\\n                                                CustomLike = False\\n                                                Exit Function\\n                                        Else\\n                                                patPos = starPos + 1\\n                                                exprPos = exprStarPos + 1\\n                                                exprStarPos = exprPos\\n                                        End If\\n                                Else\\n                                        exprPos = exprPos + 1\\n                                        patPos = patPos + 1\\n                                End If\\n                End Select\\n        WEnd\\n\\n        If patPos = patLen Then\\n                CustomLike = True\\n        Else\\n                CustomLike = False\\n        End If\\nEnd Function\\n\\n'------------------------------------------------------------------------------------------------------        \\n' 创建一个函数来向 Map 中添加键值对\\nFunction AddToMapValueList(map, key, value)\\n        If Not map.Exists(key) Then\\n                ' 如果键不存在，则创建一个新的数组\\n                Dim newList\\n                Set newList = CreateObject(\"System.Collections.ArrayList\")\\n                newList.Add(value)\\n                map.Add key, newList\\n        Else\\n                ' 如果键已存在，则向现有列表中添加值\\n                Dim list\\n                Set list = map(key)\\n                list.Add(value)\\n        End If\\n        AddToMapValueList = 0\\nEnd Function\\n\\n' 创建一个函数来从 Map 中获取列表\\nFunction GetMapList(map, key)\\n        If map.Exists(key) Then\\n                Set GetMapList = map(key)\\n        Else\\n                Set GetMapList = Nothing\\n        End If\\nEnd Function\\n\\n'Map string, list\\nFunction AddToSet(ByRef collectMap As Collection, ByVal item As String) As Boolean\\n        If Not Contains(collectMap, item) Then\\n                collectMap.Add item, item\\n        End If\\n        AddToSet = True\\nEnd Function\\n\\nFunction AddToMap(ByRef collectMap As Collection, keyName As String, value As String) As Boolean\\n        If Not Contains(collectMap, keyName) Then\\n                collectMap.Add value, keyName\\n        End If\\n        AddToMap = True\\nEnd Function\\n\\nFunction Contains(ByRef collectMap As Collection, ByVal item As String) As Boolean\\n        On Error Resume Next\\n        collectMap.item(item)\\n        Contains = (Err.Number = 0)\\n        'On Error GoTo 0\\nEnd Function\\n\\nFunction RemoveFromSet(ByRef collectMap As Collection, ByVal item As String)\\n        If Contains(collectMap, item) Then\\n                collectMap.Remove item\\n        RemoveFromSet = 0\\n        Else\\n                RemoveFromSet = -1\\n        End If\\nEnd Function"
    },
    {
        "instruction": "高亮显示CR240*,[CR270LA]材质的组件, part number表格路径~/excel_file.xlsx。",
        "input": "",
        "output": "Language=CATSCRIPT\\n\\n'test main run\\nSub CATMain()\\n\\n        Dim excelPath = \"~/excel_file.xlsx\" \\n        Dim materials = \"CR240*,[CR270LA]\" \\n        \\n        Dim materialNames() As String = StrToArr materials\\n        \\n        ' 不支持Dir\\n        ' 检查文件是否存在\\n        'MsgBox \"FileExists: \" \u0026 fso.FileExists(excelPath)\\n        If fso.FileExists(excelPath) = False Then\\n        'MsgBox \"Excel文件不存在: \" \u0026 excelPath\\n                excelPath = InputBox (\"Excel not Exists, enter excel path: \", \"Enter Excel path: \", excelPath)\\n                If fso.FileExists(excelPath) = False Then\\n                        MsgBox \"Excel文件不存在: \" \u0026 excelPath\\n                        Exit Sub\\n                End If\\n        End If\\n        Dim partNumberTitle\\n        partNumberTitle = \"Part number\"\\n        ' 创建一个 Dictionary 对象\\n        ' 创建 Scripting.Dictionary 对象\\n        Dim mapSearch\\n        Set mapSearch = CreateObject(\"Scripting.Dictionary\")\\n        'Dim mapSearch As New Collection\\n        'AddToMapValueList mapSearch, \"MaterialName\", \"CR240*\"\\n        'AddToMapValueList mapSearch, \"MaterialName\", \"*CR270LA*\"\\n        \\n        Dim expression\\n        expression = materials\\n        Dim strLen\\n        strLen = Len(expression)\\n        Dim splitPosition\\n        splitPosition = 1\\n        Dim exprChar\\n        For i = 1 To strLen\\n            exprChar = Mid(expression, i, 1)\\n            If Mid(expression, i, 1) = \",\" Then\\n                Dim mess\\n                mess = Mid(expression, splitPosition, i - splitPosition)\\n                splitPosition = i + 1\\n                AddToMapValueList mapSearch, \"MaterialName\", Trim(mess)\\n            End If\\n        Next\\n        If splitPosition \u003c strLen Then\\n            Dim mess2\\n            mess2 = Mid(expression, splitPosition, i - splitPosition)\\n            AddToMapValueList mapSearch, \"MaterialName\", Trim(mess2)\\n        End If\\n    \\n\\n        Dim showPartNumber\\n        'showPartNumber.Add key:=\"test\", item:=\"test\"\\n        Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\\n        'Set showPartNumber = New Collection\\n        'Set showPartNumber = CreateObject(\"Scripting.Dictionary\")\\n        'MsgBox (\"CompareConditionCheck: \" \u0026 CompareConditionCheck(\"[CR270LA]\", \"CR240*\"))\\n        ReadExcel showPartNumber, mapSearch, excelPath, partNumberTitle\\n\\n        '---------------------------------------------------------------------------------\\n        'loop children\\n        Dim showChildComps As Object\\n        Set showChildComps = CreateObject(\"System.Collections.ArrayList\")\\n        'add root Document\\n        'childComps.Add item:=rootProduct.Name, key:=rootProduct.Name\\n        Dim transparencyChildComps As Object\\n        Set transparencyChildComps = CreateObject(\"System.Collections.ArrayList\")\\n        Dim ret As Integer\\n        ret = CATIALoopChildren(showPartNumber, showChildComps, transparencyChildComps)\\nEnd Sub\\n\\n'getting all children products and set show or hide, and set Opacity\\n'Input: partNames: part number list\\n'       showChildComps: conform to part number, set show and no Opacity\\n'       transparencyChildComps: not conform to part number, set Opacity\\n'Return: 0 ok, other error\\nFunction CATIALoopChildren(ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object)\\n        '使用catiaApp调用COM接口的方法\\n        Dim rootDoc As ProductDocument\\n        Set rootDoc = CATIA.ActiveDocument\\n        If rootDoc Is Nothing Then\\n            'ConcatMessagesStrings True, \"Can not get active document!\"\\n            CATIALoopChildren = -2\\n            Exit Function\\n        End If\\n\\n        'ConcatMessagesStrings False, \"active document:\", rootDoc.FullName\\n        If TypeName(rootDoc) \u003c\u003e \"ProductDocument\" Then\\n            'ConcatMessagesStrings True, \"current document is not a assembly!\"\\n            CATIALoopChildren = -3\\n            Exit Function\\n        End If\\n\\n        'Dim ret As Integer\\n        'Product\\n        Dim rootProduct As Product\\n        Set rootProduct = rootDoc.Product\\n        Dim productChildren As Products\\n        Set productChildren = rootProduct.Products\\n        \\n        CATIALoopChildren = GetChildren(rootProduct, rootProduct, partNames, showChildComps, transparencyChildComps, False)\\n                \\n                CATIALoopChildren = ChangeCompState(rootProduct, showChildComps, CatVisPropertyShow.catVisPropertyShowAttr, -1)\\n        CATIALoopChildren = ChangeCompState(rootProduct, transparencyChildComps, -1, 0)\\n                \\nEnd Function\\n\\n'change products show or hide, and set Opacity\\n'Input: productRoot: root product\\n'       productNodes: select component list\\n'       isShow: \u003c0 not change, 0 show, 1 hide\\n'       isTransparency:\u003c0 no Transparency, 0~100 set Transparency(0~100)\\n'Return: 0 ok, other error\\nFunction ChangeCompState(ByRef productRoot As Product, ByRef productNodes As Object, isShow As Integer, isTransparency As Integer) As Integer\\n        'CATIA.ActiveDocument.Selection.Search (\"Sketcher.AbsoluteAxis,all\")\\n        'CATIA.ActiveDocument.Selection.VisProperties.SetShow\\n        Dim parentDoc As Document\\n        Set parentDoc = productRoot.Parent\\n        If parentDoc Is Nothing Then\\n                ChangeCompState = -3\\n                Exit Function\\n        End If\\n                        \\n        Dim selectionNode As Selection\\n        Set selectionNode = parentDoc.Selection\\n        If selectionNode Is Nothing Then\\n                ChangeCompState = -4\\n                Exit Function\\n        End If\\n\\n        Dim visProp As visPropertySet\\n        Set visProp = selectionNode.VisProperties\\n        If visProp Is Nothing Then\\n                ChangeCompState = -5\\n                Exit Function\\n        End If\\n\\n        Dim productNode As Variant\\n        For Each productNode In productNodes\\n                selectionNode.Add productNode\\n        Next\\n\\n        Set visProp = visProp.Parent\\n        If visProp Is Nothing Then\\n                ChangeCompState = -6\\n                Exit Function\\n        End If\\n        \\n        'CatVisPropertyShow.catVisPropertyNoShowAttr    1\\n    'CatVisPropertyShow.catVisPropertyShowAttr      0\\n    If isShow \u003c 0 Then\\n        Dim showState As CatVisPropertyShow\\n        visProp.GetShow showState\\n        If showState \u003c\u003e isShow Then\\n            visProp.SetShow isShow\\n        End If\\n    End If\\n        \\n        If isTransparency \u003c 0 Then\\n        visProp.SetVisibleOpacity 100, 0\\n    Else\\n        visProp.SetVisibleOpacity isTransparency, 1\\n    End If\\n        selectionNode.Clear\\n        ChangeCompState = 0\\nEnd Function\\n\\n'recursive in getting all children products\\n'Input: productRoot: root product\\n'       productNode: current component product\\n'       partNames: part number list\\n'       showChildComps: conform to part number, set show and no Opacity\\n'       transparencyChildComps: not conform to part number, set Opacity\\n'       parentIsOk: parent product is conform to part number\\n'Return: 0 ok, other error\\nFunction GetChildren(ByRef productRoot As Product, ByRef productNode As Product, ByRef partNames As Object, ByRef showChildComps As Object, ByRef transparencyChildComps As Object, ByVal parentIsOk As Boolean) As Integer\\n    'Get children products as array\\n    Dim productsArr As Products\\n        Set productsArr = productNode.Products\\n        If productsArr Is Nothing Then\\n                GetChildren = -2\\n                Exit Function\\n        End If\\n        Dim returnVisable As Integer\\n        returnVisable = 0\\n        '0 default\\n        '1 all hide\\n        '2 all show\\n        '3 hide\\show\\n        Dim searchedID\\n        Set searchedID = CreateObject(\"Scripting.Dictionary\")\\n\\n        'On Error Resume Next\\n        For i = 1 To productsArr.Count\\n                'Get child\\n                Dim pdtChild As Product\\n                Set pdtChild = productsArr.item(i)\\n                'MsgBox \"now:\" \u0026 pdtChild.Name\\n                If parentIsOk Then\\n                        showChildComps.Add pdtChild\\n                        returnVisable = 2\\n                Else\\n                        Dim currentNodeIsSearched As Boolean\\n                        currentNodeIsSearched = CheckPartNumberIsInput(pdtChild, partNames)\\n                        'ret = ConcatMessagesStrings(True, pdtChild.PartNumber, ret, TypeName(pdtChild))\\n                        'If currentNodeIsSearched Then\\n                        '    searchedID.add(i, i)\\n                        '    parentIsOk = True\\n                        'End If\\n                        'check children-children\\n                        Dim ret As Integer\\n                        ret = 0\\n                        If CheckReferenceIsProductByDocType(pdtChild) Then\\n                                ret = GetChildren(productRoot, pdtChild, partNames, showChildComps, transparencyChildComps, currentNodeIsSearched)\\n                        End If\\n                        If ret \u003e 1 Or currentNodeIsSearched Then\\n                                searchedID.Add i, i\\n                                showChildComps.Add pdtChild\\n                                returnVisable = 2\\n                        End If\\n                End If\\n        Next\\n\\n    If returnVisable \u003c\u003e 0 Then\\n        For i = 1 To productsArr.Count\\n            If Not searchedID.Exists(i) Then\\n                transparencyChildComps.Add productsArr.item(i)\\n            End If\\n        Next\\n    End If\\n\\n    Set productsArr = Nothing\\n\\n    GetChildren = returnVisable\\n\\nEnd Function\\n\\n'Check Reference Product type\\n'Input:  Product component\\n'Return: CATProduct true, other false\\nFunction CheckReferenceIsProductByDocType(ByRef productNode As Product) As Boolean\\n    CheckReferenceIsProductByDocType = False\\n    'Retrieve the reference product\\n    Dim refpdt As Product\\n    Set refpdt = productNode.ReferenceProduct\\n    \\n    If Not refpdt Is Nothing Then\\n        Dim parentObj As CATBaseDispatch\\n        Set parentObj = refpdt.Parent\\n        \\n        'MsgBox (\"TypeName:\" \u0026 TypeName(parentObj))\\n        If StrComp(TypeName(parentObj), \"ProductDocument\", vbTextCompare) = 0 Then\\n            'CATPart CATProduct\\n            CheckReferenceIsProductByDocType = True\\n        End If\\n        Set parentObj = Nothing\\n        \\n    End If\\n    Set refpdt = Nothing\\n        \\nEnd Function\\n\\n'Check PartNumber Is same as Input\\n'Input: productNode: current component product\\n'       partNames: part number list\\n'Return: True, False\\nFunction CheckPartNumberIsInput(ByRef productNode As Product, ByRef partNames As Object) As Boolean\\n    'test\\n    'CheckPartNumberIsInput = True\\n    'Exit Function\\n    CheckPartNumberIsInput = False\\n        Dim pNumStr As String\\n        'MsgBox productNode.Name\\n        pNumStr = productNode.PartNumber\\n    Dim itemStrReduce As String\\n    Dim item As Variant\\n    For Each item In partNames\\n                itemStr = item\\n                itemStrReduce = Left(pNumStr,Len(itemStr))\\n        If itemStrReduce = itemStr Then\\n            CheckPartNumberIsInput = True\\n            Exit Function\\n        End If\\n    Next\\nEnd Function\\n\\n'---------------------------------------------------------------------------------------------------------\\n'recursive in getting all children products\\n'Input: showPartNumber: get part number in excel\\n'       inputSearch: intput conditions\\n'       excelPath: excel Path\\n'       partNumberTitle: partNumber Title in excel table head\\n'Return: 0 ok, other error\\nFunction ReadExcel(ByRef showPartNumber As Object, inputSearch As Object, excelPath As String, partNumberTitle As String)\\n        ' 创建 Excel 应用程序对象\\n        Dim ExcelApp\\n        Set ExcelApp = CreateObject(\"Excel.Application\")\\n        ' 设置 Excel 应用程序可见\\n        ExcelApp.Visible = False\\n        ' 禁用 Excel 的警告和确认对话框\\n        ExcelApp.DisplayAlerts = False\\n        ' 打开 Excel 文件\\n        Dim Workbook\\n        Set Workbook = ExcelApp.Workbooks.Open(excelPath)\\n        ' 选择工作表\\n        Dim Sheets\\n        Set Sheets = Workbook.Sheets\\n        Dim Sheet\\n        Set Sheet = Workbook.Sheets(1)\\n        ' 输出工作表名称\\n        'MsgBox(\"工作表名称: \" \u0026 Sheet.Name)\\n\\n        '获取表头\\n        Dim allRows, allCols\\n        allRows = Sheet.UsedRange.Rows.Count\\n        allCols = Sheet.UsedRange.Columns.Count\\n        Dim row, col\\n        '获取PartNumber表头colum\\n        Dim PartNumberCol\\n        PartNumberCol = 0\\n        For col = 1 To allCols\\n                Dim CellValue\\n                CellValue = Sheet.cells(1, col).value\\n                If CellValue = partNumberTitle Then\\n                        PartNumberCol = col\\n                        Exit For\\n                End If\\n        Next\\n        'MsgBox(\"Part number column: \" \u0026 PartNumberCol)\\n\\n        'check value\\n        If PartNumberCol \u003c\u003e 0 Then\\n                For col = 1 To allCols\\n                        Dim CellTitle\\n                        CellTitle = Sheet.cells(1, col).value\\n                        Dim listCheck As Object\\n                        Set listCheck = GetMapList(inputSearch, CellTitle)\\n                        If Not listCheck Is Nothing Then\\n                                For row = 2 To allRows\\n                                        If Not Sheet.cells(row, col) Is Nothing Then\\n                                                Dim CellValue2 As String\\n                                                CellValue2 = Sheet.cells(row, col).value\\n\\n                                                For Each item In listCheck\\n                                                        'MsgBox(\"CellValue: \" \u0026 CellValue \u0026 \" item: \" \u0026 item)\\n                                                        Dim ret\\n                                                        'ret = True\\n                                                        'ret = CompareConditionCheck(CellValue2, item)\\n                                                        \\n                                                        'CATScript can not identify 'Like' key word\\n                                                        If CustomLikeAddAnyToPattern(CellValue2, item, True, True) Then\\n                                                                ret = True\\n                                                        Else\\n                                                                ret = False\\n                                                        End If\\n\\n                                                        If ret Then\\n                                                                Dim pNumber\\n                                                                pNumber = Sheet.cells(row, PartNumberCol).value\\n                                                                'MsgBox (\"Find Condition 行: \" \u0026 row \u0026 \", 列: \" \u0026 col \u0026 \", 值: \" \u0026 CellValue2 \u0026\",\\r\\n Find Part number: \" \u0026 pNumber)\\n                                                                AddToMap showPartNumber, pNumber, pNumber\\n                                                                Exit For\\n                                                        End If\\n\\n                                                Next\\n\\n                                        End If\\n                                Next\\n                        End If\\n                Next\\n        Else\\n                MsgBox(\"Can not find Part number in Excel!\")\\n        End If\\n        ' 释放对象\\n        Set Sheet = Nothing\\n        Set Sheets = Nothing\\n         ' 关闭 Excel 文件\\n        Workbook.Close(False)\\n        Set Workbook = Nothing\\n        ExcelApp.Quit\\n        Set ExcelApp = Nothing\\n        ' 清除 COM 对象\\n        'Call ReleaseCOMObjects\\n        ReadExcel = 0\\nEnd Function\\n\\n'------------------------------------------------------------------------------------------------------\\n'is add Asterisk in pattern\\n'Input: expression: expression string in excel\\n'       pattern: intput conditions pattern\\n'       preAsterisk: is add prefix Asterisk\\n'       sufAsterisk: is add suffix Asterisk\\n'Return: True, False\\nFunction CustomLikeAddAnyToPattern(expression As String, pattern As String, preAsterisk As Boolean, sufAsterisk As Boolean) As Boolean\\n        Dim valReg As String\\n        valReg = pattern\\n        If preAsterisk Then\\n                valReg = \"*\" \u0026 valReg\\n        End If\\n        If sufAsterisk Then\\n                valReg = valReg \u0026 \"*\"\\n        End If\\n        'MsgBox \"CellValue2:\" \u0026 CellValue2 \u0026 \" valReg:\" \u0026 valReg\\n        CustomLikeAddAnyToPattern = CustomLike(expression, valReg)\\nEnd Function\\n\\n'Custom VB Like Function, fuzzy search string\\n'Input: expression: expression string in excel\\n'       pattern: intput conditions pattern\\n'Return: True, False\\nFunction CustomLike(expression As String, pattern As String) As Boolean\\n        Dim i As Long, j As Long\\n        Dim exprLen As Long, patLen As Long\\n        Dim exprChar As String, patChar As String\\n        Dim exprPos As Long, patPos As Long\\n        Dim starPos As Long, exprStarPos As Long\\n\\n        exprLen = Len(expression)\\n        patLen = Len(pattern)\\n        exprPos = 1\\n        patPos = 1\\n        starPos = 0\\n        exprStarPos = 0\\n\\n        While exprPos \u003c= exprLen And patPos \u003c= patLen\\n                If patPos \u003c= patLen Then\\n                        patChar = Mid(pattern, patPos, 1)\\n                Else\\n                        patChar = \"\"\\n                End If\\n\\n                If exprPos \u003c= exprLen Then\\n                        exprChar = Mid(expression, exprPos, 1)\\n                Else\\n                        exprChar = \"\"\\n                End If\\n\\n                Select Case patChar\\n                        Case \"?\"\\n                                If exprChar = \"\" Then\\n                                        CustomLike = False\\n                                        Exit Function\\n                                End If\\n                                exprPos = exprPos + 1\\n                                patPos = patPos + 1\\n                        Case \"[\"\\n                                Dim charList As String, negated As Boolean\\n                                negated = False\\n                                patPos = patPos + 1\\n                                charList = \"\"\\n                                Do While patPos \u003c= patLen\\n                                        patChar = Mid(pattern, patPos, 1)\\n                                        If patChar = \"]\" Then\\n                                                patPos = patPos + 1\\n                                                Exit Do\\n                                        ElseIf patChar = \"^\" And Not negated Then\\n                                                negated = True\\n                                        Else\\n                                                charList = charList \u0026 patChar\\n                                        End If\\n                                        patPos = patPos + 1\\n                                Loop\\n                                If (negated And InStr(1, charList, exprChar, vbBinaryCompare) \u003e 0) Or (Not negated And InStr(1, charList, exprChar, vbBinaryCompare) = 0) Then\\n                                        CustomLike = False\\n                                        Exit Function\\n                                End If\\n                                exprPos = exprPos + 1\\n                        Case \"*\"\\n                                If patPos = patLen Then\\n                                        CustomLike = True\\n                                        Exit Function\\n                                End If\\n                                starPos = patPos\\n                                exprStarPos = exprPos\\n                                patPos = patPos + 1\\n                        Case Else\\n                                If exprChar \u003c\u003e patChar Then\\n                                        If starPos = 0 Then\\n                                                CustomLike = False\\n                                                Exit Function\\n                                        Else\\n                                                patPos = starPos + 1\\n                                                exprPos = exprStarPos + 1\\n                                                exprStarPos = exprPos\\n                                        End If\\n                                Else\\n                                        exprPos = exprPos + 1\\n                                        patPos = patPos + 1\\n                                End If\\n                End Select\\n        WEnd\\n\\n        If patPos = patLen Then\\n                CustomLike = True\\n        Else\\n                CustomLike = False\\n        End If\\nEnd Function\\n\\n'------------------------------------------------------------------------------------------------------        \\n' 创建一个函数来向 Map 中添加键值对\\nFunction AddToMapValueList(map, key, value)\\n        If Not map.Exists(key) Then\\n                ' 如果键不存在，则创建一个新的数组\\n                Dim newList\\n                Set newList = CreateObject(\"System.Collections.ArrayList\")\\n                newList.Add(value)\\n                map.Add key, newList\\n        Else\\n                ' 如果键已存在，则向现有列表中添加值\\n                Dim list\\n                Set list = map(key)\\n                list.Add(value)\\n        End If\\n        AddToMapValueList = 0\\nEnd Function\\n\\n' 创建一个函数来从 Map 中获取列表\\nFunction GetMapList(map, key)\\n        If map.Exists(key) Then\\n                Set GetMapList = map(key)\\n        Else\\n                Set GetMapList = Nothing\\n        End If\\nEnd Function\\n\\n'Map string, list\\nFunction AddToSet(ByRef collectMap As Collection, ByVal item As String) As Boolean\\n        If Not Contains(collectMap, item) Then\\n                collectMap.Add item, item\\n        End If\\n        AddToSet = True\\nEnd Function\\n\\nFunction AddToMap(ByRef collectMap As Collection, keyName As String, value As String) As Boolean\\n        If Not Contains(collectMap, keyName) Then\\n                collectMap.Add value, keyName\\n        End If\\n        AddToMap = True\\nEnd Function\\n\\nFunction Contains(ByRef collectMap As Collection, ByVal item As String) As Boolean\\n        On Error Resume Next\\n        collectMap.item(item)\\n        Contains = (Err.Number = 0)\\n        'On Error GoTo 0\\nEnd Function\\n\\nFunction RemoveFromSet(ByRef collectMap As Collection, ByVal item As String)\\n        If Contains(collectMap, item) Then\\n                collectMap.Remove item\\n        RemoveFromSet = 0\\n        Else\\n                RemoveFromSet = -1\\n        End If\\nEnd Function"
    }
]